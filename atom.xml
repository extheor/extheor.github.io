<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码小余の博客</title>
  <icon>https://www.gravatar.com/avatar/7ff8334eb3ce169d5ef407706436ee76</icon>
  <subtitle>每天进步一点点！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://extheor.club/"/>
  <updated>2020-11-07T15:52:21.823Z</updated>
  <id>https://extheor.club/</id>
  
  <author>
    <name>Continue.Run</name>
    <email>2044580857@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>电商PC后台管理</title>
    <link href="https://extheor.club/posts/86cad295/index.html"/>
    <id>https://extheor.club/posts/86cad295/index.html</id>
    <published>2020-11-07T15:39:54.580Z</published>
    <updated>2020-11-07T15:52:21.823Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="电商pc后台管理"><a class="markdownIt-Anchor" href="#电商pc后台管理"></a> 电商PC后台管理</h1><h2 id="1项目概述"><a class="markdownIt-Anchor" href="#1项目概述"></a> 1.项目概述</h2><h3 id="11电商项目基本业务概述"><a class="markdownIt-Anchor" href="#11电商项目基本业务概述"></a> 1.1电商项目基本业务概述</h3><p>根据不同的场景，电商系统一般都提供了PC端、移动 APP、移动 Web、微信小程序等多种终端访问方式。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@351ed53b30aa6b8c2be735c2f8ebb3455987002f/2020/11/05/5d74b2b2b415ed4b001456aab01b8bfa.png" alt="img"></p><h3 id="12电商后台管理系统的功能"><a class="markdownIt-Anchor" href="#12电商后台管理系统的功能"></a> 1.2电商后台管理系统的功能</h3><p>电商后台 管理系统同用于管理用户账号、商品分类、商品信息、订单、数据统计等业务功能。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@ff226b4c2f1141a8b5887c2b2682c034cc14e179/2020/11/05/ab5135deca9c078a7b559e106b07f683.png" alt="img"></p><h3 id="13电商后台管理系统的开发模式前后端分离"><a class="markdownIt-Anchor" href="#13电商后台管理系统的开发模式前后端分离"></a> 1.3电商后台管理系统的开发模式（前后端分离）</h3><p>电商后台管理系统整体采用前后端分离的开发模式，其中前端项目是<strong>基于Vue技术栈的SPA项目</strong>。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@442666bd2fd62dfafde441a9eef1259027539d63/2020/11/05/29e4642257f2f4cc9bee9d20d5d969b0.png" alt=""></p><h3 id="14电商后台管理系统的技术选型"><a class="markdownIt-Anchor" href="#14电商后台管理系统的技术选型"></a> 1.4电商后台管理系统的技术选型</h3><h4 id="1前端项目技术栈"><a class="markdownIt-Anchor" href="#1前端项目技术栈"></a> 1.前端项目技术栈</h4><ul><li>Vue</li><li>Vue-router</li><li>Element-UI</li><li>Axios</li><li>Echarts</li></ul><h4 id="2后端项目技术栈"><a class="markdownIt-Anchor" href="#2后端项目技术栈"></a> 2.后端项目技术栈</h4><ul><li>Node.js</li><li>Express</li><li>Jwt</li><li>Mysql</li><li>Sequelize</li></ul><h2 id="2项目初始化"><a class="markdownIt-Anchor" href="#2项目初始化"></a> 2.项目初始化</h2><h3 id="21前端项目初始化步骤"><a class="markdownIt-Anchor" href="#21前端项目初始化步骤"></a> 2.1前端项目初始化步骤</h3><p>① 安装vue脚手架</p><p>② 通过 vue 脚手架创建项目</p><p>③ 配置 vue 路由</p><p>④ 配置 Element-UI 组件库</p><p>⑤ 配置 axios 库</p><p>⑥ 初始化 git 远程仓库</p><p>⑦ 将本地项目托管到 Github 或码云中</p><h3 id="22后台项目的环境安装配置"><a class="markdownIt-Anchor" href="#22后台项目的环境安装配置"></a> 2.2后台项目的环境安装配置</h3><p>① 安装MySQL数据库</p><p>② 安装Node.js 环境</p><p>③ 配置项目相关信息</p><p>④ 启动项目</p><p>⑤ 使用Postman 测试后台项目接口是否正常</p><h2 id="3登录退出功能"><a class="markdownIt-Anchor" href="#3登录退出功能"></a> 3.登录/退出功能</h2><h3 id="31登录概述"><a class="markdownIt-Anchor" href="#31登录概述"></a> 3.1登录概述</h3><h4 id="1登录业务流程"><a class="markdownIt-Anchor" href="#1登录业务流程"></a> 1.登录业务流程</h4><p>① 在登录页面输入用户名和密码</p><p>② 调用后台接口进行验证</p><p>③ 通过验证之后，根据后台的响应状态跳转到项目主页</p><h4 id="2登录业务的相关技术点"><a class="markdownIt-Anchor" href="#2登录业务的相关技术点"></a> 2.登录业务的相关技术点</h4><ul><li>http是无状态的</li><li>通过cookie在客户端记录状态</li><li>通过session在服务器端记录状态</li><li>通过token方式维持状态</li></ul><h3 id="32登录-token-原理分析"><a class="markdownIt-Anchor" href="#32登录-token-原理分析"></a> 3.2登录 —— token 原理分析</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@9416475db0035ffcf97e4417464c39b68267dc7d/2020/11/05/1065b2672aab1c59f957cb2bf2d2e4aa.png" alt="image-20201105094725505"></p><h3 id="33登录功能实现"><a class="markdownIt-Anchor" href="#33登录功能实现"></a> 3.3登录功能实现</h3><h4 id="1登录页面的布局"><a class="markdownIt-Anchor" href="#1登录页面的布局"></a> 1.登录页面的布局</h4><p>通过Element-UI组件实现布局</p><ul><li>el-form</li><li>el-form-item</li><li>el-input</li><li>el-button</li><li>字体图标</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@a55d193b20ad8c7c0498d62e136eb7f6c4496a36/2020/11/05/353c9ec1d5dcdd14862390903e8180ac.png" alt="image-20201105094947874"></p><blockquote><p>首先打开 vue-shop 项目</p></blockquote><ul><li>查看文件，文件夹在工作区，暂存区的状态</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></tbody></table></figure><ul><li>创建并切换 <code>login</code> 分支</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b login</span><br></pre></td></tr></tbody></table></figure><ul><li>查看所有分支</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></figure><h4 id="2loginvue-文件解读"><a class="markdownIt-Anchor" href="#2loginvue-文件解读"></a> 2.Login.vue 文件解读</h4><blockquote><p>这是一个 Vue 单文件组件</p><p>祖传 Vue 布局如下</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scope&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>我们需要在 <code>&lt;template&gt;</code> 标签中进行布局</p><p>在 <code>&lt;script&gt;</code> 标签中编写用户行为和数据定义</p><p>在 <code>&lt;style&gt;</code> 标签中定义样式</p></blockquote><blockquote><p>我用到了 ElementUI 库，主要是记录一下这个库的用法</p><p>先放上源码，我会对下面的代码进行解读</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class="login_container"&gt;</span><br><span class="line">    &lt;div class="login_box"&gt;</span><br><span class="line">        &lt;!-- 头像区域 --&gt;</span><br><span class="line">        &lt;div class="avatar_box"&gt;</span><br><span class="line">            &lt;img src="../assets/logo.png" alt=""&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">            &lt;!-- 登录表单区域 --&gt;</span><br><span class="line">            &lt;el-form :model="loginForm" :rules="loginFormRules" ref="loginFormRef" label-width="0px" class="login_form"&gt;</span><br><span class="line">                &lt;!-- 用户名 --&gt;</span><br><span class="line">                &lt;el-form-item prop="username"&gt;</span><br><span class="line">                    &lt;el-input v-model="loginForm.username" prefix-icon="iconfont icon-user"&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">                &lt;!-- 密码 --&gt;</span><br><span class="line">                &lt;el-form-item prop="password"&gt;</span><br><span class="line">                    &lt;el-input v-model="loginForm.password" type="password" prefix-icon="iconfont icon-password"&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">                &lt;!-- 按钮区域 --&gt;</span><br><span class="line">                &lt;el-form-item class="btns"&gt;</span><br><span class="line">                    &lt;el-button type="primary" @click="login"&gt;登录&lt;/el-button&gt;</span><br><span class="line">                    &lt;el-button type="info" @click="resetLoginForm"&gt;重置&lt;/el-button&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">            &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;       </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        data() {</span><br><span class="line">            return {</span><br><span class="line">                // 这是登录表单的数据绑定对象</span><br><span class="line">                loginForm: {</span><br><span class="line">                    username: "",</span><br><span class="line">                    password: ""</span><br><span class="line">                },</span><br><span class="line">                // 这是登录表单验证</span><br><span class="line">                loginFormRules: {</span><br><span class="line">                    username: [</span><br><span class="line">                        { required: true, message: '请输入登录名称', trigger: 'blur' },</span><br><span class="line">                        { min: 3, max: 10, message: '长度在 3 到 10 个字符', trigger: 'blur' }</span><br><span class="line">                    ],</span><br><span class="line">                    password: [</span><br><span class="line">                        { required: true, message: '请输入登录密码', trigger: 'blur' },</span><br><span class="line">                        { min: 6, max: 16, message: '长度在 6 到 16 个字符', trigger: 'blur' }</span><br><span class="line">                    ]</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">            resetLoginForm(){</span><br><span class="line">                // 对整个表单进行重置，将所有字段值重置为初始值并移除校验结果</span><br><span class="line">                this.$refs.loginFormRef.resetFields()</span><br><span class="line">            },</span><br><span class="line">            login(){</span><br><span class="line">                this.$refs.loginFormRef.validate((valid)=&gt;{</span><br><span class="line">                    console.log(valid);</span><br><span class="line">                })</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scope&gt;</span><br><span class="line">    .login_container {</span><br><span class="line">        background: #2b4b6b;</span><br><span class="line">        height: 100%;</span><br><span class="line">        position: relative;</span><br><span class="line">    }</span><br><span class="line">    .login_box {</span><br><span class="line">        width: 450px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background: #ffffff;</span><br><span class="line">        border-radius: 3px;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 50%;</span><br><span class="line">        top: 50%;</span><br><span class="line">        transform: translate(-50%, -50%);</span><br><span class="line">    }</span><br><span class="line">    .avatar_box {</span><br><span class="line">        width: 130px;</span><br><span class="line">        height: 130px;</span><br><span class="line">        border: solid 1px #eee;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        background: #ffffff;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        box-shadow: 0 0 10px #ddd;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 50%;</span><br><span class="line">        transform: translate(-50%, -50%);</span><br><span class="line">        img {</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            background: #eee;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    .login_form {</span><br><span class="line">        position: absolute;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        padding: 0 10px;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">    }</span><br><span class="line">    .btns {</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: flex-end;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在 <code>&lt;el-form&gt;</code> 标签中添加 <code>:model</code> 属性，这是登录表单的数据绑定对象，Ta需要和 <code>&lt;el-input&gt;</code> 标签中的 <code>v-module</code> 配合使用</p><p><code>:rules</code> 是登录表单验证，Ta需要在 JS 区域的 data 中返回一个登录表单验证对象，其中的属性为需要验证的内容，如何使用？在 <code>el-form-item</code> 标签中新增 <code>prop</code> 属性，使它的值为刚刚在 data 中定义的属性值</p><p><code>&lt;el-input&gt;</code> 标签中的 <code>prefix-icon</code> 属性是用来设置前置字体图标的，我引用的阿里矢量图库，也可以通过 <code>suffix-icon</code> 属性在 input 组件的尾部增加显示图标。</p><p><code>&lt;el-form&gt;</code> 表单中的 <code>ref</code> 属性是为当前表单注册一个实例对象，Ta的属性名就是这个实例对象的名称，比如说我自定义的名称为 <code>loginFormRef</code> ，那我就可以通过 <code>this.$refs.loginFormRef</code> 来访问到这个实例对象。</p><p><code>resetFields</code> 可以通过 <code>this.$refs.loginFormRef.resetFields()</code> 调用此方法，此方法的作用是：对整个表单进行重置，将所有字段值重置为初始值并移除校验结果。</p><p><code>validate</code> 可以通过 <code>this.$refs.loginFormRef.validate()</code> 调用此方法，此方法的作用是：对整个表单进行校验的方法，参数为一个回调函数。该回调函数会在校验结束后被调用，并传入两个参数：是否校验成功和未通过校验的字段。若不传入回调函数，则会返回一个 promise。Function(callback: Function(boolean, object))</p></blockquote><h4 id="3路由导航守卫控制访问权限"><a class="markdownIt-Anchor" href="#3路由导航守卫控制访问权限"></a> 3.路由导航守卫控制访问权限</h4><p>如果用户没有登录，但是直接通过URL访问特定页面，需要重新导航到登录页面</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为路由对象，添加 beforeEach 导航守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// 如果用户访问的登录页，直接放行</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">"/login"</span>) <span class="keyword">return</span> next()</span><br><span class="line">    <span class="comment">// 从 sessionStorage 中获取到保存的 token 值</span></span><br><span class="line">    <span class="keyword">const</span> tokenStr = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">"token"</span>)</span><br><span class="line">    <span class="comment">// 没有 token ，强制跳转到登录页</span></span><br><span class="line">    <span class="keyword">if</span> (!tokenStr) <span class="keyword">return</span> next(<span class="string">"/login"</span>)</span><br><span class="line">    next()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="34退出"><a class="markdownIt-Anchor" href="#34退出"></a> 3.4退出</h3><h4 id="退出功能实现原理"><a class="markdownIt-Anchor" href="#退出功能实现原理"></a> 退出功能实现原理</h4><p>基于token 的方式实现退出比较简单，只需要销毁本地的token即可。这样，后续的请求就不会携带token，必须重新登录生成一个新的token之后才可以访问页面。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清空token</span></span><br><span class="line"><span class="built_in">window</span>.sessionStorage.clear()</span><br><span class="line"><span class="comment">// 跳转到登录页</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">'/login'</span>)</span><br></pre></td></tr></tbody></table></figure><p>解决 eslintrc 格式化报错问题</p><p>在项目中新建 <code>.prettierrc</code> 文件，文件内容如下</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="attr">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"singleQuote"</span>: <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>“semi”: false    表示移除分号(😉</p><p>“singleQuote”: true    表示用单引号(’’)来表示字符串</p></blockquote><blockquote><p>最后在每个需要修改的文件中使用快捷键 <code>Ctrl+Alt+\</code> 进行格式化文档</p></blockquote><p>在 <code>.eslintrc.js</code> --&gt; rules 下新建一条命令</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"space-before-function-paren"</span>: <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="35将本地代码提交到码云上"><a class="markdownIt-Anchor" href="#35将本地代码提交到码云上"></a> 3.5将本地代码提交到码云上</h3><ul><li>查看文件，文件夹在工作区，暂存区的状态</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></tbody></table></figure><blockquote><p>此时提示你的是红色信息</p><p>它会提示你 <code>Changes not staged for commit:</code> 尚未提交</p></blockquote><ul><li>把所有的文件都添加到暂存区</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></tbody></table></figure><blockquote><p>把所有的文件都添加到暂存区之后继续使用 <code>git status</code> ，提示信息就变成绿色了</p></blockquote><ul><li>把暂存区的所有代码提交到本地仓库中</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"完成了登录功能"</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看当前所在分支</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当前分支是 login ，我们需要把 login 中的所有代码合并到 master 主分支中</p><p>注意：你需要先切换到 master 分支之后再合并 login</p></blockquote><ul><li>切换到 master 分支</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></tbody></table></figure><blockquote><p>出现以下提示说明成功</p><p>Switched to branch ‘master’<br>Your branch is up to date with ‘origin/master’.</p><ul><li>如果没有成功删除 <code>.gitignore</code> 暂存文件，重新从第一步开始</li></ul><p>再使用 <code>git branch</code> 可以看到已经切换到了 master 主分支</p></blockquote><p>我的 <code>.gitignore</code> 文件内容如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br></pre></td></tr></tbody></table></figure><ul><li>基于 master 合并 login 中的所有文件</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge login</span><br></pre></td></tr></tbody></table></figure><ul><li>把本地仓库推送到远程仓库</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></tbody></table></figure><blockquote><p>但是我们发现码云中只要 master 一个分支，并没有 login 分支</p><p>所有我们需要将 login 也推送到码云中</p></blockquote><ul><li>首先切换到 login 分支</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout login</span><br></pre></td></tr></tbody></table></figure><ul><li>把 login 分支推送到码云</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin login</span><br></pre></td></tr></tbody></table></figure><blockquote><p>-u 是指定推送 login 到码云</p></blockquote><h2 id="4主页布局"><a class="markdownIt-Anchor" href="#4主页布局"></a> 4.主页布局</h2><h3 id="41整体布局"><a class="markdownIt-Anchor" href="#41整体布局"></a> 4.1整体布局</h3><p>先上下划分，再左右划分</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-container class="home-container"&gt;</span><br><span class="line">    &lt;!-- 头部区域 --&gt;</span><br><span class="line">    &lt;el-header&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;img src="https://cdn.jsdelivr.net/gh/extheor/images/%E7%A0%81%E5%B0%8F%E4%BD%99.jpg" alt=""&gt;</span><br><span class="line">            &lt;span&gt;码小余后台管理&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-button type="info" @click="goBack"&gt;退出&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-header&gt;</span><br><span class="line">    &lt;!-- 页面主题区域 --&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">        &lt;!-- 侧边栏 --&gt;</span><br><span class="line">        &lt;el-aside width="200px"&gt;Aside&lt;/el-aside&gt;</span><br><span class="line">        &lt;!-- 右侧内容主体 --&gt;</span><br><span class="line">        &lt;el-main&gt;Main&lt;/el-main&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">&lt;/el-container&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="42左侧菜单布局"><a class="markdownIt-Anchor" href="#42左侧菜单布局"></a> 4.2左侧菜单布局</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-menu background-color="#333744" text-color="#fff" active-text-color="#ffd04b"&gt;</span><br><span class="line">    &lt;!-- 一级菜单 --&gt;</span><br><span class="line">    &lt;el-submenu index="1"&gt;</span><br><span class="line">        &lt;!-- 一级菜单的模板区域 --&gt;</span><br><span class="line">        &lt;template slot="title"&gt;</span><br><span class="line">&lt;!-- 图标 --&gt;</span><br><span class="line">&lt;i class="el-icon-location"&gt;&lt;/i&gt;</span><br><span class="line">&lt;!-- 文本 --&gt;</span><br><span class="line">&lt;span&gt;导航一&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;!-- 二级菜单 --&gt;</span><br><span class="line">        &lt;el-menu-item index="1-4-1"&gt;</span><br><span class="line">            &lt;!-- 图标 --&gt;</span><br><span class="line">            &lt;i class="el-icon-location"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;!-- 文本 --&gt;</span><br><span class="line">            &lt;span&gt;导航一&lt;/span&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/el-submenu&gt;  </span><br><span class="line">&lt;/el-menu&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@2ddd23c473e0dbd0b78b5d13ba9fefabdeeebce8/2020/11/05/a7264bebaf4a859f823b72d4508f41a4.png" alt="image-20201105222133588"></p><h3 id="43通过接口获取菜单数据"><a class="markdownIt-Anchor" href="#43通过接口获取菜单数据"></a> 4.3通过接口获取菜单数据</h3><p>通过 axios 请求拦截器添加 token，保证拥有获取数据的权限。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios请求拦截</span></span><br><span class="line">axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> {</span><br><span class="line">  <span class="comment">// console.log(config);</span></span><br><span class="line">  config.headers.Authorization = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="homevue-文件解读"><a class="markdownIt-Anchor" href="#homevue-文件解读"></a> Home.vue 文件解读</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-container class="home-container"&gt;</span><br><span class="line">        &lt;!-- 头部区域 --&gt;</span><br><span class="line">        &lt;el-header&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;img src="https://cdn.jsdelivr.net/gh/extheor/images/%E7%A0%81%E5%B0%8F%E4%BD%99.jpg" alt=""&gt;</span><br><span class="line">                &lt;span&gt;码小余后台管理&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">            &lt;el-button type="info" @click="goBack"&gt;退出&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-header&gt;</span><br><span class="line">        &lt;!-- 页面主体区域 --&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">            &lt;!-- 侧边栏 --&gt;</span><br><span class="line">            &lt;el-aside :width="isCollapse ? '64px' : '200px'"&gt;</span><br><span class="line">                &lt;div class="toggle-button" @click="toggleCollapse"&gt;&lt;span&gt;|||&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">                &lt;!-- </span><br><span class="line">                    :unique-opened - 表示是否只显示一个一级菜单</span><br><span class="line">                    :collapse - 表示是否折叠左侧菜单</span><br><span class="line">                    :collapse-transition - 是否开启默认折叠动画效果</span><br><span class="line">                    :router - 是否开启前端路由</span><br><span class="line">                    :default-active - 对当前点击的菜单高亮显示</span><br><span class="line">                --&gt;</span><br><span class="line">                &lt;el-menu background-color="#333744" text-color="#fff" active-text-color="#409EFF" :unique-opened="true" :collapse="isCollapse" :collapse-transition="false" :router="true" :default-active="activePath"&gt;</span><br><span class="line">                    &lt;!-- 一级菜单 --&gt;</span><br><span class="line">                    &lt;el-submenu :index="item.id + ''" v-for="item in menuList" :key="item.id"&gt;</span><br><span class="line">                        &lt;!-- 一级菜单的模板区域 --&gt;</span><br><span class="line">                        &lt;template slot="title"&gt;</span><br><span class="line">                            &lt;!-- 图标 --&gt;</span><br><span class="line">                            &lt;i :class="iconObj[item.id]"&gt;&lt;/i&gt;</span><br><span class="line">                            &lt;!-- 文本 --&gt;</span><br><span class="line">                            &lt;span&gt;{{ item.authName }}&lt;/span&gt;</span><br><span class="line">                        &lt;/template&gt;</span><br><span class="line">                        &lt;!-- 二级菜单 --&gt;</span><br><span class="line">                        &lt;el-menu-item :index="subItem.path" v-for="subItem in item.children" :key="subItem.id" @click="saveNavState(subItem.path)"&gt;</span><br><span class="line">                            &lt;!-- 图标 --&gt;</span><br><span class="line">                            &lt;i class="el-icon-menu"&gt;&lt;/i&gt;</span><br><span class="line">                            &lt;!-- 文本 --&gt;</span><br><span class="line">                            &lt;span&gt;{{ subItem.authName }}&lt;/span&gt;</span><br><span class="line">                        &lt;/el-menu-item&gt;</span><br><span class="line">                    &lt;/el-submenu&gt;  </span><br><span class="line">                &lt;/el-menu&gt;</span><br><span class="line">            &lt;/el-aside&gt;</span><br><span class="line">            &lt;!-- 右侧内容主体 --&gt;</span><br><span class="line">            &lt;el-main&gt;</span><br><span class="line">                &lt;!-- 路由占位符 --&gt;</span><br><span class="line">                &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">            &lt;/el-main&gt;</span><br><span class="line">        &lt;/el-container&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        data(){</span><br><span class="line">            return {</span><br><span class="line">                menuList: [],</span><br><span class="line">                iconObj: {</span><br><span class="line">                    "125": "iconfont icon-yonghuguanli",</span><br><span class="line">                    "103": "iconfont icon-quanxianguanli",</span><br><span class="line">                    "101": "iconfont icon-shangpinguanli",</span><br><span class="line">                    "102": "iconfont icon-dingdanguanli",</span><br><span class="line">                    "145": "iconfont icon-shujutongji"</span><br><span class="line">                },</span><br><span class="line">                // 是否折叠</span><br><span class="line">                isCollapse: false,</span><br><span class="line">                // 点击二级菜单高亮</span><br><span class="line">                activePath: ""</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        // 页面刷新的操作</span><br><span class="line">        created(){</span><br><span class="line">            this.getMenuList()</span><br><span class="line">            this.activePath = window.sessionStorage.getItem("activePath")</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">            goBack(){</span><br><span class="line">                window.sessionStorage.clear()</span><br><span class="line">                this.$router.push("/login")</span><br><span class="line">            },</span><br><span class="line">            // 获取所有的菜单</span><br><span class="line">            async getMenuList(){</span><br><span class="line">                const { data: res } = await this.$http.get("menus")</span><br><span class="line">                if(res.meta.status !== 200) return this.$message.error(res.meta.msg)</span><br><span class="line">                this.menuList = res.data</span><br><span class="line">                console.log(this.menuList);</span><br><span class="line">            },</span><br><span class="line">            toggleCollapse(){</span><br><span class="line">                this.isCollapse = !this.isCollapse</span><br><span class="line">            },</span><br><span class="line">            saveNavState(activePath){</span><br><span class="line">                window.sessionStorage.setItem("activePath", activePath)</span><br><span class="line">                this.activePath = activePath</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scope&gt;</span><br><span class="line">    .home-container {</span><br><span class="line">        height: 100%;</span><br><span class="line">    }</span><br><span class="line">    .el-header {</span><br><span class="line">        background-color: #373d41;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">        align-items: center;</span><br><span class="line">        padding: 0 !important;</span><br><span class="line"></span><br><span class="line">        &gt; div {</span><br><span class="line">            height: 100%;</span><br><span class="line">            color: #fff;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            // padding: 0;</span><br><span class="line"></span><br><span class="line">            img {</span><br><span class="line">                height: 100%;</span><br><span class="line">                border-radius: 50%;</span><br><span class="line">                margin-right: 10px;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    .el-aside {</span><br><span class="line">        background-color: #333744;</span><br><span class="line">        .el-menu {</span><br><span class="line">            border: 0;</span><br><span class="line">        }</span><br><span class="line">        .toggle-button {</span><br><span class="line">            color: #ffffff;</span><br><span class="line">            height: 50px;</span><br><span class="line">            &gt; span {</span><br><span class="line">                display: block;</span><br><span class="line">                position: absolute;</span><br><span class="line">                transform: rotate(-90deg) translateY(9px);</span><br><span class="line">                transform-origin: 150%;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            &amp;:hover {</span><br><span class="line">                background-color: #292C36;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    .el-main {</span><br><span class="line">        background-color: #eaedf1;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    .iconfont {</span><br><span class="line">        font-weight: 800;</span><br><span class="line">        margin-right: 10px;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="uservue-文件解读"><a class="markdownIt-Anchor" href="#uservue-文件解读"></a> User.vue 文件解读</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 面包屑导航 --&gt;</span><br><span class="line">        &lt;el-breadcrumb separator-class="el-icon-arrow-right"&gt;</span><br><span class="line">            &lt;el-breadcrumb-item :to="{ path: '/home' }"&gt;首页&lt;/el-breadcrumb-item&gt;</span><br><span class="line">            &lt;el-breadcrumb-item&gt;用户管理&lt;/el-breadcrumb-item&gt;</span><br><span class="line">            &lt;el-breadcrumb-item&gt;用户列表&lt;/el-breadcrumb-item&gt;</span><br><span class="line">        &lt;/el-breadcrumb&gt;</span><br><span class="line">        &lt;!-- Card卡片视图区域 --&gt;</span><br><span class="line">        &lt;el-card class="box-card"&gt;</span><br><span class="line">            &lt;!-- 搜索与添加区域 --&gt;</span><br><span class="line">            &lt;el-row :gutter="20"&gt;</span><br><span class="line">                &lt;el-col :span="8"&gt;</span><br><span class="line">                    &lt;!-- </span><br><span class="line">                        :clearable - 是否可清空</span><br><span class="line">                        @clear - 在点击由 clearable 属性生成的清空按钮时触发</span><br><span class="line">                     --&gt;</span><br><span class="line">                    &lt;el-input placeholder="请输入内容" v-model="queryInfo.query" :clearable="true" @clear="getUserList"&gt;</span><br><span class="line">                        &lt;el-button slot="append" icon="el-icon-search" @click="getUserList"&gt;&lt;/el-button&gt;</span><br><span class="line">                    &lt;/el-input&gt;</span><br><span class="line">                &lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span="4"&gt;</span><br><span class="line">                    &lt;el-button type="primary" @click="addDialogVisible = true"&gt;添加用户&lt;/el-button&gt;</span><br><span class="line">                &lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- </span><br><span class="line">                用户列表区域</span><br><span class="line">                border - 表格样式</span><br><span class="line">                stripe - 表格条纹</span><br><span class="line">             --&gt;</span><br><span class="line">            &lt;el-table :data="userList" border stripe&gt;</span><br><span class="line">                &lt;el-table-column type="index"&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop="username" label="姓名"&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop="email" label="邮箱"&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop="mobile" label="电话"&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop="role_name" label="角色"&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column label="状态"&gt;</span><br><span class="line">                    &lt;template v-slot="scope"&gt;</span><br><span class="line">                        &lt;!-- {{ scope.row }} --&gt;</span><br><span class="line">                        &lt;el-switch v-model="scope.row.mg_state" @change="userStateChanged(scope.row)"&gt;&lt;/el-switch&gt;</span><br><span class="line">                    &lt;/template&gt;</span><br><span class="line">                &lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column label="操作" width="180px"&gt;</span><br><span class="line">                    &lt;template&gt;</span><br><span class="line">                        &lt;!-- 修改按钮 --&gt;</span><br><span class="line">                        &lt;el-tooltip class="item" effect="dark" content="修改角色" placement="top" :enterable="false"&gt;</span><br><span class="line">                            &lt;el-button type="primary" icon="el-icon-edit" size="mini"&gt;&lt;/el-button&gt;</span><br><span class="line">                        &lt;/el-tooltip&gt;</span><br><span class="line">                        &lt;!-- 删除按钮 --&gt;</span><br><span class="line">                        &lt;el-tooltip class="item" effect="dark" content="删除角色" placement="top" :enterable="false"&gt;</span><br><span class="line">                            &lt;el-button type="danger" icon="el-icon-delete" size="mini"&gt;&lt;/el-button&gt;</span><br><span class="line">                        &lt;/el-tooltip&gt;</span><br><span class="line">                        &lt;!-- 分配角色按钮 --&gt;</span><br><span class="line">                        &lt;el-tooltip class="item" effect="dark" content="分配角色" placement="top" :enterable="false"&gt;</span><br><span class="line">                            &lt;el-button type="warning" icon="el-icon-setting" size="mini"&gt;&lt;/el-button&gt;</span><br><span class="line">                        &lt;/el-tooltip&gt;  </span><br><span class="line">                    &lt;/template&gt;</span><br><span class="line">                &lt;/el-table-column&gt;</span><br><span class="line">            &lt;/el-table&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- </span><br><span class="line">                分页区域</span><br><span class="line">                @size-change - 选择页数的列表发生切换，返回最新的一页显示多少条</span><br><span class="line">                @current-change - 页码值发生切换，返回最新的页数</span><br><span class="line">                :current-page - 当前显示的是第几页的数据</span><br><span class="line">                :page-sizes - 选择页数的下拉列表</span><br><span class="line">                :page-size - 每页显示多少条数据</span><br><span class="line">                layout - 需要展示的功能组件</span><br><span class="line">                :total - 总条数(目前有 bug ,只能写成固定的数字才能正常显示)</span><br><span class="line">             --&gt;</span><br><span class="line">            &lt;el-pagination</span><br><span class="line">                @size-change="handleSizeChange"</span><br><span class="line">                @current-change="handleCurrentChange"</span><br><span class="line">                :current-page="queryInfo.pagenum"</span><br><span class="line">                :page-sizes="[1, 2, 5, 10]"</span><br><span class="line">                :page-size="queryInfo.pagesize"</span><br><span class="line">                layout="total, sizes, prev, pager, next, jumper"</span><br><span class="line">                :total="4"&gt;</span><br><span class="line">            &lt;/el-pagination&gt;</span><br><span class="line">        &lt;/el-card&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- </span><br><span class="line">            添加用户Dialog对话框</span><br><span class="line">            :visible.sync - 控制添加对话框的显示与隐藏</span><br><span class="line">            --&gt;</span><br><span class="line">        &lt;el-dialog</span><br><span class="line">            title="提示"</span><br><span class="line">            :visible.sync="addDialogVisible"</span><br><span class="line">            width="50%"</span><br><span class="line">            @close="addDialogClosed"</span><br><span class="line">            &gt;</span><br><span class="line">            &lt;!-- 内容主体区域 --&gt;</span><br><span class="line">            &lt;el-form ref="addFormRef" :model="addForm" :rules="addFormRules" label-width="70px"&gt;</span><br><span class="line">                &lt;el-form-item label="用户名" prop="username"&gt;</span><br><span class="line">                    &lt;el-input v-model="addForm.username"&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">                &lt;el-form-item label="密码" prop="password"&gt;</span><br><span class="line">                    &lt;el-input type="password" v-model="addForm.password"&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">                &lt;el-form-item label="邮箱" prop="email"&gt;</span><br><span class="line">                    &lt;el-input type="email" v-model="addForm.email"&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">                &lt;el-form-item label="手机" prop="mobile"&gt;</span><br><span class="line">                    &lt;el-input v-model="addForm.mobile"&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">            &lt;/el-form&gt;</span><br><span class="line">            &lt;!-- 底部区域 --&gt;</span><br><span class="line">            &lt;span slot="footer" class="dialog-footer"&gt;</span><br><span class="line">                &lt;el-button @click="addDialogVisible = false"&gt;取 消&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button type="primary" @click="addDialogVisible = false"&gt;确 定&lt;/el-button&gt;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">        &lt;/el-dialog&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">    data(){</span><br><span class="line">        // 验证邮箱的规则</span><br><span class="line">        var checkEmail = (rule, value, cb) =&gt; {</span><br><span class="line">            // 验证邮箱的正则表达式</span><br><span class="line">            const regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-])+/</span><br><span class="line"></span><br><span class="line">            if(regEmail.test(value)){</span><br><span class="line">                // 合法的邮箱</span><br><span class="line">                return cb()</span><br><span class="line">            }</span><br><span class="line">            cb(new Error("请输入合法的邮箱"))</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        // 验证手机号的规则</span><br><span class="line">        var checkMobile = (rule, value, cb) =&gt; {</span><br><span class="line">            // 验证手机号的正则表达式</span><br><span class="line">            const regMobile = /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/</span><br><span class="line"></span><br><span class="line">            if(regMobile.test(value)){</span><br><span class="line">                // 合法的邮箱</span><br><span class="line">                return cb()</span><br><span class="line">            }</span><br><span class="line">            cb(new Error("请输入合法的手机号"))</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        return {</span><br><span class="line">            // 获取用户列表的参数对象</span><br><span class="line">            queryInfo: {</span><br><span class="line">                query: "",</span><br><span class="line">                // 当前的页数</span><br><span class="line">                pagenum: 1,</span><br><span class="line">                // 当前每页显示多少条数据</span><br><span class="line">                pagesize: 2</span><br><span class="line">            },</span><br><span class="line">            userList: [],</span><br><span class="line">            total: 0,</span><br><span class="line">            // 控制添加用户对话框的显示与隐藏</span><br><span class="line">            addDialogVisible: false,</span><br><span class="line">            // 添加用户的表单数据</span><br><span class="line">            addForm: {</span><br><span class="line">                username: "",</span><br><span class="line">                password: "",</span><br><span class="line">                email: "",</span><br><span class="line">                mobile: ""</span><br><span class="line">            },</span><br><span class="line">            // 添加表单的验证规则对象</span><br><span class="line">            addFormRules: {</span><br><span class="line">                username: [</span><br><span class="line">                    { required: true, message: '请输入用户名', trigger: 'blur' },</span><br><span class="line">                    { min: 3, max: 10, message: '长度在 3 到 10 个字符', trigger: 'blur' }</span><br><span class="line">                ],</span><br><span class="line">                password: [</span><br><span class="line">                    { required: true, message: '请输入密码', trigger: 'blur' },</span><br><span class="line">                    { min: 3, max: 15, message: '长度在 3 到 15 个字符', trigger: 'blur' }</span><br><span class="line">                ],</span><br><span class="line">                email: [</span><br><span class="line">                    { required: true, message: '请输入邮箱', trigger: 'blur' },</span><br><span class="line">                    { validator: checkEmail, trigger: 'blur' }</span><br><span class="line">                ],</span><br><span class="line">                mobile: [</span><br><span class="line">                    { required: true, message: '请输入手机号', trigger: 'blur' },</span><br><span class="line">                    { validator: checkMobile, trigger: 'blur' }</span><br><span class="line">                ]</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    created(){</span><br><span class="line">        this.getUserList()</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        async getUserList(){</span><br><span class="line">            const {data: res} = await this.$http.get("users", {params: this.queryInfo})</span><br><span class="line">            // console.log(res);</span><br><span class="line">            if(res.meta.status !== 200) return this.$message.error(res.meta.msg)</span><br><span class="line">            this.userList = res.data.users</span><br><span class="line">            this.total = res.total</span><br><span class="line">        },</span><br><span class="line">        // 监听 pagesize 改变的事件</span><br><span class="line">        handleSizeChange(newSize){</span><br><span class="line">            console.log(newSize);</span><br><span class="line">            this.queryInfo.pagesize = newSize</span><br><span class="line">            // pagesize 发生变化需要重新发起 axios 请求来展示数据</span><br><span class="line">            this.getUserList()</span><br><span class="line">        },</span><br><span class="line">        // 监听 页码值 改变的事件</span><br><span class="line">        handleCurrentChange(newPage){</span><br><span class="line">            console.log(newPage);</span><br><span class="line">            this.queryInfo.pagenum = newPage</span><br><span class="line">            this.getUserList()</span><br><span class="line">        },</span><br><span class="line">        async userStateChanged(userinfo){</span><br><span class="line">            // console.log("userinfo:",userinfo);</span><br><span class="line">            const {data: res} = await this.$http.put(`users/${userinfo.id}/state/${userinfo.mg_state}`)</span><br><span class="line">            console.log(res);</span><br><span class="line">            if(res.meta.status !== 200){</span><br><span class="line">                userinfo.mg_state = !userinfo.mg_state</span><br><span class="line">                return this.$message.error("更新用户状态失败！")</span><br><span class="line">            }</span><br><span class="line">            this.$message.success("更新用户状态成功！")</span><br><span class="line">        },</span><br><span class="line">        addDialogClosed(){</span><br><span class="line">            this.$refs.addFormRef.resetFields()</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scope&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="权限管理"><a class="markdownIt-Anchor" href="#权限管理"></a> 权限管理</h2><h3 id="权限管理业务分析"><a class="markdownIt-Anchor" href="#权限管理业务分析"></a> 权限管理业务分析</h3><p>通过权限管理模块控制不同的用户可以进行哪些操作，具体可以通过角色的方式进行控制，即每个用户分配一个特定的角色，角色包括不同的功能权限。</p><p>比如说：王者荣耀，你充钱的玩家有皮肤，不充钱的玩家没有皮肤…</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@a887dba8ce159d03e5cd8dc38e782653a1e34ab8/2020/11/07/bb034df527e82853a8b3236b1d33f565.png" alt="image-20201107102843577"></p><h3 id="如何实现一个好看的3级-ui-结构"><a class="markdownIt-Anchor" href="#如何实现一个好看的3级-ui-结构"></a> 如何实现一个好看的3级 UI 结构</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 角色列表区域 --&gt;</span><br><span class="line">&lt;el-table</span><br><span class="line">   :data="rolesList"</span><br><span class="line">   width="100%"</span><br><span class="line">   border</span><br><span class="line">   stripe</span><br><span class="line">   &gt;</span><br><span class="line">   &lt;!-- </span><br><span class="line">       展开列</span><br><span class="line">       type="expand" - 开启展开列功能</span><br><span class="line">   --&gt;</span><br><span class="line">   &lt;el-table-column type="expand"&gt;</span><br><span class="line">       &lt;template v-slot="scope"&gt;</span><br><span class="line">           &lt;el-row v-for="(item1, i1) in scope.row.children" :key="item1.id" :class="['bdbottom', i1 === 0 ? 'bdtop' : 'bdbottom', 'vcenter']"&gt;</span><br><span class="line">               &lt;!-- 渲染一级权限 --&gt;</span><br><span class="line">               &lt;el-col :span="5"&gt;</span><br><span class="line">                   &lt;el-tag&gt;{{ item1.authName }}&lt;/el-tag&gt;</span><br><span class="line">                   &lt;i class="el-icon-caret-right"&gt;&lt;/i&gt;</span><br><span class="line">               &lt;/el-col&gt;</span><br><span class="line">               &lt;!-- 渲染二级权限 --&gt;</span><br><span class="line">               &lt;el-col :span="19"&gt;</span><br><span class="line">                   &lt;el-row v-for="(item2, i2) in item1.children" :key="item2.id" :class="[i2 === 0 ? '' : 'bdtop', 'vcenter']"&gt;</span><br><span class="line">                       &lt;el-col :span="6"&gt;</span><br><span class="line">                           &lt;el-tag type="success"&gt;{{ item2.authName }}&lt;/el-tag&gt;</span><br><span class="line">                           &lt;i class="el-icon-caret-right"&gt;&lt;/i&gt;</span><br><span class="line">                       &lt;/el-col&gt;</span><br><span class="line">                       &lt;!-- 渲染三级权限 --&gt;</span><br><span class="line">                       &lt;el-col :span="18"&gt;</span><br><span class="line">                           &lt;el-tag type="warning" v-for="(item3, i3) in item2.children" :key="item3.id"&gt;{{ item3.authName }}&lt;/el-tag&gt;</span><br><span class="line">                       &lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">               &lt;/el-col&gt;</span><br><span class="line">           &lt;/el-row&gt;</span><br><span class="line">       &lt;/template&gt;</span><br><span class="line">   &lt;/el-table-column&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="../upload/image-20201107144025650.png" alt="image-20201107144025650"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack使用文档</title>
    <link href="https://extheor.club/posts/ebe408b3/index.html"/>
    <id>https://extheor.club/posts/ebe408b3/index.html</id>
    <published>2020-11-07T15:39:54.566Z</published>
    <updated>2020-11-07T15:52:21.822Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="webpack使用文档"><a class="markdownIt-Anchor" href="#webpack使用文档"></a> webpack使用文档</h1><h2 id="当前-web-开发面临的困境"><a class="markdownIt-Anchor" href="#当前-web-开发面临的困境"></a> 当前 Web 开发面临的困境</h2><ul><li>文件依赖关系错综复杂</li><li>静态资源请求效率低</li><li>模块化支持不友好</li><li>浏览器对高级 Javascript 特性兼容程度较低</li><li>etc…</li></ul><h2 id="webpack-概述"><a class="markdownIt-Anchor" href="#webpack-概述"></a> webpack 概述</h2><p><strong>webpack</strong>是一个流行的<strong>前端项目构建工具(打包工具)</strong>，可以解决当前web开发中所面临的困境。<br>webpack提供了<strong>友好的模块化支持</strong>，以及<strong>代码压缩混淆</strong>、<strong>处理js兼容问题</strong>、<strong>性能优化</strong>等强大的功能，从而让程序员把工作的重心放到具体的功能实现上，提高了开发效率和项目的可维护性。</p><p>目前绝大多数企业中的前端项目，都是基于webpack进行打包构建的。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@82a9429a32374d4775d7364af3dc674e50a16440/2020/11/04/5588dc39ae1443d18d673be1a869f80c.png" alt="image-20201104160313773"></p><h2 id="webpack的基本使用"><a class="markdownIt-Anchor" href="#webpack的基本使用"></a> webpack的基本使用</h2><h3 id="1创建列表隔行变色项目"><a class="markdownIt-Anchor" href="#1创建列表隔行变色项目"></a> 1.创建列表隔行变色项目</h3><p>① 新建项目空白目录，并运行 <code>npm init -y</code> 命令，初始化包管理配置文件 package.json</p><p>② 新建 <code>src</code> 源代码目录</p><p>③ 新建src -&gt; <code>index.html</code> 首页</p><p>④ 初始化首页基本的结构</p><p>⑤ 运行 <code>npm install jquery -s</code> 命令，安装 jQuery</p><p>⑥ 通过模块化的形式，实现列表隔行变色效果</p><h3 id="2在项目中安装和配置-webpack"><a class="markdownIt-Anchor" href="#2在项目中安装和配置-webpack"></a> 2.在项目中安装和配置 webpack</h3><p>① 运行 <code>npm install webpack webpack-cli -D</code> 命令，安装 webpack 相关的包</p><p>② 在项目根目录中，创建名为 <code>webpack.config.js</code> 的 webpack配置文件</p><p>③ 在 webpack 的配置文件中，初始化如下基本配置:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports ={</span><br><span class="line">mode : <span class="string">'development'</span> <span class="comment">// mode用来指定构建模式</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>④ 在 package.json 配置文件中的 scripts 节点下，新增dev脚本如下:</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts" : {</span><br><span class="line">"dev" : "webpack" // script节点下的脚本，可以通过 npm run 执行</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>⑤ 在终端中运行 <code>npm run dev</code> 命令，启动 webpack 进行项目打包。</p><h3 id="3配置打包的入口与出口"><a class="markdownIt-Anchor" href="#3配置打包的入口与出口"></a> 3.配置打包的入口与出口</h3><p>webpack 的4.x版本中默认约定:</p><ul><li><p>打包的入口文件为 src -&gt; index.js</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@02955c3a3fe2200668fd23dbcb34147f619d97d3/2020/11/04/09bc28c2d16b1f011358115aceefc2d4.png" alt="image-20201104185937743"></p></li><li><p>打包的输出文件为 dist -&gt; main.js</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f194aeb1c615d5451ff37a3e49df676aef37af7a/2020/11/04/73e6ebfb97f0fd77266976ea3f97e3f9.png" alt="image-20201104190005025"></p></li></ul><p>如果要修改打包的入口与出口，可以在webpack.config.js中新增如下配置信息:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span> ( <span class="string">'path'</span>) <span class="comment">//导入node.js 中专门操作路径的模块module.exports = {</span></span><br><span class="line">    entry: path.join(__dirname, <span class="string">'./src/index.js'</span>), <span class="comment">//打包入口文件的路径</span></span><br><span class="line">    output : {</span><br><span class="line">        path: path.join(__dirname, <span class="string">'./dist'</span>), <span class="comment">//输出文件的存放路径</span></span><br><span class="line">        filename: <span class="string">'bundle.js'</span> <span class="comment">//输出文件的名称</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4配置webpack的自动打包功能"><a class="markdownIt-Anchor" href="#4配置webpack的自动打包功能"></a> 4.配置webpack的自动打包功能</h3><p>① 运行 <code>npm install webpack-dev-server -D</code> 命令，安装支持项目自动打包的工具</p><p>② 修改package.json -&gt; scripts 中的dev命令如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span> : {</span><br><span class="line"><span class="string">"dev"</span> : <span class="string">"webpack-dev-server"</span> <span class="comment">// script 节点下的脚本，可以通过npm run 执行</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>③ 将src -&gt; index.html中，script脚本的引用路径，修改为"/bundle.js"</p><p>④ 运行 <code>npm run dev</code> 命令，重新进行打包</p><blockquote><p>到这一步你可能会报错，可能是 webpack 与 webpack-dev-server 的版本不兼容所导致的，你需要在 package.json 文件中配置以下信息</p></blockquote><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"webpack": "^5.3.2",</span><br><span class="line">"webpack-cli": "^3.3.12",</span><br><span class="line">"webpack-dev-server": "^3.11.0"</span><br></pre></td></tr></tbody></table></figure><blockquote><p>把你的 node_modules 和 package-lock.json 删除，然后运行 <code>npm install</code></p><p>即可正常运行 <code>npm run dev</code></p><p>解决思路：</p><p>可以去你的 node_modules 中找到 webpack-dev-server 目录</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@a4c83f12850a0f427cb104f39096203a548c622f/2020/11/04/95e2d1e21ae4e2d39960fec8a9a884c6.png" alt="image-20201104190233307"></p><p>搜索你的错误信息，找到如下信息，看看兼容 webpack-cli 的什么版本，就改成什么版本，重新安装即可</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@e2158edbcef1f4f40529aad197d3796e90c1171a/2020/11/04/2fe91ba2b0111512cc3cbd350bcfe8f3.png" alt="image-20201104190428662"></p></blockquote><p>⑤ 在浏览器中访问http:// localhost:8080地址，查看自动打包效果</p><h3 id="5配置html-webpack-plugin生成预览页面"><a class="markdownIt-Anchor" href="#5配置html-webpack-plugin生成预览页面"></a> 5.配置html-webpack-plugin生成预览页面</h3><p>① 运行 <code>npm install html-webpack-plugin -D</code> 命令，安装生成预览页面的插件</p><p>②修改 webpack.config.js 文件头部区域，添加如下配置信息:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入生成预览页面的插件，得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> HtmlwebpackPlugin = <span class="built_in">require</span> (<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> HtmlwebpackPlugin ({ <span class="comment">//创建插件的实例对象</span></span><br><span class="line">    template: <span class="string">'./src/index.html'</span>, <span class="comment">//指定要用到的模板文件</span></span><br><span class="line">filename: <span class="string">'index.html'</span> <span class="comment">//指定生成的文件的名称，该文件存在于内存中，在目录中不显示</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>③ 修改 webpack.config.js 文件中向外暴露的配置对象，新增如下配置节点:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">plugins: [ htmlPlugin ] <span class="comment">// plugins 数组是 webpack 打包期间会用到的一些插件列表</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6配置自动打包相关的参数"><a class="markdownIt-Anchor" href="#6配置自动打包相关的参数"></a> 6.配置自动打包相关的参数</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json中的配置</span></span><br><span class="line"><span class="comment">// --open 打包完成后自动打开浏览器页面</span></span><br><span class="line"><span class="comment">// --host 配置工P地址</span></span><br><span class="line"><span class="comment">// --port 配置端口</span></span><br><span class="line">"scripts" : {</span><br><span class="line">"dev" : "webpack-dev-server --open --host 127.0.0.1 --port 8888"</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><h2 id="webpack-中的加载器"><a class="markdownIt-Anchor" href="#webpack-中的加载器"></a> webpack 中的加载器</h2><h3 id="1通过-loader-打包非-js-模块"><a class="markdownIt-Anchor" href="#1通过-loader-打包非-js-模块"></a> 1.通过 loader 打包非 js 模块</h3><p>在实际开发过程中，webpack 默认只能打包处理以 .js 后缀名结尾的模块，其他<strong>非 .js 后缀名结尾</strong>的模块，webpack 默认处理不了，<strong>需要调用loader加载器才可以正常打包</strong>，否则会报错!</p><p>loader加载器可以协助webpack 打包处理特定的文件模块，比如:</p><ul><li>less-loader 可以打包处理 .less 相关的文件</li><li>sass-loader 可以打包处理 .scss 相关的文件</li><li>url-loader 可以打包处理 css 中与 url 路径相关的文件</li></ul><h3 id="2loader-的调用过程"><a class="markdownIt-Anchor" href="#2loader-的调用过程"></a> 2.loader 的调用过程</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@9598b788e2b4986f323bbb905048a57ca5854bc0/2020/11/04/ed79d6e5a7cc7ec07c162989e0e1fe3a.png" alt="image-20201104173916879"></p><h2 id="webpack-中加载器的基本使用"><a class="markdownIt-Anchor" href="#webpack-中加载器的基本使用"></a> webpack 中加载器的基本使用</h2><h3 id="1打包处理-css-文件"><a class="markdownIt-Anchor" href="#1打包处理-css-文件"></a> 1.打包处理 css 文件</h3><p>① 运行 <code>npm i style-loader css-loader -D</code> 命令，安装处理 css 文件的 loader</p><p>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有第三方文件模块的匹配规则</span></span><br><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">    { <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>] }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中, test 表示匹配的文件类型，use 表示对应要调用的 loader</p><h3 id="2打包处理-less-文件"><a class="markdownIt-Anchor" href="#2打包处理-less-文件"></a> 2.打包处理 less 文件</h3><p>① 运行 <code>npm i less-loader less -D</code> 命令</p><p>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有第三方文件模块的匹配规则</span></span><br><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">    { <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader/'</span>] }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3打包处理-scss-文件"><a class="markdownIt-Anchor" href="#3打包处理-scss-文件"></a> 3.打包处理 scss 文件</h3><p>① 运行 <code>npm i sass-loader node-sass -D</code> 命令</p><p>② 在 webpack.config.js 的module -&gt; rules 数组中，添加 loader 规则如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有第三方文件模块的匹配规则</span></span><br><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">        { <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,<span class="attr">use</span>: [<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'sass-loader'</span>] }</span><br><span class="line">    ] </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4配置postcss自动添加css的兼容前缀"><a class="markdownIt-Anchor" href="#4配置postcss自动添加css的兼容前缀"></a> 4.配置postCSS自动添加css的兼容前缀</h3><p>① 运行 <code>npm i postcss-loader autoprefixer -D</code> 命令</p><p>② 在项目根目录中创建 postcss 的配置文件 <code>postcss.config.js</code> ，并初始化如下配置;</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span> (<span class="string">'autoprefixer'</span>) <span class="comment">// 导入自动添加前缀的插件</span></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">plugins: [ autoprefixer ] <span class="comment">//挂载插件</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在 webpack.config.js 的module -&gt; rules 数组中，修改css的 loader规则如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">    { <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>,<span class="string">'postcss-loader'</span>] }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5打包样式表中的图片和字体文件"><a class="markdownIt-Anchor" href="#5打包样式表中的图片和字体文件"></a> 5.打包样式表中的图片和字体文件</h3><p>① 运行 <code>npm i url-loader file-loader -D</code> 命令</p><p>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加loader规则如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">    {</span><br><span class="line">            test: <span class="regexp">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span> ,</span><br><span class="line">        use: <span class="string">'url-loader?limit=16940'</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中 ? 之后的是 loader 的参数项。</p><p>limit 用来指定图片的大小，单位是字节（byte），只要小余 limit 大小的图片，才会被转为 base64 图片</p><h3 id="6打包处理js-文件中的高级语法"><a class="markdownIt-Anchor" href="#6打包处理js-文件中的高级语法"></a> 6.打包处理js 文件中的高级语法</h3><p>① 安装babel 转换器相关的包: <code>npm i babel-loader @babel/core @babel/runtime -D</code></p><p>② 安装babel语法插件相关的包: <code>npm i @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties -D</code></p><p>③ 在项目根目录中，创建 babel 配置文件 <code>babel.config.js</code> 并初始化基本配置如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    presets: [ <span class="string">"@babel/preset-env"</span> ],</span><br><span class="line">    plugins: [ <span class="string">'@babel/plugin-transform-runtime'</span>,<span class="string">'@babel/plugin-proposal-class-properties'</span> ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>④ 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// exclude 为排除项，表示 babel-loader不需要处理 node_modules 中的 js 文件</span></span><br><span class="line">{ <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: <span class="string">"babel-loader"</span>,<span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> }</span><br></pre></td></tr></tbody></table></figure><h2 id="vue单文件组件"><a class="markdownIt-Anchor" href="#vue单文件组件"></a> Vue单文件组件</h2><h3 id="传统组件的问题和解决方案"><a class="markdownIt-Anchor" href="#传统组件的问题和解决方案"></a> 传统组件的问题和解决方案</h3><h4 id="1问题"><a class="markdownIt-Anchor" href="#1问题"></a> 1.问题</h4><ol><li>全局定义的组件必须保证组件的名称不重复</li><li>字符串模板缺乏语法高亮，在HTML有多行的时候，需要用到丑陋的 \</li><li>不支持CSS意味着当HTML和JavaScript组件化时，CSS明显被遗漏</li><li>没有构建步骤限制，只能使用HTML和ES5 JavaScript,而不能使用预处理器(如:Babel)</li></ol><h4 id="2解决方案"><a class="markdownIt-Anchor" href="#2解决方案"></a> 2.解决方案</h4><p>针对传统组件的问题，Vue提供了一个解决方案 —— 使用 Vue 单文件组件。</p><h3 id="vue单文件组件的基本用法"><a class="markdownIt-Anchor" href="#vue单文件组件的基本用法"></a> Vue单文件组件的基本用法</h3><h4 id="单文件组件的组成结构"><a class="markdownIt-Anchor" href="#单文件组件的组成结构"></a> 单文件组件的组成结构</h4><ul><li>template组件的模板区域</li><li>script业务逻辑区域</li><li>style样式区域</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--这里用于定义vue组件的模板内容--&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 这里用于定义vue组件的业务逻辑</span><br><span class="line">    export default {</span><br><span class="line">    data(){ return {} },//私有数据</span><br><span class="line">        methods: {} // 处理函数</span><br><span class="line">    // ...其它业务逻辑</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* 这里用于定义组件的样式 */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="webpack-中配置-vue-组件的加载器"><a class="markdownIt-Anchor" href="#webpack-中配置-vue-组件的加载器"></a> webpack 中配置 vue 组件的加载器</h3><p>① 运行 <code>npm i vue-loader vue-template-compiler -D</code> 命令</p><p>② 在 webpack.config.js 配置文件中，添加 vue-loader 的配置项如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">rules: [</span><br><span class="line"><span class="comment">// ..．其它规则</span></span><br><span class="line">{ <span class="attr">test</span>: <span class="regexp">/\.vue$/</span> , <span class="attr">loader</span>: <span class="string">'vue-loader'</span>}</span><br><span class="line">        ]</span><br><span class="line">},</span><br><span class="line">plugins: [</span><br><span class="line"><span class="comment">// ..．其它插件</span></span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin() <span class="comment">//请确保引入这个插件!</span></span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="在-webpack-项目中使用-vue"><a class="markdownIt-Anchor" href="#在-webpack-项目中使用-vue"></a> 在 webpack 项目中使用 vue</h3><p>① 运行 <code>npm i vue -S</code> 安装 vue</p><p>② 在src -&gt; index.js 入口文件中，通过 <code>import Vue from 'vue'</code> 来导入 vue 构造函数</p><p>③ 创建 vue 的实例对象，并指定要控制的el区域</p><p>④ 通过 render 函数渲染 App 根组件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1．导入vue构造函数</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">// 2．导入App根组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/App.vue'</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line"><span class="comment">// 3．指定vm实例要控制的页面区域</span></span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line"><span class="comment">// 4．通过render函数,把指定的组件渲染到 el 区域中</span></span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件传值</title>
    <link href="https://extheor.club/posts/45fe8d36/index.html"/>
    <id>https://extheor.club/posts/45fe8d36/index.html</id>
    <published>2020-11-07T15:39:54.557Z</published>
    <updated>2020-11-07T15:52:21.814Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue组件传值"><a class="markdownIt-Anchor" href="#vue组件传值"></a> Vue组件传值</h1><h2 id="什么是组件"><a class="markdownIt-Anchor" href="#什么是组件"></a> 什么是组件？</h2><p>这里有一个 Vue 组件的示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line">Vue.component(<span class="string">'button-counter'</span>, {</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="count++"&gt;You clicked me {{ count }} times.&lt;/button&gt;'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 <code>button-counter</code>。我们可以在一个通过 <code>new Vue</code> 创建的 Vue 根实例中，把这个组件作为自定义元素来使用：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({ </span><br><span class="line">el: <span class="string">'#app'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>因为组件是可复用的 Vue 实例，所以它们与 <code>new Vue</code> 接收相同的选项，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p><h2 id="通过-prop-向子组件传递数据"><a class="markdownIt-Anchor" href="#通过-prop-向子组件传递数据"></a> 通过 Prop 向子组件传递数据</h2><p>Prop 是你可以在组件上注册的一些自定义 attribute。当一个值传递给一个 prop attribute 的时候，它就变成了那个组件实例的一个 property。为了给博文组件传递一个标题，我们可以用一个 <code>props</code> 选项将其包含在该组件可接受的 prop 列表中：</p><p>示例：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 把item的值赋值给product变量(props中的值),向子组件传递数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">product-com</span> <span class="attr">v-for</span>=<span class="string">"item,index in productList"</span> <span class="attr">:product</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">product-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"product-com"</span>,{</span><br><span class="line">    <span class="comment">// 通过 Prop 向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"product"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;产品名称：{{ product.title }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;h4&gt;产品描述：{{ product.brief }}&lt;/h4&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;产品价格：{{ product.prize }}&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        productList: [</span><br><span class="line">            {</span><br><span class="line">                title: <span class="string">"产品1"</span>,</span><br><span class="line">                brief: <span class="string">"产品描述1"</span>,</span><br><span class="line">                prize: <span class="string">"价格1"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                title: <span class="string">"产品2"</span>,</span><br><span class="line">                brief: <span class="string">"产品描述2"</span>,</span><br><span class="line">                prize: <span class="string">"价格2"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                title: <span class="string">"产品3"</span>,</span><br><span class="line">                brief: <span class="string">"产品描述3"</span>,</span><br><span class="line">                prize: <span class="string">"价格3"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                title: <span class="string">"产品4"</span>,</span><br><span class="line">                brief: <span class="string">"产品描述4"</span>,</span><br><span class="line">                prize: <span class="string">"价格4"</span></span><br><span class="line">            },</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>效果图：</p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/组件传值.png"><h2 id="通过-emit-向父组件传递数据"><a class="markdownIt-Anchor" href="#通过-emit-向父组件传递数据"></a> 通过 $emit 向父组件传递数据</h2><p>语法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$emit( eventName, […args] )</span><br></pre></td></tr></tbody></table></figure><ul><li><p>vm – Vue的实例化对象</p></li><li><p>$emit –  Vue实例化对象中的一个方法</p></li><li><p>eventName – 传递给父组件的事件名称</p></li><li><p>args – 需要传递给父组件的数据内容</p></li></ul><p>示例：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span> <span class="attr">v-for</span>=<span class="string">"item,index in schoolList"</span> @<span class="attr">cschool</span>=<span class="string">"changeEvent"</span> <span class="attr">:index</span>=<span class="string">"index"</span> <span class="attr">:schoolname</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>选中的学校是：{{ chooseSchool }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"school"</span>,{</span><br><span class="line">    <span class="comment">// 通过prop父组件向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"index"</span>,<span class="string">"schoolname"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;{{ index }}--学校名称：{{ schoolname }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;button @click="chooseEvent(schoolname)"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    methods: {</span><br><span class="line">        chooseEvent: <span class="function"><span class="keyword">function</span>(<span class="params">schoolname</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(schoolname);</span></span><br><span class="line">            <span class="comment">// 通过$emit给父组件传递数据</span></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"cschool"</span>,schoolname);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        schoolList: [<span class="string">"清华"</span>,<span class="string">"北大"</span>,<span class="string">"浙大"</span>],</span><br><span class="line">        chooseSchool: <span class="string">""</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        changeEvent: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(data);</span></span><br><span class="line">            <span class="keyword">this</span>.chooseSchool = data;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>子组件会先接收到父组件传递过来的数据，进行页面挂载(渲染)，当点击子组件中的button按钮时，会触发 <code>chooseEvent</code> 事件，这个事件会通过 <code>$emit</code> 实例方法把数据传递给父组件，父组件使用 <code>$emit</code> 自定义的事件名，所以当我点击子组件的button按钮时，父组件的 <code>$emit</code> 自定义的事件会触发，然后就可以直接更新数据了</p></blockquote><h3 id="组件传值的奇技淫巧"><a class="markdownIt-Anchor" href="#组件传值的奇技淫巧"></a> 组件传值的奇技淫巧</h3><blockquote><p>父元素方法传值给子元素</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">因为父元素的方法可以直接修改父元素的数据</span></span><br><span class="line"><span class="comment">所以将父元素的方法传递给子元素</span></span><br><span class="line"><span class="comment">然后由子元素进行调用，从而修改父元素的数据</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span> <span class="attr">v-for</span>=<span class="string">"item,index in schoolList"</span> <span class="attr">:action</span>=<span class="string">"changeEvent"</span> <span class="attr">:index</span>=<span class="string">"index"</span> <span class="attr">:schoolname</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>选中的学校是：{{ chooseSchool }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"school"</span>,{</span><br><span class="line">    <span class="comment">// 通过prop父组件向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"index"</span>,<span class="string">"schoolname"</span>,<span class="string">"action"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;{{ index }}--学校名称：{{ schoolname }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;button @click="chooseEvent(schoolname)"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    methods: {</span><br><span class="line">        chooseEvent: <span class="function"><span class="keyword">function</span>(<span class="params">schoolname</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(schoolname);</span></span><br><span class="line">            <span class="comment">// 这里只是使用父组件的changeEvent方法而已，并没有改变changeEvent方法的this指向</span></span><br><span class="line">            <span class="keyword">this</span>.action(schoolname)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        schoolList: [<span class="string">"清华"</span>,<span class="string">"北大"</span>,<span class="string">"浙大"</span>],</span><br><span class="line">        chooseSchool: <span class="string">""</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        changeEvent: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(data);</span></span><br><span class="line">            <span class="keyword">this</span>.chooseSchool = data;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>通过父元素数据直接修改</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"school"</span>,{</span><br><span class="line">    <span class="comment">// 通过prop父组件向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"index"</span>,<span class="string">"schoolname"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;{{ index }}--学校名称：{{ schoolname }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;button @click="chooseEvent(schoolname)"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    methods: {</span><br><span class="line">        chooseEvent: <span class="function"><span class="keyword">function</span>(<span class="params">schoolname</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(schoolname);</span></span><br><span class="line">            <span class="comment">// console.log(this);</span></span><br><span class="line">            <span class="comment">// 组件可以通过$parent属性找到父元素的Vue对象</span></span><br><span class="line">            <span class="keyword">this</span>.$parent.changeEvent(schoolname)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>子元素通过调用$parent的方法修改父元素的内容</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"school"</span>,{</span><br><span class="line">    <span class="comment">// 通过prop父组件向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"index"</span>,<span class="string">"schoolname"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;{{ index }}--学校名称：{{ schoolname }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click="$parent.changeEvent(schoolname)"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>子元素传值父元素</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"school"</span>,{</span><br><span class="line">    <span class="comment">// 通过prop父组件向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"index"</span>,<span class="string">"schoolname"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;{{ index }}--学校名称：{{ schoolname }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;button @click="$parent.chooseSchool = schoolname"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>$root</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"school"</span>,{</span><br><span class="line">    <span class="comment">// 通过prop父组件向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"index"</span>,<span class="string">"schoolname"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;{{ index }}--学校名称：{{ schoolname }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;button @click="$root.changeEvent(schoolname)"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue自定义指令</title>
    <link href="https://extheor.club/posts/8833154b/index.html"/>
    <id>https://extheor.club/posts/8833154b/index.html</id>
    <published>2020-11-07T15:39:54.543Z</published>
    <updated>2020-11-07T15:52:21.814Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue自定义指令"><a class="markdownIt-Anchor" href="#vue自定义指令"></a> Vue自定义指令</h1><h2 id="不带参数的自定义指令"><a class="markdownIt-Anchor" href="#不带参数的自定义指令"></a> 不带参数的自定义指令</h2><ul><li><p>为何需要自定义指令？</p><p>内置指令不满足需求</p></li><li><p>自定义指令的语法规则（获取元素焦点）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'focus'</span>, {</span><br><span class="line">    inserted: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>{</span><br><span class="line">        <span class="comment">// el 表示指令所绑定的元素</span></span><br><span class="line">        <span class="comment">// 获取元素的焦点</span></span><br><span class="line">        el.focus();</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {},</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：Vue实例对象必须写在自定义指令之后，否则会报错</p></blockquote></li><li><p>自定义指令用法</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-focus</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="带参数的自定义指令"><a class="markdownIt-Anchor" href="#带参数的自定义指令"></a> 带参数的自定义指令</h2><ul><li><p>改变元素背景颜色</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'color'</span>, {</span><br><span class="line">    inserted: <span class="function"><span class="keyword">function</span>(<span class="params">el, binding</span>)</span>{</span><br><span class="line">        <span class="comment">// el 表示指令所绑定的元素</span></span><br><span class="line">        <span class="comment">// console.log(binding.value.color);</span></span><br><span class="line">        el.style.backgroundColor = binding.value.color;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        msg: {</span><br><span class="line">            color: <span class="string">"yellow"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li><li><p>指令的用法</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-color</span>=<span class="string">"msg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="局部指令"><a class="markdownIt-Anchor" href="#局部指令"></a> 局部指令</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">directives: {</span><br><span class="line">    <span class="string">"color"</span>: {</span><br><span class="line">        inserted: <span class="function"><span class="keyword">function</span>(<span class="params">el, binding</span>)</span>{</span><br><span class="line">            <span class="comment">// el 表示指令所绑定的元素</span></span><br><span class="line">            <span class="comment">// console.log(binding.value.color);</span></span><br><span class="line">            el.style.backgroundColor = binding.value.color;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue在组件上使用v-model</title>
    <link href="https://extheor.club/posts/585ba415/index.html"/>
    <id>https://extheor.club/posts/585ba415/index.html</id>
    <published>2020-11-07T15:39:54.530Z</published>
    <updated>2020-11-07T15:52:21.805Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue在组件上使用v-model"><a class="markdownIt-Anchor" href="#vue在组件上使用v-model"></a> Vue在组件上使用v-model</h1><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。记住：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>等价于：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">input</span>=<span class="string">"searchText = $event.target.value"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当用在组件上时，<code>v-model</code> 则会这样：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">input</span>=<span class="string">"searchText = $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>上面用 <code>$event</code> 接收子组件用 <code>$emit()</code> 向上传递过来的数据</p></blockquote><p>为了让它正常工作，这个组件内的 <code>&lt;input&gt;</code> 必须：</p><ul><li>将其 <code>value</code> attribute 绑定到一个名叫 <code>value</code> 的 prop 上</li><li>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>input</code> 事件抛出</li></ul><p>写成代码之后是这样的：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'custom-input'</span>, {</span><br><span class="line">  props: [<span class="string">'value'</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      :value="value"</span></span><br><span class="line"><span class="string">      @input="$emit('input', $event.target.value)"</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>现在 <code>v-model</code> 就应该可以在这个组件上完美地工作起来了：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>以下是更简化代码，我发现不用写 :value这个属性也能正常的实现数据的双向绑定</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input-com</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">input-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ username }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"input-com"</span>,{</span><br><span class="line">    <span class="comment">// 当用户输入数据的时候把value值传递给父组件</span></span><br><span class="line">    template: <span class="string">`&lt;input @input="$emit('input',$event.target.value)" /&gt;`</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        username: <span class="string">""</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue -- 指令【学习笔记】（持续更新）</title>
    <link href="https://extheor.club/posts/54fbed4a/index.html"/>
    <id>https://extheor.club/posts/54fbed4a/index.html</id>
    <published>2020-11-07T15:39:54.483Z</published>
    <updated>2020-11-07T15:52:21.806Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h2 id="vue-指令学习笔记持续更新"><a class="markdownIt-Anchor" href="#vue-指令学习笔记持续更新"></a> Vue – 指令【学习笔记】（持续更新）</h2><h2 id="v-show"><a class="markdownIt-Anchor" href="#v-show"></a> v-show</h2><blockquote><p>注意，<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持  <code>v-else</code>。</p><p>带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS property <code>display</code>。</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"shouye"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"dongman"</span>&gt;</span>动漫<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"yinyue"</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        shouye: <span class="literal">true</span>,</span><br><span class="line">        dongman: <span class="literal">false</span>,</span><br><span class="line">        yinyue: <span class="literal">false</span>,</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>上面的执行结果只会展示首页</p></blockquote><h2 id="v-onclick-简写-click"><a class="markdownIt-Anchor" href="#v-onclick-简写-click"></a> v-on:click 简写 @click</h2><blockquote><p>用法一：直接在双引号中写函数名</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"shouye"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"dongman"</span>&gt;</span>动漫<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"yinyue"</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意函数名不能和变量名重名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"shouYe"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"dongMan"</span>&gt;</span>动漫<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"yinYue"</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        shouye: <span class="literal">true</span>,</span><br><span class="line">        dongman: <span class="literal">false</span>,</span><br><span class="line">        yinyue: <span class="literal">false</span>,</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        shouYe: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(e);</span></span><br><span class="line">            <span class="keyword">this</span>.shouye = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.dongman = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.yinyue = <span class="literal">false</span>;</span><br><span class="line">        },</span><br><span class="line">        dongMan: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">            <span class="keyword">this</span>.dongman = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.shouye = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.yinyue = <span class="literal">false</span>;</span><br><span class="line">        },</span><br><span class="line">        yinYue: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">            <span class="keyword">this</span>.yinyue = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.shouye = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.dongman = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>按钮点击页面跳转</p></blockquote><blockquote><p>用法二：在双引号中写表达式</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>点击次数：{{ count }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以使用表达式完成事件操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"count++"</span>&gt;</span>点击加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>用法三：事件传参</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"start,index in starts"</span> @<span class="attr">click</span>=<span class="string">"clickEvent(index,start,$event)"</span>&gt;</span>索引值：{{ index }}---内容：{{ start }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        starts: [<span class="string">"蔡徐坤"</span>,<span class="string">"范冰冰"</span>,<span class="string">"李晨"</span>]</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        clickEvent: <span class="function"><span class="keyword">function</span>(<span class="params">index,start,event</span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(index,start);</span><br><span class="line">            <span class="built_in">console</span>.log(event);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：要想既在函数中传参又想要得到 event, 则可以在传参时使用 <code>$evnet</code></p></blockquote><blockquote><p>用法四：事件修饰符</p></blockquote><ul><li>stop修饰符，阻止冒泡事件向上传递</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- stop修饰符，阻止冒泡事件向上传递 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btnParent"</span> @<span class="attr">click</span>=<span class="string">"clickParent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"clickEvent"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        clickEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"clickEvent"</span>);</span><br><span class="line">        },</span><br><span class="line">        clickParent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"clickParent"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>clickEvent</p></blockquote><ul><li>prevent修饰符，阻止默认事件</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 阻止默认事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> @<span class="attr">click.prevent</span>=<span class="string">"searchWeather"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"weather"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ tmp }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>{{ brief }}<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">city: <span class="string">"北京"</span>,</span><br><span class="line">        tmp: <span class="string">""</span>,</span><br><span class="line">        brief: <span class="string">""</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        searchWeather: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"查询天气"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.city);</span><br><span class="line">            <span class="keyword">let</span> httpUrl = <span class="string">`https://free-api.heweather.net/s6/weather/now?location=<span class="subst">${<span class="keyword">this</span>.city}</span>&amp;key=3c497450d8e44c5280421ceaba1db581`</span></span><br><span class="line">            <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(httpUrl)</span><br><span class="line">            <span class="keyword">let</span> result = <span class="keyword">await</span> res.json();</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">            <span class="keyword">let</span> now = result.HeWeather6[<span class="number">0</span>].now;</span><br><span class="line">            <span class="keyword">this</span>.tmp = now.tmp;</span><br><span class="line">            <span class="keyword">this</span>.brief = now.cond_txt;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li>once修饰符，只触发一次</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click.once</span>=<span class="string">"onceEvent"</span>&gt;</span>只触发一次的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">onceEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"只触发一次"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>只触发一次</p></blockquote><ul><li>keydown修饰符，指定按键</li></ul><blockquote><p>注意：表单默认为回车提交</p></blockquote><p>keydown下有以下按键</p><p><code>.enter</code></p><p><code>.tab</code></p><p><code>.delete</code> (捕获"删除"和"退格"键)</p><p><code>.esc</code></p><p><code>.space</code></p><p><code>.up</code></p><p><code>.down</code></p><p><code>.left</code></p><p><code>.right</code></p><p>还可以配置按键的自定义修饰符</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes.f1 = 112</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> @keydown.enter=<span class="string">"searchWeather"</span> name=<span class="string">"username"</span> v-model=<span class="string">"city"</span> id=<span class="string">""</span> value=<span class="string">""</span> /&gt;</span><br><span class="line">        &lt;!-- 阻止默认事件 --&gt;</span><br><span class="line">        &lt;input @click.prevent=<span class="string">"searchWeather"</span> type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">            &lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        city: <span class="string">"北京"</span>,</span><br><span class="line">        tmp: <span class="string">""</span>,</span><br><span class="line">        brief: <span class="string">""</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        searchWeather: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"查询天气"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.city);</span><br><span class="line">            <span class="keyword">let</span> httpUrl = <span class="string">`https://free-api.heweather.net/s6/weather/now?location=<span class="subst">${<span class="keyword">this</span>.city}</span>&amp;key=3c497450d8e44c5280421ceaba1db581`</span></span><br><span class="line">            <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(httpUrl)</span><br><span class="line">            <span class="keyword">let</span> result = <span class="keyword">await</span> res.json();</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">            <span class="keyword">let</span> now = result.HeWeather6[<span class="number">0</span>].now;</span><br><span class="line">            <span class="keyword">this</span>.tmp = now.tmp;</span><br><span class="line">            <span class="keyword">this</span>.brief = now.cond_txt;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li>exact修饰符，精确触发</li></ul><blockquote><p>只有在只按ctrl后再点击触发，如果多按了其他键再点击则不会触发</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">"ctrlEvent"</span>&gt;</span>按住ctrl点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctrlEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"按住ctrl点击"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="v-for"><a class="markdownIt-Anchor" href="#v-for"></a> v-for</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>循环列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"student in students"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>姓名：{{ student.studentName }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：{{ student.age }}---学校：{{ student.school }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>条件+循环渲染（将偶数年龄的学生渲染出来）,先循环再判断<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"student,index in students"</span> <span class="attr">v-if</span>=<span class="string">"student.age%2==0"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>索引：{{ index }}---姓名：{{ student.studentName }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：{{ student.age }}---学校：{{ student.school }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        students: [</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小明"</span>,</span><br><span class="line">                age: <span class="number">16</span>,</span><br><span class="line">                school: <span class="string">"清华"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小黑"</span>,</span><br><span class="line">                age: <span class="number">17</span>,</span><br><span class="line">                school: <span class="string">"北大"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小红"</span>,</span><br><span class="line">                age: <span class="number">18</span>,</span><br><span class="line">                school: <span class="string">"浙大"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小樱"</span>,</span><br><span class="line">                age: <span class="number">19</span>,</span><br><span class="line">                school: <span class="string">"河软"</span></span><br><span class="line">            },</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="computed计算属性"><a class="markdownIt-Anchor" href="#computed计算属性"></a> computed（计算属性）</h2><blockquote><p>会将计算结果进行缓存，只要this.firstname和this.lastname变量的内容不改变，就不会重新计算</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 计算属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ fullname }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 逆序显示1个单词 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ reverseWord }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>循环偶数年龄<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"student in oddStudents"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>{{ student.studentName }}<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>{{ student.age }}<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        firstname: <span class="string">"张"</span>,</span><br><span class="line">        lastname: <span class="string">"三"</span>,</span><br><span class="line">        word: <span class="string">"music"</span>,</span><br><span class="line">        students: [</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小明"</span>,</span><br><span class="line">                age: <span class="number">16</span>,</span><br><span class="line">                school: <span class="string">"清华"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小黑"</span>,</span><br><span class="line">                age: <span class="number">17</span>,</span><br><span class="line">                school: <span class="string">"北大"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小红"</span>,</span><br><span class="line">                age: <span class="number">18</span>,</span><br><span class="line">                school: <span class="string">"浙大"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小樱"</span>,</span><br><span class="line">                age: <span class="number">19</span>,</span><br><span class="line">                school: <span class="string">"河软"</span></span><br><span class="line">            },</span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    computed: {</span><br><span class="line">        fullname: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="comment">// 会将计算结果进行缓存，只要this.firstname和lastname变量的内容不改变，就不会重新计算</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="keyword">this</span>.lastname</span><br><span class="line">        },</span><br><span class="line">        reverseWord: {</span><br><span class="line">            <span class="keyword">get</span>: function(){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.word.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span><br><span class="line">            },</span><br><span class="line">            <span class="keyword">set</span>: function(val){</span><br><span class="line">                <span class="keyword">this</span>.word = val.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        oddStudents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">let</span> results = <span class="keyword">this</span>.students.filter(<span class="function">(<span class="params">student,index</span>)=&gt;</span>{</span><br><span class="line">                <span class="keyword">return</span> student.age%<span class="number">2</span> == <span class="number">0</span></span><br><span class="line">            })</span><br><span class="line">            <span class="keyword">return</span> results</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="v-once"><a class="markdownIt-Anchor" href="#v-once"></a> v-once</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一次性插值，不再修改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-once</span>&gt;</span>{{ msg }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        msg: <span class="string">"hello vue"</span>,</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">app.msg = <span class="string">"hello 前端"</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>结果还是 hello vue</p></blockquote><h2 id="v-html"><a class="markdownIt-Anchor" href="#v-html"></a> v-html</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插入HTML内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">"htmlText"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        htmlText: <span class="string">"&lt;span&gt;hello&lt;/span&gt;"</span>,</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>hello</p></blockquote><h2 id="v-bindid-简写-id"><a class="markdownIt-Anchor" href="#v-bindid-简写-id"></a> v-bind:id 简写 :id</h2><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#login</span>{</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#register</span>{</span><br><span class="line">    <span class="attribute">color</span>: aqua;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 修改属性内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">"idname"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        idname: <span class="string">"login"</span>,</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>设置 idname 的值就是设置 div里的 id 的值</p><p>例如，设置 idname: “login”，其登录的颜色就会去CSS样式中寻找 #login 的属性，然后把字体渲染为红色，如果改为 “register”，则会把字体颜色修改为aqua</p></blockquote><h2 id="模板语言的表达式应用"><a class="markdownIt-Anchor" href="#模板语言的表达式应用"></a> 模板语言的表达式应用</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模板语言的表达式应用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        {{ firstname + lastname }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        firstname: <span class="string">"张"</span>,</span><br><span class="line">        lastname: <span class="string">"三"</span>,</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>张三</p></blockquote><h2 id="watch侦听器"><a class="markdownIt-Anchor" href="#watch侦听器"></a> watch（侦听器）</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    {{ msg }}</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in arr"</span>&gt;</span>{{ item }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        msg: <span class="string">"hello Vue"</span>,</span><br><span class="line">        arr: [<span class="string">"小明"</span>,<span class="string">"小红"</span>,<span class="string">"小黑"</span>]</span><br><span class="line">    },</span><br><span class="line">    watch: {</span><br><span class="line">        <span class="comment">// val为修改的值</span></span><br><span class="line">        msg: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"监听事件------msg"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(val);</span><br><span class="line">        },</span><br><span class="line">        arr: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"监听事件------arr"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(val);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改 data 中属性的值会触发 watch，例如</p><p>app.msg = “hello”，watch会去监听msg</p></blockquote><h1 id="v-bindclass-简写-class"><a class="markdownIt-Anchor" href="#v-bindclass-简写-class"></a> v-bind:class 简写 :class</h1><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: skyblue;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.active</span> {</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.col-xs-12</span> {</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.red-bg</span> {</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#FF0000</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.abc</span> {</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过对象的方式决定是否存在某个类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">:class</span>=<span class="string">"{active:isTrue}"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 直接放置对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">:class</span>=<span class="string">"styleObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 放置数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">:class</span>=<span class="string">"styleArr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 放置字符串 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">:class</span>=<span class="string">"styleStr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组和对象混合使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">:class</span>=<span class="string">"styleArrObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        isTrue: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 放置对象</span></span><br><span class="line">        styleObj: {</span><br><span class="line">            <span class="string">"active"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"laochen"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"col-lg-6"</span>: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// 可直接用数组的方式进行添加和删除</span></span><br><span class="line">        styleArr: [</span><br><span class="line">            <span class="string">"col-xs-12"</span>,</span><br><span class="line">            <span class="string">"red-bg"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 放置字符串</span></span><br><span class="line">        styleStr: <span class="string">"page abc def"</span>,</span><br><span class="line">        <span class="comment">// 数组和对象混合使用</span></span><br><span class="line">        styleArrObj: [</span><br><span class="line">            <span class="string">"abcd"</span>,</span><br><span class="line">            {</span><br><span class="line">                active: <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="v-bindstyle-简写-style"><a class="markdownIt-Anchor" href="#v-bindstyle-简写-style"></a> v-bind:style 简写 :style</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background: skyblue;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CSS内联样式变量拼接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background: skyblue;"</span> <span class="attr">:style</span>=<span class="string">"{ border: borderWidth+'px solid '+borderColor }"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CSS内联样式放置对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styleObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CSS数组的方式拼接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styleArr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        borderWidth: <span class="number">50</span>,</span><br><span class="line">        borderColor: <span class="string">"red"</span>,</span><br><span class="line">        styleObj: {</span><br><span class="line">            width: <span class="string">"200px"</span>,</span><br><span class="line">            height: <span class="string">"300px"</span>,</span><br><span class="line">            padding: <span class="string">"50px"</span>,</span><br><span class="line">            <span class="string">"background-color"</span>: <span class="string">"skyblue"</span></span><br><span class="line">        },</span><br><span class="line">        styleArr: [</span><br><span class="line">            {</span><br><span class="line">                width: <span class="string">"200px"</span>,</span><br><span class="line">                height: <span class="string">"300px"</span>,</span><br><span class="line">                padding: <span class="string">"50px"</span>,</span><br><span class="line">                <span class="string">"background-color"</span>: <span class="string">"skyblue"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                border: <span class="string">"30px solid yellow"</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>例如：CSS内联样式变量拼接 — 会将第二个div的边框设置为50px的红色边框</p></blockquote><h2 id="v-model"><a class="markdownIt-Anchor" href="#v-model"></a> v-model</h2><blockquote><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code> <code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它<strong>负责监听用户的输入事件以更新数据</strong>，并对一些极端场景进行一些特殊处理。</p></blockquote><ul><li>单行文本输入框</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ username }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        username: <span class="string">"张三"</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>v-model把 value值和username变量的值绑定在一起，实现了修改value的值就会自动修改username变量的值，这就是<strong>数据的双向绑定</strong></p></blockquote><ul><li>多行文本输入框</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        username: <span class="string">"张三"</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li>复选框：选择喜欢的水果</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"fruit in fruits"</span>&gt;</span></span><br><span class="line">    {{ fruit }}</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"checkFruits"</span> <span class="attr">:value</span>=<span class="string">"fruit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{ checkFruits }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        fruits: [<span class="string">"苹果"</span>,<span class="string">"香蕉"</span>,<span class="string">"雪梨"</span>,<span class="string">"葡萄"</span>],</span><br><span class="line">        checkFruits: []</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当选择内容时，会依次添加到 v-model绑定的checkFruits数组中去</p></blockquote><ul><li>单选框：选择你最喜欢的水果</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"fruit in fruits"</span>&gt;</span></span><br><span class="line">    {{ fruit }}</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"zfruit"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"radioFruit"</span> <span class="attr">:value</span>=<span class="string">"fruit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{ radioFruit }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        fruits: [<span class="string">"苹果"</span>,<span class="string">"香蕉"</span>,<span class="string">"雪梨"</span>,<span class="string">"葡萄"</span>],</span><br><span class="line">        radioFruit: <span class="string">""</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当选择内容时，会将 你最后一次点击的内容添加到radioFruit字符串中去</p></blockquote><ul><li>选项框：选择你居住的城市</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"chooseCity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"city in citys"</span> <span class="attr">:value</span>=<span class="string">"city"</span>&gt;</span>{{ city }}<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>{{ chooseCity }}<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        citys: [<span class="string">"北京"</span>,<span class="string">"上海"</span>,<span class="string">"深圳"</span>,<span class="string">"广州"</span>],</span><br><span class="line">        chooseCity: <span class="string">""</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>把选中的值和chooseCity空字符串绑定在一起，实现数据的双向绑定</p></blockquote><ul><li>选项框：选择你喜欢的城市</li></ul><blockquote><p>multiple属性实现选项框多选</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"moreCity"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"city in citys"</span> <span class="attr">:value</span>=<span class="string">"city"</span>&gt;</span>{{ city }}<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>{{ moreCity }}<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        citys: [<span class="string">"北京"</span>,<span class="string">"上海"</span>,<span class="string">"深圳"</span>,<span class="string">"广州"</span>],</span><br><span class="line">        moreCity: []</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>按住CTRL键，选择你喜欢的城市，把value的值和moreCity数组的值绑定到一起，实现数据的双向绑定</p></blockquote><ul><li>将字符串变为数字获取</li></ul><p><code>.number</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        age: <span class="number">16</span></span><br><span class="line">    },</span><br><span class="line">    watch: {</span><br><span class="line">        <span class="comment">// 监听age变量的值的变化</span></span><br><span class="line">        age: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(val);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>加上.number后，value的值只能为数字时才能与 age数据双向绑定</p></blockquote><ul><li>lazy修饰符</li></ul><blockquote><p>在输入文字结束后，输入框的值才会与数据进行同步，节省性能</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model.lazy</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        username: <span class="string">"张三"</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li>trim修饰符</li></ul><blockquote><p>去除输入内容两边的空格</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model.lazy.trim</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        username: <span class="string">"张三"</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="v-bindis-简写-is"><a class="markdownIt-Anchor" href="#v-bindis-简写-is"></a> v-bind:is 简写 :is</h2><blockquote><p>:is 里面写需要显示的动态组件</p></blockquote><p>例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(1)"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(2)"</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(3)"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(4)"</span>&gt;</span>个人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> com1 = Vue.component(<span class="string">"index-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;首页内容&lt;/h1&gt;"</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">let</span> com2 = Vue.component(<span class="string">"index-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;列表内容&lt;/h1&gt;"</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">let</span> com3 = Vue.component(<span class="string">"index-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;新闻内容&lt;/h1&gt;"</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">let</span> com4 = Vue.component(<span class="string">"index-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;个人内容&lt;/h1&gt;"</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        com: com1</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        chooseContent: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(id);</span></span><br><span class="line">            <span class="comment">// console.log(this);</span></span><br><span class="line">            <span class="comment">// 通过获取id,选择注册好的组件</span></span><br><span class="line">            <span class="keyword">this</span>.com = <span class="keyword">this</span>.$options.components[<span class="string">"com"</span>+id]</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    components: {</span><br><span class="line">        com1,com2,com3,com4</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当com的值为 com1 时，会显示首页的内容</p><p>当com的值为 com2 时，会显示列表的内容</p><p>当com的值为 com3 时，会显示新闻的内容</p><p>当com的值为 com4 时，会显示个人的内容</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue图书管理案例</title>
    <link href="https://extheor.club/posts/7a228db4/index.html"/>
    <id>https://extheor.club/posts/7a228db4/index.html</id>
    <published>2020-11-07T15:39:54.464Z</published>
    <updated>2020-11-07T15:52:21.803Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue图书管理案例"><a class="markdownIt-Anchor" href="#vue图书管理案例"></a> Vue图书管理案例</h1><h2 id="1图书列表"><a class="markdownIt-Anchor" href="#1图书列表"></a> 1.图书列表</h2><ul><li>实现静态列表效果</li><li>基于数据实现模板效果</li><li>处理每行的操作按钮</li></ul><table><thead><tr><th>编号</th><th>名称</th><th>时间</th><th>操作</th></tr></thead><tbody><tr><td>1</td><td>三国演义</td><td>2020-11-02</td><td>修改 | 删除</td></tr><tr><td>2</td><td>水浒传</td><td>2020-11-02</td><td>修改 | 删除</td></tr><tr><td>3</td><td>红楼梦</td><td>2020-11-02</td><td>修改 | 删除</td></tr><tr><td>4</td><td>西游记</td><td>2020-11-02</td><td>修改 | 删除</td></tr></tbody></table><blockquote><p>代码实现</p><p>@click.prevent - 禁止 a 标签的默认事件</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'item in books'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>{{item.id}}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>{{item.name}}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>{{item.date}}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        books: [</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">1</span>,</span><br><span class="line">                name: <span class="string">"三国演义"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">2</span>,</span><br><span class="line">                name: <span class="string">"水浒传"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">3</span>,</span><br><span class="line">                name: <span class="string">"红楼梦"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">4</span>,</span><br><span class="line">                name: <span class="string">"西游记"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f14344e46ca05545ecc3f727b83160e3f5be4053/2020/11/02/9f97a98ec2b028e7a01d3eabb19d05e0.png" alt="image-20201102145336967"></p><h2 id="2添加图书"><a class="markdownIt-Anchor" href="#2添加图书"></a> 2.添加图书</h2><ul><li>实现表单的静态效果</li><li>添加图书表单域数据绑定</li><li>添加按钮事件绑定</li><li>实现添加业务逻辑</li></ul><blockquote><p>代码实现</p><p>v-model 双向绑定 输入框对应的 value 值</p><p>定义一个 handle 点击事件（点击提交，把填写的编号和名称添加到列表中）</p><p>在 Vue 实例对象的data中定义 id 和 name 属性</p><p>在 methods 中实现 handle 事件</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        编号：</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">v-model</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">        名称：</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handle"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        id: <span class="string">""</span>,</span><br><span class="line">        name: <span class="string">""</span>,</span><br><span class="line">        books: [</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">1</span>,</span><br><span class="line">                name: <span class="string">"三国演义"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">2</span>,</span><br><span class="line">                name: <span class="string">"水浒传"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">3</span>,</span><br><span class="line">                name: <span class="string">"红楼梦"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">4</span>,</span><br><span class="line">                name: <span class="string">"西游记"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        handle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">var</span> book = {}</span><br><span class="line">            book.id = <span class="keyword">this</span>.id</span><br><span class="line">            book.name = <span class="keyword">this</span>.name</span><br><span class="line">            book.date = <span class="string">""</span></span><br><span class="line">            <span class="keyword">this</span>.books.push(book)</span><br><span class="line">            <span class="keyword">this</span>.id = <span class="string">""</span></span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">""</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@c7f08e265afb23f125d320d3c6fbdf4d95b02022/2020/11/02/10856a351cf60fc2d544f75865148d77.png" alt=""></p><h2 id="3修改图书"><a class="markdownIt-Anchor" href="#3修改图书"></a> 3.修改图书</h2><ul><li>修改信息填充到表单</li><li>修改后重新提交表单</li><li>重用添加和修改的方法</li></ul><blockquote><p>代码实现</p><p>为修改按钮添加 toEdit 事件，把 tr 的 id 传入</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"toEdit(item.id)"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">toEdit: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">    <span class="comment">// 先通过 id 找到对应的这一行数据</span></span><br><span class="line">    <span class="keyword">var</span> book = <span class="keyword">this</span>.books.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> item.id === id</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// console.log(book);</span></span><br><span class="line">    <span class="keyword">this</span>.id = book[<span class="number">0</span>].id</span><br><span class="line">    <span class="keyword">this</span>.name = book[<span class="number">0</span>].name</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f2c9a30080b37d983751ed87b08cff981e3a8abe/2020/11/02/0d63d66a4925ea08bfd4a7be301d2b25.png" alt=""></p><blockquote><p>在修改的时候我们不希望能够修改 书籍的编号 ，所以就需要在修改时添加 <code>disabled</code> 属性，如下写法</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">v-model</span>=<span class="string">"id"</span> <span class="attr">:disabled</span>=<span class="string">"flag"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>可以看到，这是一个 vue 属性，flag是一个变量，Ta 需要在 Vue 实例对象 data中定义，默认为 <code>flag: false</code></p></blockquote><blockquote><p>在修改是禁止修改编号，使 <code>flag: true</code> 即可，如下</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">toEdit: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">    <span class="comment">// 禁止修改编号</span></span><br><span class="line">    <span class="keyword">this</span>.flag = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// console.log(id);</span></span><br><span class="line">    <span class="comment">// 先通过 id 找到对应的这一行数据</span></span><br><span class="line">    <span class="keyword">var</span> book = <span class="keyword">this</span>.books.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> item.id === id</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// console.log(book);</span></span><br><span class="line">    <span class="keyword">this</span>.id = book[<span class="number">0</span>].id</span><br><span class="line">    <span class="keyword">this</span>.name = book[<span class="number">0</span>].name</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>另外，提交(handle)事件现在有两件事要做，一是编辑图书，二是添加图书，当 flag 为 true 时去编辑图书，当 flag 为 false 时去添加图书，如下</p><p>使用 filter 得到 books 中的所有元素，如果输入框中的 id 等于 要编辑的图书的id，则把输入框中的 name 重新赋值给 书籍的 name</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">handle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.flag){</span><br><span class="line">        <span class="comment">// 编辑</span></span><br><span class="line">        <span class="keyword">this</span>.books.filter(<span class="function">(<span class="params">item</span>)=&gt;</span>{</span><br><span class="line">            <span class="comment">// console.log(item);</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.id == item.id){</span><br><span class="line">                item.name = <span class="keyword">this</span>.name</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="literal">false</span></span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">        <span class="keyword">var</span> book = {}</span><br><span class="line">        book.id = <span class="keyword">this</span>.id</span><br><span class="line">        book.name = <span class="keyword">this</span>.name</span><br><span class="line">        book.date = <span class="string">""</span></span><br><span class="line">        <span class="keyword">this</span>.books.push(book)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">this</span>.id = <span class="string">""</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>效果如下</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@bbc42ae18fcc61904814e027143c474f896abcf1/2020/11/02/aab6fab5d5b8da5e385b0d00978a59cd.png" alt=""></p><h2 id="4删除图书"><a class="markdownIt-Anchor" href="#4删除图书"></a> 4.删除图书</h2><ul><li>删除按钮绑定事件处理方法</li><li>实现删除业务逻辑</li></ul><blockquote><p>代码实现</p><p>三种方法</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"deleteBook(item.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">deleteBook: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">    <span class="comment">// -----------------方法一(filter)---------------------</span></span><br><span class="line">    <span class="keyword">var</span> book = <span class="keyword">this</span>.books.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> item.id === id</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// console.log(book);</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="keyword">this</span>.books.indexOf(book[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// console.log(index);</span></span><br><span class="line">    <span class="keyword">this</span>.books.splice(index, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------------方法二(findIndex)---------------------</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="keyword">this</span>.books.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> item.id === id</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// console.log(index);</span></span><br><span class="line">    <span class="keyword">this</span>.books.splice(index, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// -----------------方法三(filter的重新赋值)---------------</span></span><br><span class="line">        <span class="keyword">this</span>.books = <span class="keyword">this</span>.books.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> item.id != id</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@ee5ad5f3876432ff411fc8f6f2fbbebec442914e/2020/11/02/05f00d0133032bdb50c8f684edd15088.png" alt=""></p><h2 id="5常用特性应用场景"><a class="markdownIt-Anchor" href="#5常用特性应用场景"></a> 5.常用特性应用场景</h2><ul><li>过滤器（格式化日期）</li><li>自定义指令（获取表单焦点）</li><li>计算属性（统计图书数量）</li><li>侦听器（验证图书存在性）</li><li>生命周期（图书数据处理）</li></ul><blockquote><p>代码实现</p><p>首先 Ctrl+C、Ctrl+V 祖传过滤器</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'format'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, arg</span>) </span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dateFormat</span>(<span class="params">date, format</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> date === <span class="string">"string"</span>) {</span><br><span class="line">            <span class="keyword">var</span> mts = date.match(<span class="regexp">/(\/Date\((\d+)\)\/)/</span>);</span><br><span class="line">            <span class="keyword">if</span> (mts &amp;&amp; mts.length &gt;= <span class="number">3</span>) {</span><br><span class="line">                date = <span class="built_in">parseInt</span>(mts[<span class="number">2</span>]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        date = <span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">        <span class="keyword">if</span> (!date || date.toUTCString() == <span class="string">"Invalid Date"</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">var</span> map = {</span><br><span class="line">            <span class="string">"M"</span>: date.getMonth() + <span class="number">1</span>, <span class="comment">//月份 </span></span><br><span class="line">            <span class="string">"d"</span>: date.getDate(), <span class="comment">//日 </span></span><br><span class="line">            <span class="string">"h"</span>: date.getHours(), <span class="comment">//小时 </span></span><br><span class="line">            <span class="string">"m"</span>: date.getMinutes(), <span class="comment">//分 </span></span><br><span class="line">            <span class="string">"s"</span>: date.getSeconds(), <span class="comment">//秒 </span></span><br><span class="line">            <span class="string">"q"</span>: <span class="built_in">Math</span>.floor((date.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度 </span></span><br><span class="line">            <span class="string">"S"</span>: date.getMilliseconds() <span class="comment">//毫秒 </span></span><br><span class="line">        };</span><br><span class="line">        format = format.replace(<span class="regexp">/([yMdhmsqS])+/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">all, t</span>) </span>{</span><br><span class="line">            <span class="keyword">var</span> v = map[t];</span><br><span class="line">            <span class="keyword">if</span> (v !== <span class="literal">undefined</span>) {</span><br><span class="line">                <span class="keyword">if</span> (all.length &gt; <span class="number">1</span>) {</span><br><span class="line">                    v = <span class="string">'0'</span> + v;</span><br><span class="line">                    v = v.substr(v.length - <span class="number">2</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> v;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (t === <span class="string">'y'</span>) {</span><br><span class="line">                <span class="keyword">return</span> (date.getFullYear() + <span class="string">''</span>).substr(<span class="number">4</span> - all.length);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> all;</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">return</span> format;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dateFormat(value, arg);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>然后在需要显示时间的那一格进行使用</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>{{item.date | format('yyyy-MM-dd hh:mm:ss')}}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>注意</strong>：books内不能直接用 this 获取Dao Vue的实例对象，而是获取的 Window 全局对象</p></blockquote><blockquote><p>直接在添加书籍时添加时间即可，如下</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加</span></span><br><span class="line"><span class="keyword">var</span> book = {}</span><br><span class="line">book.id = <span class="keyword">this</span>.id</span><br><span class="line">book.name = <span class="keyword">this</span>.name</span><br><span class="line">book.date = <span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">// 时间</span></span><br><span class="line"><span class="keyword">this</span>.books.push(book)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>刷新页面获取焦点也是直接写一个全局 directive ，自定义指令即可，我命名为 <code>focus</code> ，名字可以随便写，el 为需要获取焦点的元素</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'focus'</span>, {</span><br><span class="line">    inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>{</span><br><span class="line">        el.focus();</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><blockquote><p>实现效果如下</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@acc2acd9951ef2fd8e6feca47097a13442d9bf13/2020/11/02/e861f1a769ab32e150a392e95d61ea4e.png" alt=""></p><blockquote><p>当图书名已经存在则禁用提交按钮</p><p>通过 watch 实时验证图书名称是否已经存在</p></blockquote><blockquote><p>代码实现</p><p>在提交按钮定义一个 flag，同样是设置一个变量，默认值设置为 false</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handle"</span> <span class="attr">:disabled</span>=<span class="string">"submitFlag"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用 some 来检测 books 数组中是否有 输入的书籍的 name，如果有则禁止提交，如果没有则可以提交</p><p>some() 方法会依次执行数组的每个元素：</p><ul><li>如果有一个元素满足条件，则表达式返回<em>true</em> , 剩余的元素不会再执行检测。</li><li>如果没有满足条件的元素，则返回false。</li></ul></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">watch: {</span><br><span class="line">    name: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> flag = <span class="keyword">this</span>.books.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> item.name == val</span><br><span class="line">        })</span><br><span class="line">        <span class="built_in">console</span>.log(flag);</span><br><span class="line">        <span class="keyword">if</span>(flag){</span><br><span class="line">            <span class="keyword">this</span>.submitFlag = <span class="literal">true</span></span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">this</span>.submitFlag = <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@7267d9c40dcb377142abb3575ba22cc6af9b8df1/2020/11/02/8a3227aba0fc3ebc314f223364f0b08c.png" alt=""></p><blockquote><p>最后我们需要在 Vue 实例的生命周期的 mounted 阶段（<em>渲染之后，可以获取数据生成的DOM对象</em>）来获取图书数据</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">// 该生命周期钩子函数被触发的时候，模板已经可以使用</span></span><br><span class="line">    <span class="comment">// 一般此时用于获取后台数据，然后把数据填充到模板</span></span><br><span class="line">    <span class="keyword">var</span> data = [</span><br><span class="line">        {</span><br><span class="line">            id: <span class="number">1</span>,</span><br><span class="line">            name: <span class="string">'三国演义'</span>,</span><br><span class="line">            date: <span class="number">2525609975000</span></span><br><span class="line">        },{</span><br><span class="line">            id: <span class="number">2</span>,</span><br><span class="line">            name: <span class="string">'水浒传'</span>,</span><br><span class="line">            date: <span class="number">2525609975000</span></span><br><span class="line">        },{</span><br><span class="line">            id: <span class="number">3</span>,</span><br><span class="line">            name: <span class="string">'红楼梦'</span>,</span><br><span class="line">            date: <span class="number">2525609975000</span></span><br><span class="line">        },{</span><br><span class="line">            id: <span class="number">4</span>,</span><br><span class="line">            name: <span class="string">'西游记'</span>,</span><br><span class="line">            date: <span class="number">2525609975000</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">this</span>.books = data</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>最后的实现效果是一样的</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue生命周期</title>
    <link href="https://extheor.club/posts/83f13096/index.html"/>
    <id>https://extheor.club/posts/83f13096/index.html</id>
    <published>2020-11-07T15:39:54.457Z</published>
    <updated>2020-11-07T15:52:21.811Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue生命周期"><a class="markdownIt-Anchor" href="#vue生命周期"></a> Vue生命周期</h1><p>下图展示了实例的生命周期。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高。</p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/生命周期.png"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ msg }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        msg: <span class="string">"helloVue"</span>,</span><br><span class="line">        className: <span class="string">"redBg"</span></span><br><span class="line">    },</span><br><span class="line">    beforeCreate(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeCreate"</span>);</span><br><span class="line">        <span class="comment">// 此时数据data和事件方法methods还未绑定到app对象上</span></span><br><span class="line">        <span class="comment">// console.log(this);</span></span><br><span class="line">        <span class="comment">// console.log(this.msg);</span></span><br><span class="line">        <span class="comment">// console.log(this.clickEvent);</span></span><br><span class="line">    },</span><br><span class="line">    created(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"created"</span>);</span><br><span class="line">        <span class="comment">// 数据data和方法methods绑定到应用对象app上</span></span><br><span class="line">        <span class="comment">// console.log(this);</span></span><br><span class="line">        <span class="comment">// console.log(this.msg);</span></span><br><span class="line">        <span class="comment">// console.log(this.clickEvent);</span></span><br><span class="line">    },</span><br><span class="line">    beforeMount(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeMount"</span>);</span><br><span class="line">        <span class="comment">// 渲染之前,根据数据生成的DOM对象是获取不到的</span></span><br><span class="line">        <span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">".redBg"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(dom);</span><br><span class="line">    },</span><br><span class="line">    mounted(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"mounted"</span>);</span><br><span class="line">        <span class="comment">// 渲染之后，可以获取数据生成的DOM对象</span></span><br><span class="line">        <span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">".redBg"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(dom);</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        clickEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    beforeUpdate() {</span><br><span class="line">        <span class="comment">// 数据更改，但内容未更改之前</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeUpdate"</span>);</span><br><span class="line">        <span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">".redBg"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(dom);</span><br><span class="line">    },</span><br><span class="line">    updated() {</span><br><span class="line">        <span class="comment">// 内容已更新完毕</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"update"</span>);</span><br><span class="line">        <span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">".redBg"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(dom);</span><br><span class="line">    },</span><br><span class="line">    beforeDestroy() {</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    destroyed() {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在刷新页面后，依次触发四个事件：</p><ul><li><p>beforeCreate事件</p><blockquote><p>Vue {_uid: 0, _isVue: true, $options: {…}, _renderProxy: Proxy, _self: Vue, …}<br>undefined</p><p>undefined</p></blockquote><p>说明在beforeCreate事件触发时，Vue刚刚实例化，而此时数据data和事件方法methods还未绑定到app对象上。</p></li><li><p>created事件</p><blockquote><p>Vue {_uid: 0, _isVue: true, $options: {…}, _renderProxy: Proxy, _self: Vue, …}<br>helloVue<br>ƒ (){}</p></blockquote><p>说明在create事件触发时，数据data和方法methods绑定到应用对象app上。</p></li><li><p>beforeMount事件</p><blockquote><p>null</p></blockquote><p>在渲染页面之前，数据是没有挂载的，根据数据生成的DOM对象是获取不到的</p></li><li><p>mount事件</p><blockquote><p><code>&lt;h1 class="redBg"&gt;helloVue&lt;/h1&gt;</code></p></blockquote><p>在渲染页面之后，数据是已经挂载的，可以获取数据生成的DOM对象</p></li></ul><p>在修改数据之后，依次再触发两个事件：</p><ul><li><p>beforeUpdate事件</p><blockquote><p><code>&lt;h1 class="redBg"&gt;123&lt;/h1&gt;</code></p></blockquote><p>我这里是在修改数据之前能获取到数据</p></li><li><p>update事件</p><blockquote><p><code>&lt;h1 class="redBg"&gt;123&lt;/h1&gt;</code></p></blockquote><p>在修改数据之后也能获取到数据</p></li></ul><p>在数据销毁之后，依次再触发两个事件：</p><ul><li>beforeDestory事件</li><li>destoryed事件</li></ul><blockquote><p>想要看到销毁事件触发的效果需要先事先写好一个自定义组件</p><p>这个 <code>&lt;hello-com&gt;&lt;/hello-com&gt;</code> 就是自定义组件</p><p>然后当销毁这个自定义组件的时候就会触发这两个销毁事件</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-com</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> helloCom = Vue.component(<span class="string">"hello-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;div&gt;&lt;h1&gt;{{ maxiaoyu }}&lt;/h1&gt;&lt;button @click='changeData'&gt;修改数据&lt;/button&gt;&lt;/div&gt;"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            maxiaoyu: <span class="string">"hello maxiaoyu"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        changeData: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">this</span>.maxiaoyu = <span class="string">"hello 小明"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    beforeCreate(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeCreate"</span>);</span><br><span class="line">        <span class="comment">// 此时数据data和事件方法methods还未绑定到app对象上</span></span><br><span class="line">    },</span><br><span class="line">    created(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"created"</span>);</span><br><span class="line">        <span class="comment">// 数据data和方法methods绑定到应用对象app上</span></span><br><span class="line">    },</span><br><span class="line">    beforeMount(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeMount"</span>);</span><br><span class="line">        <span class="comment">// 渲染之前,根据数据生成的DOM对象是获取不到的</span></span><br><span class="line">    },</span><br><span class="line">    mounted(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"mounted"</span>);</span><br><span class="line">        <span class="comment">// 渲染之后，可以获取数据生成的DOM对象</span></span><br><span class="line">    },</span><br><span class="line">    beforeUpdate() {</span><br><span class="line">        <span class="comment">// 数据更改，但内容未更改之前</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeUpdate"</span>);</span><br><span class="line">    },</span><br><span class="line">    updated() {</span><br><span class="line">        <span class="comment">// 内容已更新完毕</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"update"</span>);</span><br><span class="line">    },</span><br><span class="line">    beforeDestroy() {</span><br><span class="line">        <span class="comment">// 应用销毁之前</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeDestroy"</span>);</span><br><span class="line">    },</span><br><span class="line">    destroyed() {</span><br><span class="line">        <span class="comment">// 应用销毁之后</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"destroyed"</span>);</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        isShow: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    components: {</span><br><span class="line">        <span class="string">"hello-com"</span>: helloCom</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>提示：可以在控制台输入 app.isShow = false 来销毁这个自定义组件</p><p>只有v-if 可以销毁，v-show 不能销毁，v-show 只是修改了组件的属性值为display: none</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 前端路由</title>
    <link href="https://extheor.club/posts/664423f6/index.html"/>
    <id>https://extheor.club/posts/664423f6/index.html</id>
    <published>2020-11-07T15:39:54.445Z</published>
    <updated>2020-11-07T15:52:21.799Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue-前端路由"><a class="markdownIt-Anchor" href="#vue-前端路由"></a> Vue 前端路由</h1><h2 id="1路由的基本概念与原理"><a class="markdownIt-Anchor" href="#1路由的基本概念与原理"></a> 1.路由的基本概念与原理</h2><h3 id="11路由"><a class="markdownIt-Anchor" href="#11路由"></a> 1.1路由</h3><p>路由是一个比较广义和抽象的概念，<strong>路由的本质就是对应关系</strong>。<br>在开发中，路由分为:</p><ul><li>后端路由</li><li>前端路由</li></ul><h4 id="1后端路由"><a class="markdownIt-Anchor" href="#1后端路由"></a> 1.后端路由</h4><ul><li>概念: 根据不同的<strong>用户URL请求</strong>，返回不同的内容</li><li>本质: <strong>URL请求地址</strong>与<strong>服务器资源</strong>之间的对应关系</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@bf8a3aac41097ba14054a81cdf0eab1f163a2372/2020/11/04/4b5ddd8b2ae9c6cf952f81f23312b87a.png" alt="image-20201104112226019"></p><h4 id="2前端路由spa"><a class="markdownIt-Anchor" href="#2前端路由spa"></a> 2.前端路由（SPA）</h4><h5 id="1spa"><a class="markdownIt-Anchor" href="#1spa"></a> 1.SPA</h5><ul><li>后端渲染(存在性能问题)</li><li>Ajax前端渲染（前端渲染提高性能，但是不支持浏览器的前进后退操作)</li><li>SPA (Single Page Application)单页面应用程序: 整个网站只有一个页面，内容的变化通过Ajax局部更新实现、同时支持浏览器地址栏的前进和后退操作</li><li>SPA实现原理之一: 基于URL地址的hash (hash的变化会导致浏览器记录访问历史的变化、但是hash的变化不会触发新的URL请求)</li><li>在实现SPA过程中，最核心的技术点就是前端路由</li></ul><h5 id="2前端路由"><a class="markdownIt-Anchor" href="#2前端路由"></a> 2.前端路由</h5><ul><li>概念: 根据不同的<strong>用户事件</strong>，显示不同的页面内容</li><li>本质: <strong>用户事件</strong>与<strong>事件处理函数</strong>之间的对应关系</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@d1dc85fdb545af81183dd86d73647ab8970a27a6/2020/11/04/6dbfbe30b78a17bf8ddd71bb070130f3.png" alt="image-20201104112831829"></p><h4 id="3实现简易的前端路由"><a class="markdownIt-Anchor" href="#3实现简易的前端路由"></a> 3.实现简易的前端路由</h4><ul><li><p>基于URL中的hash实现(点击菜单的时候改变URL的hash，根据hash的变化控制组件的切换)</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@950c3293abe862c6fc84521c8045dfb62b1811d7/2020/11/04/1272714cb46628ad938fc94ce8bcf31b.png" alt="image-20201104113244384"></p></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听window的onhashchange 事件，根据获取到的最新的hash值，切换要显示的组件的名称</span></span><br><span class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line"><span class="comment">// 通过location.hash获取到最新的hash值</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="12vue-router"><a class="markdownIt-Anchor" href="#12vue-router"></a> 1.2Vue Router</h2><p>vue Router(官网: [https: <a href="//router.vuejs.org/zh/" target="_blank" rel="noopener">//router.vuejs.org/zh/</a>](https: <a href="//router.vuejs.org/zh/" target="_blank" rel="noopener">//router.vuejs.org/zh/</a>))是Vue.js 官方的路由管理器。它和vue.js 的核心深度集成，可以非常方便的用于SPA应用程序的开发。</p><p>vue Router包含的功能有:</p><ul><li>支持HTML5历史模式或hash模式</li><li>支持嵌套路由</li><li>支持路由参数</li><li>支持编程式路由</li><li>支持命名路由</li></ul><h2 id="2vue-router的基本使用"><a class="markdownIt-Anchor" href="#2vue-router的基本使用"></a> 2.vue-router的基本使用</h2><h3 id="21基本使用步骤"><a class="markdownIt-Anchor" href="#21基本使用步骤"></a> 2.1基本使用步骤</h3><ol><li>引入相关的库文件</li><li>添加路由链接</li><li>添加路由填充位</li><li>定义路由组件</li><li>配置路由规则并创建路由实例</li><li>把路由挂载到 Vue 根实例中</li></ol><h3 id="22路由重定向"><a class="markdownIt-Anchor" href="#22路由重定向"></a> 2.2路由重定向</h3><p>路由重定向指的是: 用户在访问地址 a的时候，强制用户跳转到地址c，从而展示特定的组件页面;</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> vueRouter ({</span><br><span class="line">    routes: [</span><br><span class="line">    <span class="comment">//其中，path表示需要被重定向的原地址，redirect表示将要被重定向到的新地址{path : '稔’, redirect: '/user'},</span></span><br><span class="line">    {<span class="attr">path</span>: <span class="string">'/user '</span> , <span class="attr">component</span>: User} ,</span><br><span class="line">    {<span class="attr">path</span>: <span class="string">'/register'</span> , <span class="attr">component</span>: Register}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="3vue-router嵌套路由"><a class="markdownIt-Anchor" href="#3vue-router嵌套路由"></a> 3.vue-router嵌套路由</h2><h3 id="31嵌套路由用法"><a class="markdownIt-Anchor" href="#31嵌套路由用法"></a> 3.1.嵌套路由用法</h3><h4 id="1嵌套路由功能分析"><a class="markdownIt-Anchor" href="#1嵌套路由功能分析"></a> 1.嵌套路由功能分析</h4><ul><li>点击父级路由链接显示模板内容</li><li>模板内容中又有子级路由链接</li><li>点击子级路由链接显示子级模板内容</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@718084b6c86dbaa8703bb3525fb3c4bcf9de5fb7/2020/11/04/f0f1731315e425c7e7580839447584d6.png" alt="image-20201104114134912"></p><h4 id="2父路由组件模板"><a class="markdownIt-Anchor" href="#2父路由组件模板"></a> 2.父路由组件模板</h4><ul><li>父级路由链接</li><li>父组件路由填充位</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制组件的显示位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/ <span class="attr">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3子级路由模板"><a class="markdownIt-Anchor" href="#3子级路由模板"></a> 3.子级路由模板</h4><ul><li>子级路由链接</li><li>子级路由填充位</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Register = {</span><br><span class="line">    template: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Register组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;hr/&gt;</span></span><br><span class="line"><span class="string">        &lt;router-link to="/register/tab1"&gt;Tab1&lt;/router-link&gt;    &lt;router-link to="/register/tab2"&gt;Tab2&lt;/router-link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;!--子路由填充位置--&gt;</span></span><br><span class="line"><span class="string">        &lt;router-view/</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="4嵌套路由用法"><a class="markdownIt-Anchor" href="#4嵌套路由用法"></a> 4.嵌套路由用法</h4><ul><li>父级路由通过children属性配置子级路由</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> vueRouter({</span><br><span class="line">routes: [</span><br><span class="line">{ <span class="attr">path</span>: <span class="string">' /user'</span>, <span class="attr">component</span>: User },</span><br><span class="line">    {</span><br><span class="line">            path: <span class="string">' /register'</span>,</span><br><span class="line">            component: Register</span><br><span class="line">        <span class="comment">//通过children属性，为/register 添加子路由规则</span></span><br><span class="line">        children: [</span><br><span class="line">                { <span class="attr">path</span> : <span class="string">' /register/tab1'</span> , <span class="attr">component</span>: Tab1 },</span><br><span class="line">                { <span class="attr">path</span>: <span class="string">' / register/tab2'</span> , <span class="attr">component</span>: Tab2 }</span><br><span class="line">        ]</span><br><span class="line">        },</span><br><span class="line">]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="4vue-router动态路由匹配"><a class="markdownIt-Anchor" href="#4vue-router动态路由匹配"></a> 4.vue-router动态路由匹配</h2><h3 id="41动态匹配路由的基本用法"><a class="markdownIt-Anchor" href="#41动态匹配路由的基本用法"></a> 4.1动态匹配路由的基本用法</h3><p>应用场景:通过动态路由参数的模式进行路由匹配</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> vueRouter ({</span><br><span class="line">    routes: [</span><br><span class="line">        <span class="comment">//动态路径参数以冒号开头</span></span><br><span class="line">    { <span class="attr">path</span> : <span class="string">'/user/:id'</span>, <span class="attr">component</span> : User }</span><br><span class="line">]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = {</span><br><span class="line"><span class="comment">//路由组件中通过$route.params获取路由参数</span></span><br><span class="line">    template: <span class="string">'&lt;div&gt;user {{ $route.params.id }}&lt;/div&gt;'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="42路由组件传递参数"><a class="markdownIt-Anchor" href="#42路由组件传递参数"></a> 4.2路由组件传递参数</h3><p>$route与对应路由形成高度耦合，不够灵活，所以可以使用props将组件和路由解耦</p><h4 id="1props的值为布尔类型"><a class="markdownIt-Anchor" href="#1props的值为布尔类型"></a> 1.props的值为布尔类型</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter({</span><br><span class="line">routes: [</span><br><span class="line">    <span class="comment">//如果props被设置为true，route.params将会被设置为组件属性</span></span><br><span class="line">    { <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User, <span class="attr">props</span>: <span class="literal">true</span> }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">const</span> User = {</span><br><span class="line">props: [<span class="string">'id'</span>], <span class="comment">//使用props接收路由参数</span></span><br><span class="line">template: <span class="string">'&lt;div&gt;用户ID:{{ id }&lt;/div&gt;'</span> <span class="comment">//使用路由参数</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5vue-router编程式导航"><a class="markdownIt-Anchor" href="#5vue-router编程式导航"></a> 5.vue-router编程式导航</h2><h3 id="51页面导航的两种方式"><a class="markdownIt-Anchor" href="#51页面导航的两种方式"></a> 5.1页面导航的两种方式</h3><ul><li><strong>声明式导航</strong>:通过<strong>点击链接</strong>实现导航的方式，叫做声明式导航<br>例如:普通网页中的 <code>&lt;a&gt;&lt;/a&gt;</code> 链接或 vue 中的 <code>&lt;router-link&gt;&lt;/router-link&gt;</code></li><li><strong>编程式导航</strong>:<strong>通过调用JavaScript</strong>形式的API实现导航的方式，叫做编程式导航例如:普通网页中的 <code>location.href</code></li></ul><p>常用的编程式导航API如下:</p><ul><li>this.$router.push (‘hash地址’)</li><li>this.$router.go(n)</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = {</span><br><span class="line">    template: <span class="string">'&lt;div&gt;&lt;button @click="goRegister"&gt;跳转到注册页面&lt;/button&gt;&lt;/div&gt;'</span>,</span><br><span class="line">    methods:{</span><br><span class="line">        goRegister: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="comment">// 用编程的方式控制路由跳转</span></span><br><span class="line">            <span class="keyword">this</span>.$router.push(<span class="string">'/register'</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="52编程式导航参数规则"><a class="markdownIt-Anchor" href="#52编程式导航参数规则"></a> 5.2编程式导航参数规则</h3><h4 id="routerpush-方法的参数规则"><a class="markdownIt-Anchor" href="#routerpush-方法的参数规则"></a> router.push() 方法的参数规则</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串(路径名称)</span></span><br><span class="line">router.push (<span class="string">'/home'</span>)</span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line">router.push({<span class="attr">path</span>: <span class="string">'/ home'</span>})<span class="comment">//命名的路由（传递参数)</span></span><br><span class="line">router.push({<span class="attr">name</span>: <span class="string">'/user'</span>, <span class="attr">params</span>: { <span class="attr">userId</span>: <span class="number">123</span> }})</span><br><span class="line"><span class="comment">//带查询参数，变成/register?uname=lisi</span></span><br><span class="line">router.push({ <span class="attr">path</span>: <span class="string">'/register'</span>, <span class="attr">query</span>: { <span class="attr">uname</span>: <span class="string">'lisi'</span> }})</span><br></pre></td></tr></tbody></table></figure><h2 id="6vue-router命名路由"><a class="markdownIt-Anchor" href="#6vue-router命名路由"></a> 6.vue-router命名路由</h2><h3 id="61命名路由的匹配规则"><a class="markdownIt-Anchor" href="#61命名路由的匹配规则"></a> 6.1命名路由的匹配规则</h3><p>为了更加方便的表示路由的路径，可以给路由规则起一个别名，即为“命名路由”。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter ({</span><br><span class="line">    routes: [</span><br><span class="line">        path: <span class="string">'/user/:id'</span> ,</span><br><span class="line">        name: <span class="string">'user" ,</span></span><br><span class="line"><span class="string">        component: User</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">})</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"{ name : 'user', params : { id: 123 } }"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.push ({ <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: { <span class="attr">id</span>: <span class="number">123</span> }})</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue局部组件注册</title>
    <link href="https://extheor.club/posts/b9325cf5/index.html"/>
    <id>https://extheor.club/posts/b9325cf5/index.html</id>
    <published>2020-11-07T15:39:54.433Z</published>
    <updated>2020-11-07T15:52:21.810Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue局部组件注册"><a class="markdownIt-Anchor" href="#vue局部组件注册"></a> Vue局部组件注册</h1><blockquote><p>直接写代码怎么用吧</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"test-com"</span>,{</span><br><span class="line">template: <span class="string">"&lt;div&gt;TestCom&lt;/div&gt;"</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test-com</span>&gt;</span><span class="tag">&lt;/<span class="name">test-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>这就是自定义组件</p></blockquote><blockquote><p>如果组件名使用大写会报错</p><p>那怎么办呢？这时就需要用到一个 Vue 实例中的 components 了，比如我自定义了 <code>&lt;HelloWorld&gt;&lt;/HelloWorld&gt;</code> 组件</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloWorld = {</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            msg: <span class="string">"HelloWorld"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    template: <span class="string">"&lt;div&gt;{{msg}}&lt;/div&gt;"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    components:{</span><br><span class="line">        <span class="string">"hello-world"</span>: HelloWorld,</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>这样就能在 body 中使用 <code>&lt;hello-world&gt;&lt;/hello-world&gt;</code> 组件了</p></blockquote><blockquote><p>局部组件只能在注册他的父组件中使用</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 错误演示 - 以下代码会报错 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;hello-world&gt;&lt;test-com&gt;&lt;/test-com&gt;&lt;/hello-world&gt; --&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue介绍</title>
    <link href="https://extheor.club/posts/3270cf84/index.html"/>
    <id>https://extheor.club/posts/3270cf84/index.html</id>
    <published>2020-11-07T15:39:54.410Z</published>
    <updated>2020-11-07T15:52:21.800Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue介绍"><a class="markdownIt-Anchor" href="#vue介绍"></a> Vue介绍</h1><blockquote><p>可以从<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue官方文档</a>中学习，也可以从B站中去学习，我是看了两个</p></blockquote><h2 id="课程大纲"><a class="markdownIt-Anchor" href="#课程大纲"></a> 课程大纲</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/Vuejs知识量化.svg"><h2 id="vue是什么"><a class="markdownIt-Anchor" href="#vue是什么"></a> Vue是什么</h2><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以<a href="%5Bhttps://baike.baidu.com/item/%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E8%AE%BE%E8%AE%A1/1257574?fr=aladdin%5D(https://baike.baidu.com/item/%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E8%AE%BE%E8%AE%A1/1257574?fr=aladdin)">自底向上逐层应用</a>。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="noopener">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="起步"><a class="markdownIt-Anchor" href="#起步"></a> 起步</h2><p>尝试 Vue.js 最简单的方法是使用 <a href="https://codesandbox.io/s/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-hello-world" target="_blank" rel="noopener">Hello World 例子</a>。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以<a href="https://github.com/vuejs/vuejs.org/blob/master/src/v2/examples/vue-20-hello-world/index.html" target="_blank" rel="noopener">创建一个 <code>.html</code> 文件</a>，然后通过如下方式引入 Vue：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>或者：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://cn.vuejs.org/guide/installation.html" target="_blank" rel="noopener">安装教程</a>给出了更多安装 Vue 的方式。请注意我们<strong>不推荐</strong>新手直接使用 <code>vue-cli</code>，尤其是在你还不熟悉基于 Node.js 的构建工具时。</p><p>如果你喜欢交互式的东西，你也可以查阅<a href="https://scrimba.com/g/gvuedocs" target="_blank" rel="noopener">这个 Scrimba 上的系列教程</a>，它揉合了录屏和代码试验田，并允许你随时暂停和播放。</p><h2 id="声明式渲染"><a class="markdownIt-Anchor" href="#声明式渲染"></a> 声明式渲染</h2><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  {{ message }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Hello Vue!</p></blockquote><p>我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是<strong>响应式的</strong>。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 <code>app.message</code> 的值，你将看到上例相应地更新。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    {{ message }} {{name}} {{age}}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = {</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span>,</span><br><span class="line">    name: <span class="string">"Vue"</span>,</span><br><span class="line">    age: <span class="string">"18"</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: data,</span><br><span class="line">});</span><br><span class="line">data.message = <span class="string">"Hello World!"</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>Hello World!</p></blockquote><p>然而我们发现使用app仍然能够获得到message的值，就像下面这样</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(app.message); <span class="comment">// =&gt; Hello World!</span></span><br></pre></td></tr></tbody></table></figure><p>通过 <code>app.$data</code> 可以获取到app中的data对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(app.$data); <span class="comment">// =&gt; {__ob__: Observer}</span></span><br></pre></td></tr></tbody></table></figure><p>注意我们不再和 HTML 直接交互了。一个 Vue 应用会将其挂载到一个 DOM 元素上 (对于这个例子是 <code>#app</code>) 然后对其进行完全控制。那个 HTML 是我们的入口，但其余都会发生在新创建的 Vue 实例内部。</p><p>除了文本插值，我们还可以像这样来绑定元素 attribute：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app-2'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="string">'页面加载于 '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>鼠标悬停几秒钟查看此处动态绑定的提示信息！</p></blockquote><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/v-bind.gif"><p>这里我们遇到了一点新东西。你看到的 <code>v-bind</code> attribute 被称为<strong>指令</strong>。指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊 attribute。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。在这里，该指令的意思是：“将这个元素节点的 <code>title</code> attribute 和 Vue 实例的 <code>message</code> property 保持一致”。</p><p>如果你再次打开浏览器的 JavaScript 控制台，输入 <code>app2.message = '新消息'</code>，就会再一次看到这个绑定了 <code>title</code> attribute 的 HTML 已经进行了更新。</p><h2 id="条件与循环"><a class="markdownIt-Anchor" href="#条件与循环"></a> 条件与循环</h2><p>控制切换一个元素是否显示也相当简单：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app-3'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    seen: <span class="literal">true</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>现在你看到我了</p></blockquote><p>继续在控制台输入 <code>app3.seen = false</code>，你会发现之前显示的消息消失了。</p><p>这个例子演示了我们不仅可以把数据绑定到 DOM 文本或 attribute，还可以绑定到 DOM <strong>结构</strong>。此外，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/移除元素时自动应用<a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">过渡效果</a>。</p><p>还有其它很多指令，每个都有特殊的功能。例如，<code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span>&gt;</span></span><br><span class="line">      {{ todo.text }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var app4 = new Vue({</span><br><span class="line">  el: '#app-4',</span><br><span class="line">  data: {</span><br><span class="line">    todos: [</span><br><span class="line">      { text: '学习 JavaScript' },</span><br><span class="line">      { text: '学习 Vue' },</span><br><span class="line">      { text: '整个牛项目' }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li>学习 JavaScript</li><li>学习 Vue</li><li>整个牛项目</li></ol></blockquote><p>在控制台里，输入 <code>app4.todos.push({ text: '新项目' })</code>，你会发现列表最后添加了一个新项目。</p><h2 id="处理用户输入"><a class="markdownIt-Anchor" href="#处理用户输入"></a> 处理用户输入</h2><p>为了让用户和你的应用进行交互，我们可以用 <code>v-on</code> 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ message }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"reverseMessage"</span>&gt;</span>反转消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app5 = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app-5'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="string">'Hello Vue.js!'</span></span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    reverseMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.message);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/消息反转.gif"><p>注意在 <code>reverseMessage</code> 方法中，我们更新了应用的状态，但没有触碰 DOM——所有的 DOM 操作都由 Vue 来处理，你编写的代码只需要关注逻辑层面即可。</p><p>Vue 还提供了 <code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-6"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ message }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app6 = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app-6'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/表单双向绑定.gif"><h2 id="组件化应用构建"><a class="markdownIt-Anchor" href="#组件化应用构建"></a> 组件化应用构建</h2><p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cn.vuejs.org/images/components.png" alt="Component Tree"></p><p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。在 Vue 中注册组件很简单：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义名为 todo-item 的新组件</span></span><br><span class="line">Vue.component(<span class="string">'todo-item'</span>, {</span><br><span class="line">  template: <span class="string">'&lt;li&gt;这是个待办项&lt;/li&gt;'</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(...)</span><br></pre></td></tr></tbody></table></figure><p>现在你可以用它构建另一个组件模板：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">todo-item</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>但是这样会为每个待办项渲染同样的文本，这看起来并不炫酷。我们应该能从父作用域将数据传到子组件才对。让我们来修改一下组件的定义，使之能够接受一个 <a href="https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87-Prop-%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener">prop</a>：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-item'</span>, {</span><br><span class="line">  <span class="comment">// todo-item 组件现在接受一个</span></span><br><span class="line">  <span class="comment">// "prop"，类似于一个自定义 attribute。</span></span><br><span class="line">  <span class="comment">// 这个 prop 名为 todo。</span></span><br><span class="line">  props: [<span class="string">'todo'</span>],</span><br><span class="line">  template: <span class="string">'&lt;li&gt;{{ todo.text }}&lt;/li&gt;'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>现在，我们可以使用 <code>v-bind</code> 指令将待办项传到循环输出的每个组件中：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-7"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      现在我们为每个 todo-item 提供 todo 对象</span></span><br><span class="line"><span class="comment">      todo 对象是变量，即其内容可以是动态的。</span></span><br><span class="line"><span class="comment">      我们也需要为每个组件提供一个“key”，稍后再</span></span><br><span class="line"><span class="comment">      作详细解释。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"item in groceryList"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:todo</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:key</span>=<span class="string">"item.id"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-item'</span>, {</span><br><span class="line">  props: [<span class="string">'todo'</span>],</span><br><span class="line">  template: <span class="string">'&lt;li&gt;{{ todo.text }}&lt;/li&gt;'</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app7 = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app-7'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    groceryList: [</span><br><span class="line">      { <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">'蔬菜'</span> },</span><br><span class="line">      { <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'奶酪'</span> },</span><br><span class="line">      { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'随便其它什么人吃的东西'</span> }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li>蔬菜</li><li>奶酪</li><li>随便其它什么人吃的东西</li></ol></blockquote><h3 id="与自定义元素的区别"><a class="markdownIt-Anchor" href="#与自定义元素的区别"></a> # 与自定义元素的区别</h3><p>你可能已经注意到 Vue 组件非常类似于<strong>自定义元素</strong>——它是 <a href="https://www.w3.org/wiki/WebComponents/" target="_blank" rel="noopener">Web 组件规范</a>的一部分，这是因为 Vue 的组件语法部分参考了该规范。例如 Vue 组件实现了 <a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md" target="_blank" rel="noopener">Slot API</a> 与 <code>is</code> attribute。但是，还是有几个关键差别：</p><ol><li>Web Components 规范已经完成并通过，但未被所有浏览器原生实现。目前 Safari 10.1+、Chrome 54+ 和 Firefox 63+ 原生支持 Web Components。相比之下，Vue 组件不需要任何 polyfill，并且在所有支持的浏览器 (IE9 及更高版本) 之下表现一致。必要时，Vue 组件也可以包装于原生自定义元素之内。</li><li>Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。</li></ol><p>虽然 Vue 内部没有使用自定义元素，不过在应用使用自定义元素、或以自定义元素形式发布时，<a href="https://custom-elements-everywhere.com/#vue" target="_blank" rel="noopener">依然有很好的互操作性</a>。Vue CLI 也支持将 Vue 组件构建成为原生的自定义元素。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue过滤器</title>
    <link href="https://extheor.club/posts/61057c88/index.html"/>
    <id>https://extheor.club/posts/61057c88/index.html</id>
    <published>2020-11-07T15:39:54.398Z</published>
    <updated>2020-11-07T15:52:21.816Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue过滤器"><a class="markdownIt-Anchor" href="#vue过滤器"></a> Vue过滤器</h1><h2 id="自定义过滤器"><a class="markdownIt-Anchor" href="#自定义过滤器"></a> 自定义过滤器</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首字母大写</span></span><br><span class="line">Vue.filter(<span class="string">"upper"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> val.charAt(<span class="number">0</span>).toUpperCase() + val.slice(<span class="number">1</span>)</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 首字母小写</span></span><br><span class="line">Vue.filter(<span class="string">"lower"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> val.charAt(<span class="number">0</span>).toLowerCase() + val.slice(<span class="number">1</span>)</span><br><span class="line">})</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        msg: <span class="string">""</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ msg | upper }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ msg | upper | lower }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>实现效果图</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f5695f36b36d7666a3af40535e893aaa77a4130f/2020/11/02/a9fc3fd7d58f3ecd7fc53e2cecf4f225.png" alt=""></p><blockquote><p>另外过滤器还可以定义在属性上，如下用法</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ msg | upper }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ msg | upper | lower }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:abc</span>=<span class="string">"msg | upper"</span>&gt;</span>测试数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@233dfab15dafb416157db88a4daeaad13aa5eba1/2020/11/02/319b473bc6bbb98bfa20a83461f13618.png" alt=""></p><h2 id="局部过滤器"><a class="markdownIt-Anchor" href="#局部过滤器"></a> 局部过滤器</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filters: {</span><br><span class="line">    <span class="string">"upper"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> val.charAt(<span class="number">0</span>).toUpperCase() + val.slice(<span class="number">1</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ msg | upper }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>同样可以实现相同的效果</p></blockquote><h2 id="带参数的过滤器"><a class="markdownIt-Anchor" href="#带参数的过滤器"></a> 带参数的过滤器</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">"format"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, arg</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="string">"yyyy-MM-dd"</span>){</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">""</span></span><br><span class="line">        result += value.getFullYear() + <span class="string">"-"</span> + (value.getMonth() + <span class="number">1</span>)  + <span class="string">"-"</span> + value.getDate()</span><br><span class="line">        <span class="comment">// console.log(result);</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ date | format("yyyy-MM-dd") }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>输出结果</p><p>2020-11-2</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue购物车案例</title>
    <link href="https://extheor.club/posts/eb0c9e8/index.html"/>
    <id>https://extheor.club/posts/eb0c9e8/index.html</id>
    <published>2020-11-07T15:39:54.385Z</published>
    <updated>2020-11-07T15:52:21.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue购物车案例"><a class="markdownIt-Anchor" href="#vue购物车案例"></a> Vue购物车案例</h1><h2 id="需求分析"><a class="markdownIt-Anchor" href="#需求分析"></a> 需求分析</h2><h3 id="1按照组件方式实现业务需求"><a class="markdownIt-Anchor" href="#1按照组件方式实现业务需求"></a> 1.按照组件方式实现业务需求</h3><ul><li>根据业务功能进行组件划分<ul><li>标题组件（展示文本）</li><li>列表组件（列表展示、商品数量变更、商品删除）</li><li>结算组件（计算商品总额）</li></ul></li></ul><h2 id="实现步骤"><a class="markdownIt-Anchor" href="#实现步骤"></a> 实现步骤</h2><h3 id="1功能实现步骤"><a class="markdownIt-Anchor" href="#1功能实现步骤"></a> 1.功能实现步骤</h3><ul><li>实现整体布局和样式效果</li><li>划分独立的功能组件</li><li>组合所有的子组件形成整体结构</li><li>逐个实现各个组件功能<ul><li>标题组件</li><li>列表组件</li><li>结算组件</li></ul></li></ul><blockquote><p>CSS 样式</p></blockquote><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"><span class="selector-class">.container</span> {</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.cart</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.title</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="comment">/*color: #fff;*/</span>  </span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.total</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FFCE46</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.total</span> <span class="selector-tag">button</span> {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#DC4C40</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.total</span> <span class="selector-tag">span</span> {</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> {</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ADD8E6</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-tag">img</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.name</span> {</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.change</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">50px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.change</span> <span class="selector-tag">a</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>:none;</span><br><span class="line">    <span class="attribute">background-color</span>: lightgray;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.change</span> <span class="selector-class">.num</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.del</span> {</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.del</span><span class="selector-pseudo">:hover</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>祖传 app 组件</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-cart</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cart</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>实现基本布局</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CartTitle = {</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="title"&gt;张三的商品&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CartList = {</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="item"&gt;</span></span><br><span class="line"><span class="string">            &lt;img src="img/a.png"/&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="name"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="change"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=""&gt;－&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;input type="text" class="num" /&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=""&gt;＋&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="del"&gt;×&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CartTotal = {</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class="total"&gt;</span></span><br><span class="line"><span class="string">            &lt;span&gt;总价：{{ total }}&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;button&gt;结算&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">"my-cart"</span>,{</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class="cart"&gt;</span></span><br><span class="line"><span class="string">            &lt;cart-title :uname="uname"&gt;&lt;/cart-title&gt;</span></span><br><span class="line"><span class="string">            &lt;cart-list :list="list"&gt;&lt;/cart-list&gt;</span></span><br><span class="line"><span class="string">            &lt;cart-total :list="list"&gt;&lt;/cart-total&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    components: {</span><br><span class="line">        <span class="string">'cart-title'</span>: CartTitle,</span><br><span class="line">        <span class="string">'cart-list'</span>: CartList,</span><br><span class="line">        <span class="string">'cart-total'</span>: CartTotal</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {},</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>接下来要使用 <code>my-cart</code> 给各个子组件传递需要的内容</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CartTitle = {</span><br><span class="line">    props: [<span class="string">"uname"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="title"&gt;{{ uname }}的商品&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CartList = {</span><br><span class="line">    props: [<span class="string">"list"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="item" :key="item.id" v-for="item in list"&gt;</span></span><br><span class="line"><span class="string">            &lt;img :src="item.img"/&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="name"&gt;{{ item.name }}&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="change"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=""&gt;－&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;input type="text" class="num" /&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=""&gt;＋&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="del"&gt;×&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CartTotal = {</span><br><span class="line">    props: [<span class="string">"list"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class="total"&gt;</span></span><br><span class="line"><span class="string">            &lt;span&gt;总价：{{ total }}&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;button&gt;结算&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    computed: {</span><br><span class="line">        total: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="comment">// 计算商品的总价</span></span><br><span class="line">            <span class="keyword">var</span> t = <span class="number">0</span></span><br><span class="line">            <span class="keyword">this</span>.list.filter(<span class="function">(<span class="params">item</span>)=&gt;</span>{</span><br><span class="line">                t += item.num * item.price</span><br><span class="line">            })</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">"my-cart"</span>,{</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            uname: <span class="string">"张三"</span>,</span><br><span class="line">            list: [{</span><br><span class="line">                id: <span class="number">1</span>,</span><br><span class="line">                name: <span class="string">'TCL彩电'</span>,</span><br><span class="line">                price: <span class="number">1000</span>,</span><br><span class="line">                num: <span class="number">1</span>,</span><br><span class="line">                img: <span class="string">'https://cdn.colorhub.me/imgsrv/d69c1836dbc86d7b0deb9256d6817d71ce8baeb1'</span></span><br><span class="line">            },{</span><br><span class="line">                id: <span class="number">2</span>,</span><br><span class="line">                name: <span class="string">'机顶盒'</span>,</span><br><span class="line">                price: <span class="number">1000</span>,</span><br><span class="line">                num: <span class="number">1</span>,</span><br><span class="line">                img: <span class="string">'https://cdn.colorhub.me/imgsrv/0459b5ebcc9c7fd76c320f77dfc657c3305e6c71'</span></span><br><span class="line">            },{</span><br><span class="line">                id: <span class="number">3</span>,</span><br><span class="line">                name: <span class="string">'海尔冰箱'</span>,</span><br><span class="line">                price: <span class="number">1000</span>,</span><br><span class="line">                num: <span class="number">1</span>,</span><br><span class="line">                img: <span class="string">'https://cdn.colorhub.me/imgsrv/670693a1f124395e9d3f0ca1f6993eac845cb6e1'</span></span><br><span class="line">            },{</span><br><span class="line">                id: <span class="number">4</span>,</span><br><span class="line">                name: <span class="string">'小米手机'</span>,</span><br><span class="line">                price: <span class="number">1000</span>,</span><br><span class="line">                num: <span class="number">1</span>,</span><br><span class="line">                img: <span class="string">'https://cdn.colorhub.me/imgsrv/0e3eee5ee122361806bc95daa3a3c0951337c16b'</span></span><br><span class="line">            },{</span><br><span class="line">                id: <span class="number">5</span>,</span><br><span class="line">                name: <span class="string">'PPTV电视'</span>,</span><br><span class="line">                price: <span class="number">1000</span>,</span><br><span class="line">                num: <span class="number">2</span>,</span><br><span class="line">                img: <span class="string">'https://cdn.colorhub.me/imgsrv/6ab9f09d1b12a199084addd8b5b5253da6b0b861'</span></span><br><span class="line">            }]</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class="cart"&gt;</span></span><br><span class="line"><span class="string">            &lt;cart-title :uname="uname"&gt;&lt;/cart-title&gt;</span></span><br><span class="line"><span class="string">            &lt;cart-list :list="list"&gt;&lt;/cart-list&gt;</span></span><br><span class="line"><span class="string">            &lt;cart-total :list="list"&gt;&lt;/cart-total&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    components: {</span><br><span class="line">        <span class="string">'cart-title'</span>: CartTitle,</span><br><span class="line">        <span class="string">'cart-list'</span>: CartList,</span><br><span class="line">        <span class="string">'cart-total'</span>: CartTotal</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {},</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>接下来要实现删除按钮的功能</p><p>在项目开发中，在Vue中的父组件向子组件传递数据是通过 <strong>v-bind：属性=“属性值”</strong> 动态赋值，子组件通过 <strong>props：{属性1，属性2，…}</strong> 接收传递过来的数据。</p><p>值得注意的是，Vue中的props传递是单向的，也就是说父子组件的prop之间形成的是一个单向下行绑定： <strong>父级 prop 的更新会向下流动到子组件中，但是反过来则不行</strong> 。</p><p>这么做的原因是： <strong>防止在子组件中更改父级组件的状态</strong></p><p>组件是可复用的，假设该子组件被复用了n次，当某一个组件意外地更改了其接受到的props数据 ----&gt; 意味着，同时更改了父组件中相对应的属性值 ----&gt; 意外地更改其它(n-1)个子组件中的 props数据，引起混乱</p><p>所以我们<strong>不应该在子组件中直接更改其props数据。</strong></p><p>但有存在某些情况：必须对父组件传递过来的props进行转换处理，<strong>利用computed计算属性对数据进行处理。</strong></p></blockquote><blockquote><p>为 <code>&lt;cart-list&gt;</code> 组件中的删除按钮添加删除事件，把对应的商品 id 传进去</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"del"</span> @<span class="attr">click</span>=<span class="string">"del(item.id)"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>根据上面的原则，我们不能直接修改 props 传递过来的 list</p><p>然后把 id 传递给父组件，cart-del 是自定义的事件名称</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: {</span><br><span class="line">    del: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">        <span class="comment">// 把 id 传递给父组件</span></span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">"cart-del"</span>, id)</span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>然后在父组件中的 <code>&lt;cart-list&gt;</code> 子组件中使用 cart-del 事件，同样是自定义一个事件名，通过 <code>$event</code> 来接收子组件传递过来的 id</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cart"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cart-title</span> <span class="attr">:uname</span>=<span class="string">"uname"</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cart-list</span> <span class="attr">:list</span>=<span class="string">"list"</span> @<span class="attr">cart-del</span>=<span class="string">"delCart($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cart-total</span> <span class="attr">:list</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-total</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>然后通过父组件来删除对应的商品</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: {</span><br><span class="line">    delCart: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> index = <span class="keyword">this</span>.list.findIndex(<span class="function">(<span class="params">item</span>)=&gt;</span>{</span><br><span class="line">            <span class="keyword">return</span> item.id == id</span><br><span class="line">        })</span><br><span class="line">        <span class="keyword">this</span>.list.splice(index, <span class="number">1</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在 input 中显示相应的商品数量</p><p>同样，我们会想用 <code>v-model</code> 来实现数量变化，同时去修改 list 列表，<strong>但是这样不行</strong>，因为根据以上的原则，<strong>不应该在子组件中直接更改其props数据</strong>，所以我直接去使用 :value 来获取商品的数量进行显示，然后通过绑定失去焦点的事件去父组件中动态修改 list 数据，如下</p></blockquote><blockquote><p>@blur - 失去焦点事件，里面传了两个参数</p><ul><li><a href="http://item.id" target="_blank" rel="noopener">item.id</a> - 触发该事件的商品 id</li><li>$event - 事件对象，固定名称</li></ul></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"num"</span> <span class="attr">:value</span>=<span class="string">"item.num"</span> @<span class="attr">blur</span>=<span class="string">"changeNum(item.id, $event)"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>在methods 中定义该事件，把 id 和 变化之后的值传递给父组件，让父组件去真正的定义该事件</p><ul><li>id - 商品id</li><li>num - 变化之后的值</li></ul></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">changeNum: <span class="function"><span class="keyword">function</span>(<span class="params">id, event</span>)</span>{</span><br><span class="line">    <span class="comment">// console.log(id, event.target.value);</span></span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">"change-num"</span>, {</span><br><span class="line">        id: id,</span><br><span class="line">        num: event.target.value</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在父组件中使用该自定义事件</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cart-list</span> <span class="attr">:list</span>=<span class="string">"list"</span> @<span class="attr">cart-del</span>=<span class="string">"delCart($event)"</span> @<span class="attr">change-num</span>=<span class="string">"changeNum($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">cart-list</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>在父组件中定义该事件</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">changeNum: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.list.some(<span class="function">(<span class="params">item</span>)=&gt;</span>{</span><br><span class="line">        <span class="keyword">if</span>(item.id == val.id){</span><br><span class="line">            item.num = val.num</span><br><span class="line">            <span class="comment">// 终止遍历</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>最后写一下加减商品数量的逻辑</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"sub(item.id)"</span>&gt;</span>－<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"add(item.id)"</span>&gt;</span>＋<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>同样，不能在子组件中直接修改父组件中的数据</p><p>为了方便，我使用了相同名称的自定义组件，但是我为™添加了不同了 type 类型</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">changeNum: <span class="function"><span class="keyword">function</span>(<span class="params">id, event</span>)</span>{</span><br><span class="line">    <span class="comment">// console.log(id, event.target.value);</span></span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">"change-num"</span>, {</span><br><span class="line">        id: id,</span><br><span class="line">        type: <span class="string">"change"</span>,</span><br><span class="line">        num: event.target.value</span><br><span class="line">    })</span><br><span class="line">},</span><br><span class="line">sub: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">"change-num"</span>, {</span><br><span class="line">        id: id,</span><br><span class="line">        type: <span class="string">"sub"</span>,</span><br><span class="line">        num: event.target.value</span><br><span class="line">    })</span><br><span class="line">},</span><br><span class="line">add: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">"change-num"</span>, {</span><br><span class="line">        id: id,</span><br><span class="line">        type: <span class="string">"add"</span>,</span><br><span class="line">        num: event.target.value  </span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在父组件中使用</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(val.type == <span class="string">"change"</span>){</span><br><span class="line">        <span class="keyword">this</span>.list.some(<span class="function">(<span class="params">item</span>)=&gt;</span>{</span><br><span class="line">            <span class="keyword">if</span>(item.id == val.id){</span><br><span class="line">                item.num = val.num</span><br><span class="line">                <span class="comment">// 终止遍历</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span>(val.type == <span class="string">"sub"</span>){</span><br><span class="line">        <span class="keyword">this</span>.list.some(<span class="function">(<span class="params">item</span>)=&gt;</span>{</span><br><span class="line">            <span class="keyword">if</span>(item.id == val.id){</span><br><span class="line">                item.num -= <span class="number">1</span></span><br><span class="line">                <span class="comment">// 终止遍历</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span>(val.type == <span class="string">"add"</span>){</span><br><span class="line">        <span class="keyword">this</span>.list.some(<span class="function">(<span class="params">item</span>)=&gt;</span>{</span><br><span class="line">            <span class="keyword">if</span>(item.id == val.id){</span><br><span class="line">                item.num += <span class="number">1</span></span><br><span class="line">                <span class="comment">// 终止遍历</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>实现效果图</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@19f8e70e9d5a5c01d97b6ebb0d518bdcf985f6b3/2020/11/03/409eb4cdd374c0344a03316334e0f4d1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue动态组件</title>
    <link href="https://extheor.club/posts/4894629c/index.html"/>
    <id>https://extheor.club/posts/4894629c/index.html</id>
    <published>2020-11-07T15:39:54.373Z</published>
    <updated>2020-11-07T15:52:21.802Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue动态组件"><a class="markdownIt-Anchor" href="#vue动态组件"></a> Vue动态组件</h1><p>通过组件的学习我们已经了解了组件的基本使用，但是我们以前使用的组件都是静态的，也就是说它是固定名字的那一个组件，今天我学习到了动态组件，它可以动态的更改自己的组件名，感觉很方便~</p><blockquote><p>我们可以在组件中通过 :is 来实现动态组件</p></blockquote><blockquote><p>具体代码如下</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(1)"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(2)"</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(3)"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(4)"</span>&gt;</span>个人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> com1 = Vue.component(<span class="string">"index-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;首页内容&lt;/h1&gt;"</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">let</span> com2 = Vue.component(<span class="string">"list-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;列表内容&lt;/h1&gt;"</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">let</span> com3 = Vue.component(<span class="string">"news-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;新闻内容&lt;/h1&gt;"</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">let</span> com4 = Vue.component(<span class="string">"me-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;个人内容&lt;/h1&gt;"</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        com: com1</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        chooseContent: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(id);</span></span><br><span class="line">            <span class="comment">// console.log(this);</span></span><br><span class="line">            <span class="comment">// 通过获取id,选择注册好的组件</span></span><br><span class="line">            <span class="keyword">this</span>.com = <span class="keyword">this</span>.$options.components[<span class="string">"com"</span>+id]</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    components: {</span><br><span class="line">        com1,com2,com3,com4</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>上面代码中的 this.$options 是Vue的自带属性，我们可以通过它来找到我们自定义的组件( com1, com2, com3, com4 )</p></blockquote><blockquote><p>现在就已经实现了基本的动态组件，让我们看一下效果吧</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@36ef8a5f105f66b4c51c853987d1d7fc3721a6c8/2020/11/01/049999e486e537d9bf75dbaf30865e06.png" alt=""></p><blockquote><p>当然，这种动态组件的方法肯定是不常用的，这只是学习阶段记录一下笔记而已，后面可能要使用 Vue 脚手架中的单文件组件(.vue )</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue动画实现</title>
    <link href="https://extheor.club/posts/387564ca/index.html"/>
    <id>https://extheor.club/posts/387564ca/index.html</id>
    <published>2020-11-07T15:39:54.364Z</published>
    <updated>2020-11-07T15:52:21.804Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue动画实现"><a class="markdownIt-Anchor" href="#vue动画实现"></a> Vue动画实现</h1><h2 id="过渡动画"><a class="markdownIt-Anchor" href="#过渡动画"></a> 过渡动画</h2><p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡</p><ul><li>条件渲染 (使用 <code>v-if</code>)</li><li>条件展示 (使用 <code>v-show</code>)</li><li>动态组件</li><li>组件根节点</li></ul><p>这里是一个典型的例子：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 属性name会跟框架追加的类名一致 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"toggleEvent"</span>&gt;</span>切换内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        isShow: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        toggleEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">this</span>.isShow = !<span class="keyword">this</span>.isShow;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: skyblue;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> {</span><br><span class="line">    <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> <span class="comment">/* .fade-leave-active below version 2.1.8 */</span> {</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><meta charset="utf-8"><title>过渡动画</title><style type="text/css">.content {width: 200px;height: 200px;background: skyblue;}.fade-enter-active, .fade-leave-active {  transition: opacity .5s;}.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {  opacity: 0;}</style><meta name="generator" content="Hexo 4.2.1"><style>.github-emoji { position: relative; display: inline-block; width: 1.2em; min-height: 1.2em; overflow: hidden; vertical-align: top; color: transparent; }  .github-emoji > span { position: relative; z-index: 10; }  .github-emoji img, .github-emoji .fancybox { margin: 0 !important; padding: 0 !important; border: none !important; outline: none !important; text-decoration: none !important; user-select: none !important; cursor: auto !important; }  .github-emoji img { height: 1.2em !important; width: 1.2em !important; position: absolute !important; left: 50% !important; top: 50% !important; transform: translate(-50%, -50%) !important; user-select: none !important; cursor: auto !important; } .github-emoji-fallback { color: inherit; } .github-emoji-fallback img { opacity: 0 !important; }</style><link rel="alternate" href="/atom.xml" title="码小余の博客" type="application/atom+xml"><div id="app"><!-- 属性name会跟框架追加的类名一致 --><transition name="fade"><div v-if="isShow" class="content"></div></transition><button type="button" @click="toggleEvent">切换内容</button></div><script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script><script type="text/javascript">var app = new Vue({el: "#app",data: {isShow: true},methods: {toggleEvent: function(){this.isShow = !this.isShow;}}})</script><script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"log":false,"model":{"jsonPath":"/live2dw/assets/z16.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":false},"react":{"opacity":0.7}});</script><p>当插入或删除包含在 <code>transition</code> 组件中的元素时，Vue 将会做以下处理：</p><ol><li>自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名。</li><li>如果过渡组件提供了 <a href="https://cn.vuejs.org/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">JavaScript 钩子函数</a>，这些钩子函数将在恰当的时机被调用。</li><li>如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作 (插入/删除) 在下一帧中立即执行。(注意：此指浏览器逐帧动画机制，和 Vue 的 <code>nextTick</code> 概念不同)</li></ol><h3 id="过渡的类名"><a class="markdownIt-Anchor" href="#过渡的类名"></a> 过渡的类名</h3><p>在进入/离开的过渡中，会有 6 个 class 切换。</p><ol><li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li><li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li><li><code>v-enter-to</code>：<strong>2.1.8 版及以上</strong>定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。</li><li><code>v-leave</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li><code>v-leave-to</code>：<strong>2.1.8 版及以上</strong>定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cn.vuejs.org/images/transition.png" alt="Transition Diagram"></p><p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>，则 `v-` 是这些类名的默认前缀。如果你使用了</code>，那么 <code>v-enter</code> 会替换为 <code>my-transition-enter</code>。</p><p><code>v-enter-active</code> 和 <code>v-leave-active</code> 可以控制进入/离开过渡的不同的缓和曲线。</p><h3 id="css动画"><a class="markdownIt-Anchor" href="#css动画"></a> CSS动画</h3><p>CSS 动画用法同 CSS 过渡，区别是在动画中 <code>v-enter</code> 类名在节点插入 DOM 后不会立即删除，而是在 <code>animationend</code> 事件触发时删除。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"toggleEvent"</span>&gt;</span>切换按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"bounce"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris facilisis enim libero, at lacinia diam fermentum id. Pellentesque habitant morbi tristique senectus et netus.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        show: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        toggleEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">this</span>.show = !<span class="keyword">this</span>.show;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bounce-enter-active</span> {</span><br><span class="line">    <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.bounce-leave-active</span> {</span><br><span class="line">    <span class="comment">/* reverse -- 动画反转 */</span></span><br><span class="line">    <span class="attribute">animation</span>: bounce-in .<span class="number">5s</span> reverse;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">@keyframes</span> bounce-in{</span><br><span class="line">    0% {</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    50% {</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">    }</span><br><span class="line">    100% {</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/动画01.gif"><h3 id="自定义过渡的类名"><a class="markdownIt-Anchor" href="#自定义过渡的类名"></a> 自定义过渡的类名</h3><p>我们可以通过以下 attribute 来自定义过渡类名：</p><ul><li><code>enter-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code> (2.1.8+)</li><li><code>leave-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code> (2.1.8+)</li></ul><p>他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 <a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">Animate.css</a> 结合使用十分有用。</p><p>示例：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/animate.css@3.5.1"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"toggleEvent"</span>&gt;</span>切换按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"custom-classes-transition"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">enter-active-class</span>=<span class="string">"animated tada"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">leave-active-class</span>=<span class="string">"animated bounceOutRight"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        show: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        toggleEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">this</span>.show = !<span class="keyword">this</span>.show;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/动画02.gif"><h3 id="同时使用过渡和动画"><a class="markdownIt-Anchor" href="#同时使用过渡和动画"></a> 同时使用过渡和动画</h3><p>Vue 为了知道过渡的完成，必须设置相应的事件监听器。它可以是 <code>transitionend</code> 或 <code>animationend</code>，这取决于给元素应用的 CSS 规则。如果你使用其中任何一种，Vue 能自动识别类型并设置监听。</p><p>但是，在一些场景中，你需要给同一个元素同时设置两种过渡动效，比如 <code>animation</code> 很快的被触发并完成了，而 <code>transition</code> 效果还没结束。在这种情况中，你就需要使用 <code>type</code> attribute 并设置 <code>animation</code> 或 <code>transition</code> 来明确声明你需要 Vue 监听的类型。</p><h3 id="显性的过渡持续时间"><a class="markdownIt-Anchor" href="#显性的过渡持续时间"></a> 显性的过渡持续时间</h3><blockquote><p>2.2.0新增</p></blockquote><p>在很多情况下，Vue 可以自动得出过渡效果的完成时机。默认情况下，Vue 会等待其在过渡效果的根元素的第一个 <code>transitionend</code> 或 <code>animationend</code> 事件。然而也可以不这样设定——比如，我们可以拥有一个精心编排的一系列过渡效果，其中一些嵌套的内部元素相比于过渡效果的根元素有延迟的或更长的过渡效果。</p><p>在这种情况下你可以用 `` 组件上的 <code>duration</code> prop 定制一个显性的过渡持续时间 (以毫秒计)：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">"1000"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>你也可以定制进入和移出的持续时间：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">"{ enter: 500, leave: 800 }"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue插槽</title>
    <link href="https://extheor.club/posts/c7646f1a/index.html"/>
    <id>https://extheor.club/posts/c7646f1a/index.html</id>
    <published>2020-11-07T15:39:54.358Z</published>
    <updated>2020-11-07T15:52:21.812Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue插槽"><a class="markdownIt-Anchor" href="#vue插槽"></a> Vue插槽</h1><p>和 HTML 元素一样，我们经常需要向一个组件传递内容，像这样：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alert-com1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>小心陈老师<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">alert-com1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"alert-com1"</span>,{</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class="alert"&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="content"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>但是你这样写页面可能会什么都不会出现</p><blockquote><p>你需要在 <code>template</code> 里面写上Vue自定义的 <code>&lt;slot&gt;</code> 元素</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"alert-com1"</span>,{</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class="alert"&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="content"&gt;</span></span><br><span class="line"><span class="string">&lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>这时页面就会出现在 <code>&lt;alert-com1&gt;</code> 自定义组件中写入的元素内容了。</p><blockquote><p>slot里面的内容变量只跟父元素的属性有关，而跟自身的属性并没有关系，比如像这样写</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-com1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>小心陈老师,{{content}},{{abc}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">alert-com1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"alert-com1"</span>,{</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class="alert"&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;温馨提示&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="content"&gt;</span></span><br><span class="line"><span class="string">                &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            abc: <span class="string">"ABC"</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        content: <span class="string">"小心熊出没"</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>页面内容如下</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@1897acd8ad61e33a37103218bee69f2f3852948a/2020/11/01/31558389b0c1acb4f4a54431052087f1.png" alt="image-20201101093118703"></p><blockquote><p>只会出现父元素中的小心熊出没，而没有出现组件自身返回的内容，让我们看一下控制台的错误信息</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@8b6e6489fe0c098ee02feae4e37f3c4b22d37809/2020/11/01/b713d43efaef3a4e67d10870802971ba.png" alt="image-20201101093327872"></p><h2 id="具名插槽"><a class="markdownIt-Anchor" href="#具名插槽"></a> 具名插槽</h2><blockquote><p>基本用法</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>标题信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>底部信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="具名插槽的新语法"><a class="markdownIt-Anchor" href="#具名插槽的新语法"></a> 具名插槽的新语法</h3><blockquote><p>以下是具名插槽的新语法</p><p>v-slot:header 替换 slot=“header”，并且只能在 template 标签中使用，这和旧语法完全不同</p><p>跟 <code>v-on</code> 和 <code>v-bind</code> 一样，<code>v-slot</code> 也有缩写，即把参数之前的所有内容 (<code>v-slot:</code>) 替换为字符 <code>#</code>。例如 <code>v-slot:header</code> 可以被重写为 <code>#header</code>：</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"base-layout"</span>,{</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;header&gt;</span></span><br><span class="line"><span class="string">            &lt;slot name="header"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;/header&gt;</span></span><br><span class="line"><span class="string">            &lt;main&gt;</span></span><br><span class="line"><span class="string">            &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;/main&gt;</span></span><br><span class="line"><span class="string">            &lt;footer&gt;</span></span><br><span class="line"><span class="string">            &lt;slot name="footer"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;/footer&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="作用域插槽"><a class="markdownIt-Anchor" href="#作用域插槽"></a> 作用域插槽</h2><ul><li>应用场景：<strong>父组件对子组件的内容进行加工处理</strong></li></ul><blockquote><p>使用方式</p><p>作用域插槽，需要在 <code>&lt;slot&gt;</code> 标签中自定义绑定属性，然后赋值为 对应的元素</p><p>在 <code>&lt;fruit-list&gt;</code> 标签中则需要用 <code>&lt;template&gt;</code> 标签，并且写上 <code>slot-scope</code> 属性，这是固定的，但是Ta的值是自定义的，比如我自定义为 <code>slotProps</code>，使用这个 <code>slotProps</code> 可以获取到 <code>info</code> ，也就是 <code>item</code> ，item就是 list 数组中的每一项，直接就能拿到 name 值了！</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"fruit-list"</span>, {</span><br><span class="line">    props: [<span class="string">"list"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;li :key="item.id" v-for="item in list"&gt;</span></span><br><span class="line"><span class="string">            &lt;slot :info="item"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        list: [</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">1</span>,</span><br><span class="line">                name: <span class="string">"apple"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">2</span>,</span><br><span class="line">                name: <span class="string">"orange"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">3</span>,</span><br><span class="line">                name: <span class="string">"banana"</span></span><br><span class="line">            },</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fruit-list</span> <span class="attr">:list</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">"slotProps.info.id==2"</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span>{{ slotProps.info.name }}<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>{{ slotProps.info.name }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fruit-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@99cb9f47bb40e0267acdb9cfeb80765d31db2bf1/2020/11/02/7941166e058725834e97c55c7673db7c.png" alt="image-20201102223540576"></p><h3 id="作用域插槽的新语法"><a class="markdownIt-Anchor" href="#作用域插槽的新语法"></a> 作用域插槽的新语法</h3><blockquote><p>和具名插槽新语法一样，只是改了 template 标签中了 v-slot，但是Ta<strong>不仅仅</strong>只是能在 template 标签中使用，Ta可以在任何组件上使用，这和具名插槽不同</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fruit-list</span> <span class="attr">:list</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">"slotProps.info.id==2"</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span>{{ slotProps.info.name }}<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>{{ slotProps.info.name }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fruit-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>以下是更简化版</p><p>:default 不写就是默认</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fruit-list</span> <span class="attr">:list</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">"slotProps.info.id==2"</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span>{{ slotProps.info.name }}<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>{{ slotProps.info.name }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fruit-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>作用域插槽的内部工作原理是将你的插槽内容包裹在一个拥有单个参数的函数里：</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">slotProps</span>) </span>{</span><br><span class="line">  <span class="comment">// 插槽内容</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>这意味着 <code>v-slot</code> 的值实际上可以是任何能够作为函数定义中的参数的 JavaScript 表达式。所以在支持的环境下 (<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">单文件组件</a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9" target="_blank" rel="noopener">现代浏览器</a>)，你也可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#%E8%A7%A3%E6%9E%84%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener">ES2015 解构</a>来传入具体的插槽 prop，如下：</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;fruit-list :list=<span class="string">"list"</span>&gt;</span><br><span class="line">        &lt;template v-slot=<span class="string">"{ info }"</span>&gt;</span><br><span class="line">            {{info}}</span><br><span class="line">            &lt;strong v-<span class="keyword">if</span>=<span class="string">"info.id==2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"current"</span>&gt;{{ info.name }}&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">            &lt;span v-else&gt;{{ info.name }}&lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>fruit-list&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>这样可以使模板更简洁，尤其是在该插槽提供了多个 prop 的时候。它同样开启了 prop 重命名等其它可能，例如将 <code>info</code> 重命名为 <code>item</code>：</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fruit-list</span> <span class="attr">:list</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">"{ info: item }"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">"item.id==2"</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span>{{ item.name }}<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>{{ item.name }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fruit-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>但是需要注意的是，作用域插槽简写和具名插槽简写不能混用，混用会报错</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue --- 侧边栏案例</title>
    <link href="https://extheor.club/posts/f7bf33eb/index.html"/>
    <id>https://extheor.club/posts/f7bf33eb/index.html</id>
    <published>2020-11-07T15:39:54.357Z</published>
    <updated>2020-11-07T15:52:21.801Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue-侧边栏案例"><a class="markdownIt-Anchor" href="#vue-侧边栏案例"></a> Vue — 侧边栏案例</h1><blockquote><p>使用 :class 的方式</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜单栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">*{</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">}</span><br><span class="line"><span class="css"><span class="selector-class">.page</span>{</span></span><br><span class="line">width: 100vw;</span><br><span class="line">height: 100vh;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#efefef</span>;</span></span><br><span class="line">position: fixed;</span><br><span class="line">left: 0;</span><br><span class="line">top: 0;</span><br><span class="line">}</span><br><span class="line"><span class="css"><span class="selector-class">.rMenu</span>{</span></span><br><span class="line">width: 50vw;</span><br><span class="line">height: 100vh;</span><br><span class="line">position: fixed;</span><br><span class="line">left: 0;</span><br><span class="line">top: 0;</span><br><span class="line">background: skyblue;</span><br><span class="line">transform: translateX(100vw);</span><br><span class="line"><span class="css"><span class="selector-tag">transition</span>: <span class="selector-tag">transform</span> 0<span class="selector-class">.5s</span> <span class="selector-tag">ease-in-out</span>;</span></span><br><span class="line">}</span><br><span class="line"><span class="css"><span class="selector-class">.active</span>{</span></span><br><span class="line">transform: translateX(50vw);</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">首页</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"toggleMenu"</span>&gt;</span>切换侧边栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rMenu"</span> <span class="attr">:class</span>=<span class="string">"{active:isShow}"</span>&gt;</span></span><br><span class="line">侧边栏</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">el: <span class="string">"#app"</span>,</span></span><br><span class="line">data: {</span><br><span class="line"><span class="actionscript">isShow: <span class="literal">false</span></span></span><br><span class="line">},</span><br><span class="line">methods: {</span><br><span class="line"><span class="actionscript">toggleMenu: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.isShow = !<span class="keyword">this</span>.isShow;</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用 :style 的方式</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜单栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">*{</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">}</span><br><span class="line"><span class="css"><span class="selector-class">.page</span>{</span></span><br><span class="line">width: 100vw;</span><br><span class="line">height: 100vh;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#efefef</span>;</span></span><br><span class="line">position: fixed;</span><br><span class="line">left: 0;</span><br><span class="line">top: 0;</span><br><span class="line">}</span><br><span class="line"><span class="css"><span class="selector-class">.rMenu</span>{</span></span><br><span class="line">width: 50vw;</span><br><span class="line">height: 100vh;</span><br><span class="line">position: fixed;</span><br><span class="line">left: 0;</span><br><span class="line">top: 0;</span><br><span class="line">background: skyblue;</span><br><span class="line"><span class="css"><span class="selector-tag">transition</span>: <span class="selector-tag">transform</span> 0<span class="selector-class">.5s</span> <span class="selector-tag">ease-in-out</span>;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">首页</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"toggleMenu"</span>&gt;</span>切换侧边栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rMenu"</span> <span class="attr">:style</span>=<span class="string">"{transform: 'translateX('+menuWidth+'vw)'}"</span>&gt;</span></span><br><span class="line">侧边栏</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">el: <span class="string">"#app"</span>,</span></span><br><span class="line">data: {</span><br><span class="line">menuWidth: 100</span><br><span class="line">},</span><br><span class="line">methods: {</span><br><span class="line"><span class="actionscript">toggleMenu: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(<span class="keyword">this</span>.menuWidth == <span class="number">100</span>){</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.menuWidth = <span class="number">50</span></span></span><br><span class="line"><span class="actionscript">}<span class="keyword">else</span>{</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.menuWidth = <span class="number">100</span>;</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>效果如下：</p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/侧边栏动效.gif"><blockquote><p>使用<code>&lt;transition&gt;&lt;/transition&gt;</code> 过渡动画组件</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜单栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">*{</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">}</span><br><span class="line"><span class="css"><span class="selector-class">.page</span>{</span></span><br><span class="line">width: 100vw;</span><br><span class="line">height: 100vh;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#efefef</span>;</span></span><br><span class="line">position: fixed;</span><br><span class="line">left: 0;</span><br><span class="line">top: 0;</span><br><span class="line">}</span><br><span class="line"><span class="css"><span class="selector-class">.rMenu</span>{</span></span><br><span class="line">width: 50vw;</span><br><span class="line">height: 100vh;</span><br><span class="line">position: fixed;</span><br><span class="line">left: 0;</span><br><span class="line">top: 0;</span><br><span class="line">background: skyblue;</span><br><span class="line">transform: translateX(50vw);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.slideRight-enter-active</span>, <span class="selector-class">.slideRight-leave-active</span> {</span></span><br><span class="line"><span class="css"><span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease-in-out</span>;</span></span><br><span class="line">}</span><br><span class="line"><span class="css"><span class="selector-class">.slideRight-enter</span>, <span class="selector-class">.slideRight-leave-to</span> {</span></span><br><span class="line">transform: translateX(100vw);</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">首页</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"toggleMenu"</span>&gt;</span>切换侧边栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"slideRight"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rMenu"</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">侧边栏</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">el: <span class="string">"#app"</span>,</span></span><br><span class="line">data: {</span><br><span class="line"><span class="actionscript">isShow: <span class="literal">false</span></span></span><br><span class="line">},</span><br><span class="line">methods: {</span><br><span class="line"><span class="actionscript">toggleMenu: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.isShow = !<span class="keyword">this</span>.isShow;</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/侧边栏动效02.gif">]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue版todolist案例</title>
    <link href="https://extheor.club/posts/ca657192/index.html"/>
    <id>https://extheor.club/posts/ca657192/index.html</id>
    <published>2020-11-07T15:39:54.346Z</published>
    <updated>2020-11-07T15:52:21.813Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue版todolist案例"><a class="markdownIt-Anchor" href="#vue版todolist案例"></a> Vue版todolist案例</h1><blockquote><p>todolist – 记录你的待办事项</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue版todolist案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">            *{</span><br><span class="line">                margin: 0;</span><br><span class="line">                padding: 0;</span><br><span class="line">                box-sizing: border-box;</span><br><span class="line">            }</span><br><span class="line"><span class="css">            <span class="selector-id">#app</span>{</span></span><br><span class="line">                width: 100vw;</span><br><span class="line">                height: 100vh;</span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#CDCDCD</span>;</span></span><br><span class="line">            }</span><br><span class="line"><span class="css">            <span class="comment">/* 头部样式 */</span></span></span><br><span class="line">            header{</span><br><span class="line">                height: 50px;</span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(47,47,47,0<span class="selector-class">.98</span>);</span></span><br><span class="line">                line-height: 50px;</span><br><span class="line">            }</span><br><span class="line">            section{</span><br><span class="line">                width: 80vw;</span><br><span class="line">                margin: 0 auto;</span><br><span class="line">            }</span><br><span class="line">            label{</span><br><span class="line">                float: left;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#DDD</span>;</span></span><br><span class="line">                font-size: 24px;</span><br><span class="line">                font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;</span><br><span class="line">            }</span><br><span class="line">            section &gt; input{</span><br><span class="line">                height: 24px;</span><br><span class="line">                width: 60%;</span><br><span class="line">                float: right;</span><br><span class="line">                margin-top: 15px;</span><br><span class="line">                text-indent: 10px;</span><br><span class="line">                border-radius: 5px;</span><br><span class="line"><span class="css">                <span class="selector-tag">box-shadow</span>: 0 1<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(255,255,255,0<span class="selector-class">.24</span>), 0 1<span class="selector-tag">px</span> 6<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.45</span>) <span class="selector-tag">inset</span>;</span></span><br><span class="line">                border: none;</span><br><span class="line">            }</span><br><span class="line"><span class="css">            <span class="comment">/* 内容样式 */</span></span></span><br><span class="line">            h2{</span><br><span class="line">                position: relative;</span><br><span class="line">                margin: 20px 0;</span><br><span class="line">            }</span><br><span class="line"><span class="css">            <span class="selector-class">.todocount</span>{</span></span><br><span class="line">                display: inline-block;</span><br><span class="line">                position: absolute;</span><br><span class="line">                right: 5px;</span><br><span class="line">                top: 2px;</span><br><span class="line">                height: 20px;</span><br><span class="line">                padding: 0 5px;</span><br><span class="line">                border-radius: 20px;</span><br><span class="line">                line-height: 22px;</span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#E6E6FA</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">                font-size: 14px;</span><br><span class="line">                text-align: center;</span><br><span class="line">            }</span><br><span class="line">            ol{</span><br><span class="line">                padding: 0;</span><br><span class="line">                list-style: none;</span><br><span class="line">            }</span><br><span class="line">            ol li{</span><br><span class="line">                height: 32px;</span><br><span class="line">                line-height: 32px;</span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">                position: relative;</span><br><span class="line">                margin-bottom: 10px;</span><br><span class="line">                padding: 0 45px;</span><br><span class="line">                border-radius: 3px;</span><br><span class="line"><span class="css">                <span class="selector-tag">border-left</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#629A9C</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">box-shadow</span>: 0 1<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.07</span>);</span></span><br><span class="line">            }</span><br><span class="line">            li &gt; input{</span><br><span class="line">                position: absolute;</span><br><span class="line">                top: 6px;</span><br><span class="line">                left: 10px;</span><br><span class="line">                width: 22px;</span><br><span class="line">                height: 22px;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">            }</span><br><span class="line">            li &gt; a{</span><br><span class="line">                position: absolute;</span><br><span class="line">                right: 5px;</span><br><span class="line">                top: 2px;</span><br><span class="line">                display: inline-block;</span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#CCC</span>;</span></span><br><span class="line">                width: 25px;</span><br><span class="line">                height: 25px;</span><br><span class="line">                border-radius: 14px;</span><br><span class="line"><span class="css">                <span class="selector-tag">border</span>: 6<span class="selector-tag">px</span> <span class="selector-tag">double</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">                line-height: 14px;</span><br><span class="line">                text-align: center;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">                font-weight: bold;</span><br><span class="line">                font-size: 14px;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">            }</span><br><span class="line">            footer {</span><br><span class="line">                text-align: center;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">            }</span><br><span class="line">            footer &gt; a{</span><br><span class="line">                text-decoration: none;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">            }</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 首部 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>ToDoList<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- autocomplete="off" -- 禁用自动完成 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"addTodo"</span>  @<span class="attr">keydown.enter</span>=<span class="string">"addTodoEvent"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">id</span>=<span class="string">"title"</span> <span class="attr">placeholder</span>=<span class="string">"添加ToDo"</span> <span class="attr">required</span>=<span class="string">"required"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- {{ todoings }}</span></span><br><span class="line"><span class="comment">{{ checkTodos }} --&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">                    正在进行</span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"todocount"</span>&gt;</span>{{ todoingsLength }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todoing,index in todoings"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 将选中的任务依次添加到checkTodos数组中 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> @<span class="attr">click</span>=<span class="string">"toDoEvent(index)"</span> <span class="attr">v-model</span>=<span class="string">"checkTodos"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"todoing"</span> <span class="attr">:value</span>=<span class="string">"todoing"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ todoing }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"removeTodoEvent(index)"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">:data-id</span>=<span class="string">"index"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">                    已经完成</span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"todocount"</span>&gt;</span>{{ checkTodosLength }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"checkTodo,index in checkTodos"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 将选中的任务依次添加到todoings数组中 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> @<span class="attr">click</span>=<span class="string">"DotoEvent(index)"</span> <span class="attr">v-model</span>=<span class="string">"todoings"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"done"</span> <span class="attr">:value</span>=<span class="string">"checkTodo"</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ checkTodo }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"removeDotoEvent(index)"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">:data-id</span>=<span class="string">"index"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">                ©2020 Continue.Run</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>clear<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">                el: <span class="string">"#app"</span>,</span></span><br><span class="line">                data: {</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 添加todo - 把输入框的值和adTodo绑定在了一起，输入框的值变了，addTodo就会改变</span></span></span><br><span class="line"><span class="actionscript">                    addTodo: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 正在进行的任务数组，由addTodo添加数据</span></span></span><br><span class="line"><span class="actionscript">                    todoings: [<span class="string">"用Vue完成todolist案例"</span>,<span class="string">"第二条"</span>],</span></span><br><span class="line">                    checkTodos: [],</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 是否显示正在进行的ToDo</span></span></span><br><span class="line"><span class="actionscript">                    showTodoing: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 是否显示已经完成的ToDo</span></span></span><br><span class="line"><span class="actionscript">                    showTodone: <span class="literal">true</span></span></span><br><span class="line">                },</span><br><span class="line">                computed: {</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 返回正在进行(todoings)数组的长度的计算函数</span></span></span><br><span class="line"><span class="actionscript">                    todoingsLength: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> <span class="keyword">this</span>.todoings.length;</span></span><br><span class="line">                    },</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 返回已经完成(checkTodos)数组的长度的计算函数</span></span></span><br><span class="line"><span class="actionscript">                    checkTodosLength: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> <span class="keyword">this</span>.checkTodos.length;</span></span><br><span class="line">                    }</span><br><span class="line">                },</span><br><span class="line">                methods: {</span><br><span class="line"><span class="actionscript">                    addTodoEvent: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"添加ToDo"</span>);</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 在正在进行添加todo</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.todoings.push(<span class="keyword">this</span>.addTodo)</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 添加完成之后清空输入框的文字</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.addTodo = <span class="string">""</span></span></span><br><span class="line">                    },</span><br><span class="line"><span class="actionscript">                    removeTodoEvent: <span class="function"><span class="keyword">function</span><span class="params">(index)</span></span>{</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 把对应的索引传过来</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 删除正在进行(todoings)中的Todo</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"删除ToDo"</span>);</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 删除todoings中的指定内容</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.todoings.splice(index,<span class="number">1</span>)</span></span><br><span class="line">                    },</span><br><span class="line"><span class="actionscript">                    removeDotoEvent: <span class="function"><span class="keyword">function</span><span class="params">(index)</span></span>{</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 把对应的索引传过来</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 删除正在进行(todoings)中的Todo</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"删除ToDo"</span>);</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 删除todoings中的指定内容</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.checkTodos.splice(index,<span class="number">1</span>)</span></span><br><span class="line">                    },</span><br><span class="line"><span class="actionscript">                    toDoEvent: <span class="function"><span class="keyword">function</span><span class="params">(index)</span></span>{</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 从正在进行移到已经完成</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// this.checkTodos.push(this.todoings[index])</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// this.todoings.splice(index,1)</span></span></span><br><span class="line">                    },</span><br><span class="line"><span class="actionscript">                    DotoEvent: <span class="function"><span class="keyword">function</span><span class="params">(index)</span></span>{</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 从已经完成移到正在进行</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// this.todoings.push(this.checkTodos[index])</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// this.checkTodos.splice(index,1)</span></span></span><br><span class="line">                    }</span><br><span class="line">                },</span><br><span class="line">            })</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>效果图：</p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/todolist.gif">]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.set( target, propertyName/index, value )</title>
    <link href="https://extheor.club/posts/854d07da/index.html"/>
    <id>https://extheor.club/posts/854d07da/index.html</id>
    <published>2020-11-07T15:39:54.339Z</published>
    <updated>2020-11-07T15:52:21.795Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vueset-target-propertynameindex-value"><a class="markdownIt-Anchor" href="#vueset-target-propertynameindex-value"></a> Vue.set( target, propertyName/index, value )</h1><ul><li><p><strong>参数</strong>：</p><ul><li><code>{Object | Array} target</code></li><li><code>{string | number} propertyName/index</code></li><li><code>{any} value</code></li></ul></li><li><p><strong>返回值</strong>：设置的值。</p></li><li><p><strong>用法</strong>：</p><p>向响应式对象中添加一个 property，并确保这个新 property 同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新 property，因为 Vue 无法探测普通的新增 property (比如 <code>this.myObject.newProperty = 'hi'</code>)</p><p>注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</p></li></ul><blockquote><p>vm.$set 是全局 <code>Vue.set</code> 的<strong>别名</strong>。</p></blockquote><blockquote><p>代码示例</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        list: [<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"banana"</span>],</span><br><span class="line">        info: {</span><br><span class="line">            name: <span class="string">"lisi"</span>,</span><br><span class="line">            age: <span class="number">12</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="comment">// Vue.set(app.list, 1, "lemon")</span></span><br><span class="line">app.$<span class="keyword">set</span>(app.list, 1, "lemon")</span><br><span class="line"></span><br><span class="line">// Vue.<span class="keyword">set</span>(app.info, "gender", "female")</span><br><span class="line">app.$<span class="keyword">set</span>(app.info, "gender", "female")</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>{{item}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{item}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>无论是使用 Vue.set 或 app.set 得到的结果总是一样的</p><p>我们可以使用这种方法来响应式的修改某个列表或对象</p><p>或者说要想响应式的修改某个列表或对象只能使用这种方法，否则修改无效</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue CLI</title>
    <link href="https://extheor.club/posts/56760226/index.html"/>
    <id>https://extheor.club/posts/56760226/index.html</id>
    <published>2020-11-07T15:39:54.338Z</published>
    <updated>2020-11-07T15:52:21.798Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue-cli"><a class="markdownIt-Anchor" href="#vue-cli"></a> Vue CLI</h1><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><blockquote><p>Node 版本要求</p><p>Vue CLI 4.x 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> v8.9 或更高版本 (推荐 v10 以上)。你可以使用 <a href="https://github.com/tj/n" target="_blank" rel="noopener">n</a>，<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a> 在同一台电脑中管理多个 Node 版本。</p></blockquote><p>可以使用下列任一命令安装这个新的包：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></tbody></table></figure><p>你还可以用这个命令来检查其版本是否正确：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></tbody></table></figure><h3 id="升级"><a class="markdownIt-Anchor" href="#升级"></a> 升级</h3><p>如需升级全局的 Vue CLI 包，请运行：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm update -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn global upgrade --latest @vue/cli</span><br></pre></td></tr></tbody></table></figure><h2 id="创建一个项目"><a class="markdownIt-Anchor" href="#创建一个项目"></a> 创建一个项目</h2><p>运行以下命令来创建一个新项目：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create testapp</span><br></pre></td></tr></tbody></table></figure><p>终端会弹出以下信息</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@8bfb92b526b519ffe1938e8ca22938375b6239d4/2020/11/01/bf297468ae97a471df7e56813802e848.png" alt="image-20201101103746870"></p><ul><li>Default ([Vue 2] babel, eslint) - 选择 Vue2</li><li>Default (Vue 3 Preview) ([Vue 3] babel, eslint) - 选择 Vue3</li><li>Manually select features - 手动选择</li></ul><blockquote><p>我选择第三种，手动选择，出现以下界面</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@c447c1b4a72ce73f4c6363e8f779217ebdaf4973/2020/11/01/469cd9e8ed8d08e8521f4f1580e0433f.png" alt="image-20201101104044392"></p><p>需要使用/取消哪些功能，按空格进行使用/取消即可</p><ul><li>Choose Vue version - 选择 Vue 版本</li><li>Babel - 编译</li><li>TypeScript - TypeScript语言</li><li>Progressive Web App (PWA) Support - PWA技术支持</li><li>Router - 路由</li><li>Vuex - Vuex</li><li>CSS Pre-processors - CSS 预处理器</li><li>Linter / Formatter - 代码格式化警告</li><li>Unit Testing - 单元测试</li><li>E2E Testing - 端对端的测试</li></ul><blockquote><p>我只选择了 Babel</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@5235d511b4b4b48ceca4afbae756808101380c1e/2020/11/01/0e4ecce062423baedd119b9745100ff9.png" alt="image-20201101104952079"></p><ul><li>In dedicated config files - 使用单独的文件</li><li>In package.json - 将所有的文件都配置在 package.json 文件中</li></ul><blockquote><p>我选择 In package.json</p></blockquote><p>然后后面的配置直接写 Yes ,下面随便写个名，我写的 esayconfig</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f8184cd250d01401831f2e125b27a52f7dfdbbf0/2020/11/01/3866858d7c5522cea2a7ee9361099f47.png" alt="image-20201101105518519"></p><blockquote><p>等待安装即可…</p></blockquote><blockquote><p>我安装了五分钟</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@0cea213257a4254be1ad4603d3e68562c1d55a44/2020/11/01/c63f0cfa59e181754d7e3fbc4cb27618.png" alt="image-20201101111148662"></p><p>安装好之后，我们看一下它安装了哪些文件，它的目录结构是什么样的</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@ab2506765cfda7ad4ca3fc24abf2a4dfd4e6d50e/2020/11/01/6cd2b5a8b34c6dd6e50a552a609515d1.png" alt="image-20201101110205468"></p><ul><li><p>node_modules - 安装的依赖包，里面有 754 个项目</p></li><li><p>public - 存放静态文件的目录</p></li><li><p>src-  工作的地方！</p><ul><li>注意里面的 .vue 文件不能直接在浏览器运行，需要通过 vue-cli 编译成 .html 之后才能运行</li></ul></li></ul><p>按照提示执行命令试一下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> testapp</span><br><span class="line">npm run server</span><br></pre></td></tr></tbody></table></figure><p>提示服务开启成功</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@1fa39c30b936f7e975189297d8c59886b6c60009/2020/11/01/2f597c5501a08a501493aea056b2eead.png" alt="image-20201101111416089"></p><p>去浏览器访问看看吧</p><blockquote><p>如果想要对代码进行编译，那就使用下面的命令吧</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></tbody></table></figure><blockquote><p>会生成一个 dist 目录，这是可以放到服务器上的代码目录</p></blockquote><blockquote><p>需要注意的是，现在这个项目中的 html 文件不能运行，是因为路径没有改，这个后面可能才会讲怎么改吧，先在这里放着吧</p></blockquote><h2 id="使用图形化界面"><a class="markdownIt-Anchor" href="#使用图形化界面"></a> 使用图形化界面</h2><p>你也可以通过 <code>vue ui</code> 命令以图形化界面创建和管理项目：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></tbody></table></figure><p>上述命令会打开一个浏览器窗口，并以图形化界面将你引导至项目创建的流程。😂</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@828f78a49d32b8366deda6020243e71e2688c053/2020/11/01/f2c144a08d192a4db06b7028d3b29f98.png" alt="image-20201101113518216"></p><p>点击创建</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@48b881e1e397f32923334925193e244459ea2536/2020/11/01/854c23682ff09d675c649583ca8360c1.png" alt="image-20201101113641333"></p><p>点击在此创建新项目</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@2a77ef5eadb75092dbae53e064e7ffeb8876398d/2020/11/01/7ba27f59e2ab31cfbbac3f25647007a2.png" alt="image-20201101113735577"></p><p>填好之后点击下一步</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@6c61dbdc3fda4ba8f491694e180e6bafe5e841ee/2020/11/01/ddc89f16c177aa803b21c435ee6e5257.png" alt="image-20201101113835524"></p><p>选择手动，点击下一步</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@d8e0db8419a931110f20267ce7ba416fd6ee9512/2020/11/01/ec9fc164ee6e902778810890a3c2e36c.png" alt="image-20201101113936297"></p><p>我只选择 Babel，点击创建项目</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@8b0f739aa4a267e96c4b017e95de98d7b4c24e87/2020/11/01/d9a7b3f0414f7c57ac7f60f450fedf39.png" alt="image-20201101114044489"></p><p>直接点击创建项目，不保存预设</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@d6224afb9def5bf51976666717b0aee5eed2f39c/2020/11/01/c3aaf57fbc2ed360cd8e514e2f8cc7c5.png" alt="image-20201101114203240"></p><p>等待即可…</p><p>创建完成之后会出现以下界面</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@aaf0e0c7c6c76607894359ce5d03f620543ef372/2020/11/01/89323815a1df1bcdc07e506c47a5624b.png" alt="image-20201101115340315"></p><p>点击配置，修改公共路径为 <code>./</code> ，这样就能使 .html 文件可以正常访问了，点击保存修改</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@82132bfbf5f12f51327a321a83d5e6834b0b3fc4/2020/11/01/3670c198f093d3fefc506a502eb4411e.png" alt="image-20201101115530696"></p><p>点击任务，点击 build 进行编译并压缩（用于生产环境），然后点击运行</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@93df8459e81107a68e82145ca2efefd870a2d7a0/2020/11/01/3a000bf97b15adad914f053357cbb525.png" alt="image-20201101115735490"></p><p>等待即可…</p><h2 id="vue-脚手架的自定义配置"><a class="markdownIt-Anchor" href="#vue-脚手架的自定义配置"></a> Vue 脚手架的自定义配置</h2><h3 id="1通过-packagejson-项目"><a class="markdownIt-Anchor" href="#1通过-packagejson-项目"></a> 1.通过 package.json 项目</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//必须是符合规范的json语法</span></span><br><span class="line">"vue" : {</span><br><span class="line">    "devserver" : {</span><br><span class="line">        "port" : "8888", // 端口号</span><br><span class="line">        "open" : true // 服务启动后自动打开浏览器</span><br><span class="line">    }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>: 不推荐使用这种配置方式。因为package.json主要用来管理包的配置信息;为了方便维护，推荐将vue脚手架相关的配置，单独定义到 <code>vue.config.js</code> 配置文件中。</p><h3 id="2通过单独的配置文件配置项目"><a class="markdownIt-Anchor" href="#2通过单独的配置文件配置项目"></a> 2通过单独的配置文件配置项目</h3><p>① 在项目的跟目录创建文件vue.config.js</p><p>② 在该文件中进行相关配置，从而覆盖默认配置</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    devServer: {</span><br><span class="line">        open: <span class="literal">true</span>, <span class="comment">// 服务启动后自动打开浏览器</span></span><br><span class="line">    port: <span class="number">8888</span> <span class="comment">// 端口号</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="element-ui-的基本使用"><a class="markdownIt-Anchor" href="#element-ui-的基本使用"></a> Element-UI 的基本使用</h2><p>Element-UI:一套为开发者、设计师和产品经理准备的基于vue 2.0 的<strong>桌面端组件库</strong>官网地址为: <a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a></p><h3 id="1基于命令行方式手动安装"><a class="markdownIt-Anchor" href="#1基于命令行方式手动安装"></a> 1.基于命令行方式手动安装</h3><p>① 安装依赖包 <code>npm i element-ui -S</code></p><p>②导入 Element-UI 相关资源</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入组件库</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="comment">// 导入组件相关样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"><span class="comment">// 配置vue插件</span></span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></tbody></table></figure><h3 id="2基于图形化界面自动安装"><a class="markdownIt-Anchor" href="#2基于图形化界面自动安装"></a> 2.基于图形化界面自动安装</h3><p>① 运行 <code>vue ui</code> 命令，打开图形化界面</p><p>② 通过 <code>vue项目管理器</code>，进入具体的项目配置面板</p><p>③ 点击 <code>插件-&gt;添加插件</code>，进入插件查询面板</p><p>④ 搜索 <code>vue-cli-plugin-element</code> 并安装</p><p>⑤ 配置插件，实现按需导入，从而减少打包后项目的体积</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
</feed>
