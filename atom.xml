<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MaXiaoYu&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/7ff8334eb3ce169d5ef407706436ee76</icon>
  <subtitle>每天进步一点点！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://extheor.github.io/"/>
  <updated>2020-09-04T09:14:39.883Z</updated>
  <id>https://extheor.github.io/</id>
  
  <author>
    <name>Continue.Run</name>
    <email>2044580857@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>异步提交表单</title>
    <link href="https://extheor.github.io/posts/51139400/index.html"/>
    <id>https://extheor.github.io/posts/51139400/index.html</id>
    <published>2020-09-04T09:14:37.000Z</published>
    <updated>2020-09-04T09:14:39.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="异步提交表单"><a class="markdownIt-Anchor" href="#异步提交表单"></a> 异步提交表单</h1><h2 id="异步提交表单的步骤"><a class="markdownIt-Anchor" href="#异步提交表单的步骤"></a> 异步提交表单的步骤</h2><p>所谓异步提交表单，就是不再使用表单的提交按钮实现表单的提交功能，而是通过Ajax异步交互方式实现表单提交。具体实现步骤如下:</p><ol><li>获取表单及所有表单组件对应的数据值。</li><li>将所有表单组件对应的数据值拼成特定格式的字符串或是JSON格式数据。</li><li>通过Ajax异步交互方式提交表单。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> info = <span class="string">'username='</span>+$(<span class="string">'#username'</span>).val()+<span class="string">'&amp;password='</span>+$(<span class="string">'#password'</span>).val();</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"server.js',</span></span><br><span class="line"><span class="string">    type: 'post',</span></span><br><span class="line"><span class="string">    data: info,</span></span><br><span class="line"><span class="string">    success: function(data)&#123;</span></span><br><span class="line"><span class="string">    console.log(data);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p>异步提交表单的案例</p><ul><li><p>JSON文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"username"</span>: <span class="string">"zhangsan"</span>,</span><br><span class="line">  <span class="attr">"password"</span>: <span class="string">"123456"</span>,</span><br><span class="line">  <span class="attr">"msg"</span>: <span class="string">"登录成功！"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>HTML文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>异步提交表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      input &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        margin-bottom: 10px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">      用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> /&gt;</span> 密码：<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $form = $(<span class="string">"form"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $username = $(<span class="string">"#username"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $password = $(<span class="string">"#password"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      $form.bind(<span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 阻止表单默认的同步提交</span></span></span><br><span class="line">        event.preventDefault();</span><br><span class="line"><span class="actionscript">        <span class="comment">// 1. 获取表单组件的数据内容</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> username = $username.val();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> password = $password.val();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(username);</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(password);</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// post请求方式</span></span></span><br><span class="line"><span class="javascript">        $.<span class="keyword">get</span>("data/server5.json", &#123; username &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   console.log(response);</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> usernameJson = response.username;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> passwordJson = response.password;</span></span><br><span class="line">          if (username === usernameJson &amp;&amp; password === passwordJson) &#123;</span><br><span class="line"><span class="actionscript">            alert(<span class="string">"登录成功!"</span>);</span></span><br><span class="line"><span class="actionscript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"用户名或密码错误"</span>);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/%E5%BC%82%E6%AD%A5%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95.gif" alt="" /></p></li></ul><h2 id="表单序列化"><a class="markdownIt-Anchor" href="#表单序列化"></a> 表单序列化</h2><ol><li>serialize()方法: 将表单组件对应的数据值序列化为指定格式的字符串内容。</li></ol>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'form'</span>).serialize()</span><br></pre></td></tr></table></figure><ol start="2"><li><p>serializeArray()方法: 将表单组件对应的数据值序列化为JSON格式的数据内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'select, :radio'</span>).serializeArray()</span><br></pre></td></tr></table></figure></li></ol><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单序列化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      input &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        margin-bottom: 10px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">      用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> /&gt;</span> 密码：<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $form = $(<span class="string">"form"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $username = $(<span class="string">"#username"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $password = $(<span class="string">"#password"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      $form.bind(<span class="string">"submit"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 阻止表单默认的同步提交</span></span></span><br><span class="line">        event.preventDefault();</span><br><span class="line"><span class="actionscript">        <span class="comment">// 表单序列化 - 根据表单默认同步提交获取数据的方式</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// var data = $("form").serialize();</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(data);</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = $(<span class="string">"form"</span>).serializeArray();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(data);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// post请求方式</span></span></span><br><span class="line"><span class="actionscript">        $.get(<span class="string">"data/server5.json"</span>, data, <span class="function"><span class="keyword">function</span> <span class="params">(response)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(response);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/%E8%A1%A8%E5%8D%95%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="" /></p>]]></content>
    
    <summary type="html">
    
      异步提交表单
    
    </summary>
    
    
      <category term="Ajax" scheme="https://extheor.github.io/categories/Ajax/"/>
    
    
      <category term="ajax" scheme="https://extheor.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>搜索提示框效果</title>
    <link href="https://extheor.github.io/posts/152fa65b/index.html"/>
    <id>https://extheor.github.io/posts/152fa65b/index.html</id>
    <published>2020-09-04T09:13:32.000Z</published>
    <updated>2020-09-04T09:14:08.436Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="搜索提示框效果"><a class="markdownIt-Anchor" href="#搜索提示框效果"></a> 搜索提示框效果</h1><ul><li><p>首先写静态页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 搜索框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"search"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 动态提示的数据框liebia --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: darkgray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#search</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#alert</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">312px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">display</span>: none; <span class="comment">/* 将ul列表隐藏 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#alert</span> &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#alert</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0.5px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#alert</span> &gt; <span class="selector-tag">ul</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JS代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $search = $(<span class="string">"#search"</span>);</span><br><span class="line"><span class="keyword">var</span> $alert = $(<span class="string">"#alert"</span>);</span><br><span class="line"><span class="keyword">var</span> $alertUl = $(<span class="string">"#alert&gt;ul"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空列表的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearUl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $alertUl.empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$search</span><br><span class="line">    .bind(<span class="string">"input"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 清空列表</span></span><br><span class="line">    clearUl();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取到用户所输入的内容</span></span><br><span class="line">    <span class="keyword">var</span> value = $(<span class="keyword">this</span>).val();</span><br><span class="line">    <span class="comment">// console.log(value);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用getJSON方法获取json数据</span></span><br><span class="line">    $.getJSON(<span class="string">"data/server4.json"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(data);</span></span><br><span class="line">        <span class="comment">// 获取到json数据中的name值</span></span><br><span class="line">        $.each(data, <span class="function"><span class="keyword">function</span> (<span class="params">input, obj</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// console.log(obj);</span></span><br><span class="line">            <span class="keyword">var</span> name = obj.name;</span><br><span class="line">            <span class="comment">// console.log(name);</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (name.indexOf(value) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 表示输入的内容在name中存在</span></span><br><span class="line">                <span class="keyword">var</span> valueArr = obj.value;</span><br><span class="line">                <span class="comment">// console.log(valueArr);</span></span><br><span class="line">                $.each(valueArr, <span class="function"><span class="keyword">function</span> (<span class="params">input, text</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// console.log(text);</span></span><br><span class="line">                    <span class="comment">// 将数据添加到HTML页面</span></span><br><span class="line">                    $alertUl.append(<span class="string">`&lt;li&gt;<span class="subst">$&#123;text&#125;</span>&lt;/li&gt;`</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将ul列表显示出来</span></span><br><span class="line">    $alert.css(<span class="string">"display"</span>, <span class="string">"block"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .bind(<span class="string">"blur"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $alert.css(<span class="string">"display"</span>, <span class="string">"none"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>实现效果</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/%E6%90%9C%E7%B4%A2%E6%A1%86%E6%8F%90%E7%A4%BA%E6%95%88%E6%9E%9C.gif" alt="" /></p></li></ul>]]></content>
    
    <summary type="html">
    
      搜索提示框效果
    
    </summary>
    
    
      <category term="Ajax" scheme="https://extheor.github.io/categories/Ajax/"/>
    
    
      <category term="ajax" scheme="https://extheor.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>jQuery版三级联动案例</title>
    <link href="https://extheor.github.io/posts/61477045/index.html"/>
    <id>https://extheor.github.io/posts/61477045/index.html</id>
    <published>2020-09-03T14:51:47.000Z</published>
    <updated>2020-09-03T14:53:40.760Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="jquery版三级联动案例"><a class="markdownIt-Anchor" href="#jquery版三级联动案例"></a> jQuery版三级联动案例</h1><ul><li><p>首先写一个JSON数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"吉林省"</span>,</span><br><span class="line">    <span class="attr">"cities"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"长春市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"朝阳区"</span>, <span class="string">"经济开发区"</span>, <span class="string">"高新区"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"吉林市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"东城区"</span>, <span class="string">"经济开发区"</span>, <span class="string">"老城区"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"白山市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"二道区"</span>, <span class="string">"河东区"</span>, <span class="string">"高新区"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"辽宁省"</span>,</span><br><span class="line">    <span class="attr">"cities"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"沈阳市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"朝阳区"</span>, <span class="string">"经济开发区"</span>, <span class="string">"高新区"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"大连市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"东城区"</span>, <span class="string">"经济开发区"</span>, <span class="string">"老城区"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"铁岭市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"二道区"</span>, <span class="string">"河东区"</span>, <span class="string">"高新区"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"山东省"</span>,</span><br><span class="line">    <span class="attr">"cities"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"青岛市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"朝阳区"</span>, <span class="string">"经济开发区"</span>, <span class="string">"高新区"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"济南市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"东城区"</span>, <span class="string">"经济开发区"</span>, <span class="string">"老城区"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"威海市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"二道区"</span>, <span class="string">"河东区"</span>, <span class="string">"高新区"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>然后用Ajax动态获取JSON文件中的数据</p></li><li><p>完整代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>三级联动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 三级联动 - 两个二级联动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"province"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"county"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $province = $(<span class="string">"#province"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $city = $(<span class="string">"#city"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $county = $(<span class="string">"#county"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> json;</span></span><br><span class="line"><span class="javascript">      $.getJSON(<span class="string">"data/server1.json"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 把data保存到json全局变量中</span></span></span><br><span class="line">        json = data;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 遍历data数据</span></span></span><br><span class="line"><span class="javascript">        $.each(data, <span class="function"><span class="keyword">function</span> (<span class="params">index, obj</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 获取所有的省份信息</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> provinceName = obj.province;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   console.log(provinceName);</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 将省份信息添加到对应的select元素中</span></span></span><br><span class="line">          $province.append(</span><br><span class="line"><span class="javascript">            <span class="string">`&lt;option value="<span class="subst">$&#123;provinceName&#125;</span>"&gt;<span class="subst">$&#123;provinceName&#125;</span>&lt;/option&gt;`</span></span></span><br><span class="line">          );</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        $province.change(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 将城市下拉列表的选项清空</span></span></span><br><span class="line">          $city.empty();</span><br><span class="line"><span class="handlebars"><span class="xml">          $city.append(`<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span>`);</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 获取到所选择的城市的文本信息</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> provinceElementName = $(<span class="keyword">this</span>).children(<span class="string">"option:selected"</span>).text();</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   console.log(provinceElementName);</span></span></span><br><span class="line"><span class="javascript">          $.each(json, <span class="function"><span class="keyword">function</span> (<span class="params">index, obj</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> provinceName = obj.province;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(provinceName);</span></span></span><br><span class="line">            if (provinceElementName === provinceName) &#123;</span><br><span class="line"><span class="actionscript">              <span class="comment">// 获取到城市数组集合</span></span></span><br><span class="line"><span class="actionscript">              <span class="keyword">var</span> cities = obj.cities;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// 遍历城市数组集合</span></span></span><br><span class="line"><span class="javascript">              $.each(cities, <span class="function"><span class="keyword">function</span> (<span class="params">index, obj</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log(obj.city);</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 获取到城市名称</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> cityName = obj.city;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 将该省对应的城市名称添加到对应的select中</span></span></span><br><span class="line">                $city.append(</span><br><span class="line"><span class="javascript">                  <span class="string">`&lt;option value="<span class="subst">$&#123;cityName&#125;</span>"&gt;<span class="subst">$&#123;cityName&#125;</span>&lt;/option&gt;`</span></span></span><br><span class="line">                );</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        $city.change(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 将区级下拉列表的选项清空</span></span></span><br><span class="line">          $county.empty();</span><br><span class="line"><span class="handlebars"><span class="xml">          $county.append(`<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span>`);</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 获取到所选择的城市的文本信息</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> cityElementName = $(<span class="keyword">this</span>).children(<span class="string">"option:selected"</span>).text();</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   console.log(cityElementName);</span></span></span><br><span class="line"><span class="javascript">          $.each(json, <span class="function"><span class="keyword">function</span> (<span class="params">index, obj</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取该省对应的所有的城市信息</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> cities = obj.cities;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(cities);</span></span></span><br><span class="line"><span class="javascript">            $.each(cities, <span class="function"><span class="keyword">function</span> (<span class="params">index, cityObj</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">//   console.log(cityObj.city);</span></span></span><br><span class="line"><span class="actionscript">              <span class="keyword">var</span> cityName = cityObj.city;</span></span><br><span class="line">              if (cityElementName === cityName) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 获取到区级数组集合</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log(cityObj.counties);</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> counties = cityObj.counties;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 遍历区级数组集合</span></span></span><br><span class="line"><span class="javascript">                $.each(counties, <span class="function"><span class="keyword">function</span> (<span class="params">index, value</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="comment">// 获取到区级名称</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">//   console.log(value);</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">// 将该城市对应的区级名称添加到对应的select元素中</span></span></span><br><span class="line"><span class="javascript">                  $county.append(<span class="string">`&lt;option value="<span class="subst">$&#123;value&#125;</span>"&gt;<span class="subst">$&#123;value&#125;</span>&lt;/option&gt;`</span>);</span></span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A802.gif" alt="" /></p></li></ul>]]></content>
    
    <summary type="html">
    
      jQuery版三级联动案例
    
    </summary>
    
    
      <category term="Ajax" scheme="https://extheor.github.io/categories/Ajax/"/>
    
    
      <category term="ajax" scheme="https://extheor.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>jQuery中的Ajax</title>
    <link href="https://extheor.github.io/posts/a094d027/index.html"/>
    <id>https://extheor.github.io/posts/a094d027/index.html</id>
    <published>2020-09-03T14:51:34.000Z</published>
    <updated>2020-09-04T09:12:50.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="jquery中的ajax"><a class="markdownIt-Anchor" href="#jquery中的ajax"></a> jQuery中的Ajax</h1><h2 id="文章目录"><a class="markdownIt-Anchor" href="#文章目录"></a> 文章目录</h2><ul><li><a href="#load()%E6%96%B9%E6%B3%95">load()方法</a></li><li>[$.get()与 .post()方法](#.get()与 $.post()方法)</li><li>[.ajax()方法](#.ajax()方法)</li><li>[.getScript()方法](#.getScript()方法)</li><li>[.getJSON()方法](#.getJSON()方法)</li><li><a href="#Ajax%E7%9A%84%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6">Ajax的全局事件</a></li></ul><p>jQuery不仅对JavaScript语言进行了封装，也对Ajax异步交互进行了封装。jQuery提供了六个Ajax操作的方法:</p><ul><li>load()方法</li><li>$get()方法和 $.post()方法</li><li>$ajax()方法</li><li>$getScript(方法和 $getJSON()方法</li></ul><p>jQuery除了封装了六个Ajax操作的方法，还提供了以下几种事件:</p><ul><li><p>ajaxStart()和ajaxStop()事件</p></li><li><p>ajaxComplete()事件、ajaxSend()事件、ajaxError()事件和ajaxSuccess()事件</p></li></ul><h2 id="a-idload方法load方法a"><a class="markdownIt-Anchor" href="#a-idload方法load方法a"></a> <a id="load()方法">load()方法</a></h2><p>load()方法是jQuery中最为简单的Ajax方法，其语法结构如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$element.load(url,[data],[callback]);</span><br></pre></td></tr></table></figure><ul><li><p>url: 请求HTML页面的url地址。</p></li><li><p>data: 发送给服务器端的key/value形式的数据内容。</p></li><li><p>callback: Ajax请求完成时的回调函数。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">'div'</span>).load(<span class="string">'server.js'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><font color="red"><b>注意：</b></font> load()方法的请求方式由是否传递参数决定。即不传递 data 参数，为GET方式;传递 data 参数，为POST方式。</p></blockquote><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>load()方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        /*</span><br><span class="line">            load(url, [data], [callback])方法</span><br><span class="line">            * 参数</span><br><span class="line">                * url - 异步请求的地址</span><br><span class="line">                * data - 异步请求的数据</span><br><span class="line">                * callback - 异步请求成功后的回调函数</span><br><span class="line">            * 返回值 - 服务器端的响应结果</span><br><span class="line">            * 注意 - 自动将返回结果写入到目标元素中</span><br><span class="line">        */</span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).load(<span class="string">"data/server2.json"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"异步请求成功..."</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果不传入data参数，默认为GET请求方式</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903182518155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nvb2xfYnJlZXplXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>load()方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        /*</span><br><span class="line">            load(url, [data], [callback])方法</span><br><span class="line">            * 参数</span><br><span class="line">                * url - 异步请求的地址</span><br><span class="line">                * data - 异步请求的数据</span><br><span class="line">                * 如果省略请求数据的话，当前的请求数据的话，当前的请求方式为GET</span><br><span class="line">                    * 如果发送请求数据的话，当前的请求方式为POST</span><br><span class="line">                * callback - 异步请求成功后的回调函数</span><br><span class="line">            * 返回值 - 服务器端的响应结果</span><br><span class="line">            * 注意 - 自动将返回结果写入到目标元素中</span><br><span class="line">        */</span><br><span class="line"><span class="javascript">        $(<span class="string">"button"</span>).load(<span class="string">"data/server2.json"</span>, &#123; <span class="attr">name</span>: <span class="string">"张无忌"</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"异步请求成功..."</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果传入data参数，默认为POST请求方式</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903182625498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nvb2xfYnJlZXplXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p><h2 id="a-idget与-post方法get与-post方法a"><a class="markdownIt-Anchor" href="#a-idget与-post方法get与-post方法a"></a> <a id="$.get()与 $.post()方法">$.get()与 $.post()方法</a></h2><ul><li><p>$get(方法使用GET方式向服务器端发送异步请求。其语法结构如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>(url,[data],[callback],[type]);</span><br></pre></td></tr></table></figure></li><li><p>url: 请求HTML页面的url地址。</p></li><li><p>data: 发送给服务器端的key/value形式的数据内容。</p></li><li><p>callback: Ajax请求完成时的回调函数。</p></li><li><p>type: 设置返回数据内容的格式。值为xml、html、script、json、text和_default。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.<span class="keyword">get</span>('server.js',function(data, textStatus)&#123;</span><br><span class="line"><span class="comment">//data:表示服务器端响应的数据内容</span></span><br><span class="line">        <span class="comment">//textStatus: success、error、notmodified和timeout四种请求状态之一</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>get()与post()方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        /*</span><br><span class="line"><span class="actionscript">                <span class="keyword">get</span>(url, [data], [callback], [type])方法 - 请求方式为GET</span></span><br><span class="line">                * 参数</span><br><span class="line">                    * url - 异步请求地址</span><br><span class="line">                    * data - 异步请求的数据</span><br><span class="line">                    * callback - 异步请求成功后的回调函数</span><br><span class="line">              */</span><br><span class="line"><span class="actionscript">        $.get(<span class="string">"data/server2.json"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"异步请求成功啦..."</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2V4dGhlb3IvaW1hZ2VzL0FqYXglRTUlOUIlQkUlRTclODklODcvJC5nZXQwMS5wbmc?x-oss-process=image/format,png" alt="" /></p><p>可以看到，如果不传递 data 参数的话，默认为GET请求，并且请求URL是不带参数的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>get()与post()方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        /*</span><br><span class="line"><span class="actionscript">                <span class="keyword">get</span>(url, [data], [callback], [type])方法 - 请求方式为GET</span></span><br><span class="line">                * 参数</span><br><span class="line">                    * url - 异步请求地址</span><br><span class="line">                    * data - 异步请求的数据</span><br><span class="line">                    * callback - 异步请求成功后的回调函数</span><br><span class="line">              */</span><br><span class="line"><span class="javascript">        $.<span class="keyword">get</span>("data/server2.json", &#123; name: <span class="string">"张无忌"</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">"异步请求成功啦..."</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2V4dGhlb3IvaW1hZ2VzL0FqYXglRTUlOUIlQkUlRTclODklODcvJC5nZXQwMi5wbmc?x-oss-process=image/format,png" alt="" /></p><p>可以看到，如果传递 data 参数的话，默认也为GET请求，并且请求URL是带参数的</p><p>callback中响应结果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>get()与post()方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        /*</span><br><span class="line"><span class="actionscript">                <span class="keyword">get</span>(url, [data], [callback], [type])方法 - 请求方式为GET</span></span><br><span class="line">                * 参数</span><br><span class="line">                    * url - 异步请求地址</span><br><span class="line">                    * data - 异步请求的数据</span><br><span class="line">                    * callback - 异步请求成功后的回调函数</span><br><span class="line"><span class="actionscript">                        <span class="function"><span class="keyword">function</span><span class="params">(response)</span></span>&#123;&#125;</span></span><br><span class="line">                    * type - 设置服务器端响应结果的格式</span><br><span class="line">                        xml、html、script、json、text等</span><br><span class="line">              */</span><br><span class="line"><span class="javascript">        $.<span class="keyword">get</span>("data/server2.json", &#123; name: <span class="string">"张无忌"</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(response);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903182830952.png#pic_center" alt="在这里插入图片描述" /></p><p>不传递type类型默认返回json格式的数据内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>get()与post()方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        /*</span><br><span class="line"><span class="actionscript">                <span class="keyword">get</span>(url, [data], [callback], [type])方法 - 请求方式为GET</span></span><br><span class="line">                * 参数</span><br><span class="line">                    * url - 异步请求地址</span><br><span class="line">                    * data - 异步请求的数据</span><br><span class="line">                    * callback - 异步请求成功后的回调函数</span><br><span class="line"><span class="actionscript">                        <span class="function"><span class="keyword">function</span><span class="params">(response)</span></span>&#123;&#125;</span></span><br><span class="line">                    * type - 设置服务器端响应结果的格式</span><br><span class="line">                        xml、html、script、json、text等</span><br><span class="line">              */</span><br><span class="line"><span class="javascript">        $.<span class="keyword">get</span>(</span></span><br><span class="line"><span class="actionscript">          <span class="string">"data/server2.json"</span>,</span></span><br><span class="line"><span class="actionscript">          &#123; name: <span class="string">"张无忌"</span> &#125;,</span></span><br><span class="line"><span class="actionscript">          <span class="function"><span class="keyword">function</span> <span class="params">(response)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(response);</span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          <span class="string">"text"</span></span></span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903182842294.png#pic_center" alt="在这里插入图片描述" /></p><p>不传递type类型会返回指定格式的数据内容</p><blockquote><p>$.post方法同样用法</p></blockquote><h2 id="a-idajax方法ajax方法a"><a class="markdownIt-Anchor" href="#a-idajax方法ajax方法a"></a> <a id="$.ajax()方法">$.ajax()方法</a></h2><p>具体可以参考 jQuery文档 <a href="https://jquery.cuishifeng.cn/jQuery.Ajax.html" target="_blank" rel="noopener">jQuery.ajax(url,[settings])</a></p><p>$ajax()方法是jQuery中最为底层的Ajax方法，其语法结构如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(url,[settings]);</span><br></pre></td></tr></table></figure><ul><li><p>url: 请求HTML页面的url地址。</p></li><li><p>settings: key/value形式的请求设置，所有参数都是可选的。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"server.js"</span>,</span><br><span class="line">type:<span class="string">"post"</span>,</span><br><span class="line">data:<span class="string">"this is ajax"</span>,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);<span class="comment">//服务器响应回数据之后的处理逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax()方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        /*</span><br><span class="line"><span class="javascript">                $.ajax(url, [settings])方法</span></span><br><span class="line">                * 参数</span><br><span class="line">                    * url - 请求地址</span><br><span class="line">                    * settings - 设置异步请求的参数</span><br><span class="line">                * settings选项 - 对象类型</span><br><span class="line">                    * type - 设置请求方式</span><br><span class="line">                    * data - 发送给服务器端的请求数据</span><br><span class="line">                    * dataType - 服务器端响应结果的格式</span><br><span class="line">                    * success - 异步请求成功后的回调函数</span><br><span class="line"><span class="actionscript">                        <span class="function"><span class="keyword">function</span><span class="params">(data, textStatus, jqXHR)</span></span>&#123;&#125;</span></span><br><span class="line">                            * data - 表示服务器端响应的结果</span><br><span class="line">                            * textStatus - 表示服务器端当前的状态</span><br><span class="line">                            * jqXHR - Ajax中的核心对象</span><br><span class="line">            */</span><br><span class="line"><span class="javascript">        $.ajax(<span class="string">"data/server2.json"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">          type: <span class="string">"get"</span>,</span></span><br><span class="line"><span class="actionscript">          dataType: <span class="string">"text"</span>,</span></span><br><span class="line"><span class="actionscript">          success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903182854118.png#pic_center" alt="在这里插入图片描述" /></p><h2 id="a-idgetscript方法getscript方法a"><a class="markdownIt-Anchor" href="#a-idgetscript方法getscript方法a"></a> <a id="$.getScript()方法">$.getScript()方法</a></h2><p>$getScript(方法是jQuery中用于动态加载指定JavaScript文件，其语法结构如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.getScript(url,[callback);</span><br></pre></td></tr></table></figure><ul><li>url: 请求JavaScript文件的url地址。</li><li>callback: 指定JavaScript文件成功加载后的回调函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.getScript(<span class="string">'test.js'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>getScript()方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 动态加载指定JavaScript文件，并且执行</span></span></span><br><span class="line"><span class="javascript">        $.getScript(<span class="string">"data/server3.js"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">eval</span>(data);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903182912896.png#pic_center" alt="在这里插入图片描述" /></p><h2 id="a-idgetjson方法getjson方法a"><a class="markdownIt-Anchor" href="#a-idgetjson方法getjson方法a"></a> <a id="$.getJSON()方法">$.getJSON()方法</a></h2><p>$getuJSON(方法是jQuery中用于动态加载指定JSON格式的数据内容，其语法结构如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(url,[data],[callback]);</span><br></pre></td></tr></table></figure><ul><li><p>url: 请求JavaScript文件的url地址。</p></li><li><p>data: 发送给服务器端的key/value形式的数据内容。</p></li><li><p>callback: 指定JavaScript文件成功加载后的回调函数。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.getJSON(<span class="string">'test.json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>gtJSON()方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// getJSON()方法的请求方式为GET</span></span></span><br><span class="line"><span class="javascript">        $.getJSON(<span class="string">"data/server2.json"</span>, &#123; <span class="attr">name</span>: <span class="string">"张无忌"</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200903182924376.png#pic_center" alt="在这里插入图片描述" /></p><h2 id="a-idajax的全局事件ajax的全局事件a"><a class="markdownIt-Anchor" href="#a-idajax的全局事件ajax的全局事件a"></a> <a id="Ajax的全局事件">Ajax的全局事件</a></h2><p><strong>加载请求： .ajaxStart() 和 .ajaxstop()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ajaxStart(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.loading'</span>).show();</span><br><span class="line">&#125;).ajaxStop(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.loading'</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>错误处理： .ajaxError()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//1 $.ajax()使用属性提示错误</span></span><br><span class="line">    $(<span class="string">'form input[type=button]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">"post"</span>,</span><br><span class="line">            url:<span class="string">"test1.php"</span>,</span><br><span class="line">            <span class="keyword">async</span>:<span class="literal">true</span>,</span><br><span class="line">            data:$(<span class="string">'form'</span>).serialize(),</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">response,status,xhr</span>)</span>&#123;</span><br><span class="line">                $(<span class="string">'#box'</span>).html(response);</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="comment">//            timeout:3000</span></span><br><span class="line"><span class="comment">//            global:false</span></span><br><span class="line">            error:<span class="function"><span class="keyword">function</span>(<span class="params">xhr,errorText,errorType</span>)</span>&#123;</span><br><span class="line"><span class="comment">//                alert(errorText + ':' +errorType);</span></span><br><span class="line">                alert(xhr.status + <span class="string">':'</span> +xhr.statusText);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2 $.post()使用连缀.error()方法提示错误，将被.fail()取代</span></span><br><span class="line">    $(<span class="string">'form input[type=button]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.post(<span class="string">'test1.php'</span>).error(<span class="function"><span class="keyword">function</span>(<span class="params">xhr,errorText,errorType</span>)</span>&#123;</span><br><span class="line">            alert(errorText + <span class="string">':'</span> +errorType);</span><br><span class="line">            alert(xhr.status + <span class="string">':'</span> +xhr.statusText);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3 使用全局.ajaxError()方法</span></span><br><span class="line">    $(<span class="built_in">document</span>).ajaxError(<span class="function"><span class="keyword">function</span>(<span class="params">event,xhr,settings,info</span>)</span>&#123;</span><br><span class="line">        alert(event.type);</span><br><span class="line">        alert(event.target);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> event)&#123; <span class="comment">//打印出event的所有属性</span></span><br><span class="line">            <span class="built_in">document</span>.write(i + <span class="string">'&lt;br /&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><strong>.ajaxSuccess()</strong>，对应一个局部方法：<strong>.success()</strong>，请求成功完成时执行。</p><p><strong>.ajaxComplete()</strong>，对应一个局部方法：<strong>.complete()</strong>，请求完成后注册一个回调函数。</p><p><strong>.ajaxSend()</strong>，没有对应的局部方法，只有属性 <strong>beforeSend</strong>，请求发送之前要绑定的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$.post()使用全局</span></span><br><span class="line">$(<span class="string">'form input[type=button]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.post(<span class="string">'test.php'</span>,$(<span class="string">'form'</span>).serialize());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'document'</span>).ajaxSend(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(发送请求之前执行);</span><br><span class="line">&#125;).ajaxComplete(<span class="function"><span class="keyword">function</span>(<span class="params">response,status,xhr</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'请求完成后，不管是否失败成功'</span>);</span><br><span class="line">&#125;).ajaxSuccess(<span class="function"><span class="keyword">function</span>(<span class="params">event,xhr,settrings</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'请求成功后，不管是否成功'</span>);</span><br><span class="line">&#125;).ajaxError(<span class="function"><span class="keyword">function</span>(<span class="params">event,xhr,settrings</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'请求失败后'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//$.post()使用局部</span></span><br><span class="line">$(<span class="string">'form input[type=button]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.post(<span class="string">'test.php'</span>,$(<span class="string">'form'</span>).serialize()).success(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'请求成功后'</span>);</span><br><span class="line">    &#125;).complete(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'请求完成后'</span>);</span><br><span class="line">    &#125;).error(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'请求失败后'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//$.ajax()使用属性</span></span><br><span class="line">$(<span class="string">'form input[type=button]'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type:<span class="string">"post"</span>,</span><br><span class="line">        url:<span class="string">"test1.php"</span>,</span><br><span class="line">        <span class="keyword">async</span>:<span class="literal">true</span>,</span><br><span class="line">        data:$(<span class="string">'form'</span>).serialize(),</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">response,status,xhr</span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'请求成功后'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        complete:<span class="function"><span class="keyword">function</span>（)</span>&#123;</span><br><span class="line">            alert(<span class="string">'请求完成后,不管失败成功'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'发送请求之前'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        error:<span class="function"><span class="keyword">function</span>(<span class="params">xhr,errorText,errorType</span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'请求失败后'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注：在 jQuery1.5 版本以后，使用**.success()<strong>、</strong>.error()<strong>和</strong>.complete()<strong>连缀的方法，可以用</strong>.done()<strong>、</strong>.fail()<strong>和</strong>.always()**取代。</p></blockquote>]]></content>
    
    <summary type="html">
    
      jQuery中的Ajax
    
    </summary>
    
    
      <category term="Ajax" scheme="https://extheor.github.io/categories/Ajax/"/>
    
    
      <category term="ajax" scheme="https://extheor.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>三级联动案例</title>
    <link href="https://extheor.github.io/posts/3f6e5f9e/index.html"/>
    <id>https://extheor.github.io/posts/3f6e5f9e/index.html</id>
    <published>2020-09-03T14:49:24.000Z</published>
    <updated>2020-09-03T14:53:40.762Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="三级联动案例"><a class="markdownIt-Anchor" href="#三级联动案例"></a> 三级联动案例</h1><ul><li><p>首先写一个JSON数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"吉林省"</span>,</span><br><span class="line">    <span class="attr">"cities"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"长春市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"朝阳区"</span>, <span class="string">"经济开发区"</span>, <span class="string">"高新区"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"吉林市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"东城区"</span>, <span class="string">"经济开发区"</span>, <span class="string">"老城区"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"白山市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"二道区"</span>, <span class="string">"河东区"</span>, <span class="string">"高新区"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"辽宁省"</span>,</span><br><span class="line">    <span class="attr">"cities"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"沈阳市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"朝阳区"</span>, <span class="string">"经济开发区"</span>, <span class="string">"高新区"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"大连市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"东城区"</span>, <span class="string">"经济开发区"</span>, <span class="string">"老城区"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"铁岭市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"二道区"</span>, <span class="string">"河东区"</span>, <span class="string">"高新区"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"province"</span>: <span class="string">"山东省"</span>,</span><br><span class="line">    <span class="attr">"cities"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"青岛市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"朝阳区"</span>, <span class="string">"经济开发区"</span>, <span class="string">"高新区"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"济南市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"东城区"</span>, <span class="string">"经济开发区"</span>, <span class="string">"老城区"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"city"</span>: <span class="string">"威海市"</span>,</span><br><span class="line">        <span class="attr">"counties"</span>: [<span class="string">"二道区"</span>, <span class="string">"河东区"</span>, <span class="string">"高新区"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>然后用Ajax动态获取JSON文件中的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>三级联动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 三级联动 - 两个二级联动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"province"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"county"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 获取省份下拉列表</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> provinceElement = <span class="built_in">document</span>.getElementById(<span class="string">"province"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 1. 当页面加载完毕后，动态获取省份信息</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 得到服务器端返回的数据</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> response = xhr.responseText;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 将JSON字符串转换成JSON对象</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> datas = <span class="built_in">JSON</span>.parse(response);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(data);</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(datas[i]);</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> data = datas[i];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> province = data.province;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(data.province);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 将数据更新到HTML页面中</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> opt = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span></span><br><span class="line"><span class="actionscript">            opt.setAttribute(<span class="string">"value"</span>, <span class="string">"province"</span>);</span></span><br><span class="line">            opt.textContent = province;</span><br><span class="line">            provinceElement.appendChild(opt);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      xhr.open(<span class="string">"get"</span>, <span class="string">"./data/server1.json"</span>);</span></span><br><span class="line"><span class="actionscript">      xhr.send(<span class="literal">null</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200902170135822.png#pic_center" alt="在这里插入图片描述" /></p><ul><li><p>为省份下拉列表绑定change事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">provinceElement.addEventListener(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>HTMLSelectionElement</p><p><strong><code>HTMLSelectElement</code></strong> 接口表示一个 <code>&lt;select&gt;</code> HTML 元素。这个元素也通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement" target="_blank" rel="noopener"><code>HTMLElement</code></a> 接口从其他 HTML 元素共享所有属性和方法。</p><iframe class="live-sample-frame inheritance-diagram-frame" frameborder="0" height="120" id="frame_inheritance_diagram" src="https://mdn.mozillademos.org/zh-CN/docs/Web/API/HTMLSelectElement$samples/inheritance_diagram?revision=1626258" width="600" style="margin: 0px; padding: 0px; border: 0px; max-width: 100%; color: rgb(51, 51, 51); font-family: Arial, x-locale-body, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: -0.04448px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;"></iframe><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLSelectElement/options" target="_blank" rel="noopener"><code>HTMLSelectElement.options</code></a></p><p>只读属性。返回当前select元素包括option元素对象的集合。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLSelectElement/selectedIndex" target="_blank" rel="noopener"><code>HTMLSelectElement.selectedIndex</code></a></p><p>此属性返回一个长整型数值，代表第一个被选中的option元素，-1代表没有元素被选中。</p></li></ul></li></ul><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>三级联动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 三级联动 - 两个二级联动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"province"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"county"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 获取省份下拉列表</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> provinceElement = <span class="built_in">document</span>.getElementById(<span class="string">"province"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 1. 当页面加载完毕后，动态获取省份信息</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 得到服务器端返回的数据</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> response = xhr.responseText;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 将JSON字符串转换成JSON对象</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> datas = <span class="built_in">JSON</span>.parse(response);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(data);</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(datas[i]);</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> data = datas[i];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> province = data.province;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(data.province);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 将数据更新到HTML页面中</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> opt = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span></span><br><span class="line"><span class="actionscript">            opt.setAttribute(<span class="string">"value"</span>, <span class="string">"province"</span>);</span></span><br><span class="line">            opt.textContent = province;</span><br><span class="line">            provinceElement.appendChild(opt);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      xhr.open(<span class="string">"get"</span>, <span class="string">"./data/server1.json"</span>);</span></span><br><span class="line"><span class="actionscript">      xhr.send(<span class="literal">null</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 为省份下拉列表绑定change事件</span></span></span><br><span class="line"><span class="actionscript">      provinceElement.addEventListener(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1. 用户选择的省份信息</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> opts = provinceElement.options;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(opts);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我更换省份时，会触发change事件，这时输出一个HTMLOptionCollection集合</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020090217015273.png#pic_center" alt="在这里插入图片描述" /></p><p>这个selectedIndex就是当前所选中省份的索引值</p><p>只需使用item()方法即可获取当前所选中的 <code>&lt;select&gt;</code> 元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>三级联动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 三级联动 - 两个二级联动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"province"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"county"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 获取省份下拉列表</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> provinceElement = <span class="built_in">document</span>.getElementById(<span class="string">"province"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 1. 当页面加载完毕后，动态获取省份信息</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 得到服务器端返回的数据</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> response = xhr.responseText;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 将JSON字符串转换成JSON对象</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> datas = <span class="built_in">JSON</span>.parse(response);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(data);</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(datas[i]);</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> data = datas[i];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> province = data.province;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(data.province);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 将数据更新到HTML页面中</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> opt = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span></span><br><span class="line"><span class="actionscript">            opt.setAttribute(<span class="string">"value"</span>, <span class="string">"province"</span>);</span></span><br><span class="line">            opt.textContent = province;</span><br><span class="line">            provinceElement.appendChild(opt);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      xhr.open(<span class="string">"get"</span>, <span class="string">"./data/server1.json"</span>);</span></span><br><span class="line"><span class="actionscript">      xhr.send(<span class="literal">null</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 为省份下拉列表绑定change事件</span></span></span><br><span class="line"><span class="actionscript">      provinceElement.addEventListener(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1. 用户选择的省份信息</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> opts = provinceElement.options;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(opts);</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> index = provinceElement.selectedIndex; <span class="comment">// 被选中&lt;option&gt;的索引值</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> opt = opts.item(index);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(opt);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200902170201442.png#pic_center" alt="在这里插入图片描述" /></p><ul><li><p>二级联动，把省份对应的城市信息在第二个 <code>&lt;select&gt;</code> 中显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>三级联动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 三级联动 - 两个二级联动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"province"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"county"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 获取省份、城市下拉列表</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> provinceElement = <span class="built_in">document</span>.getElementById(<span class="string">"province"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> cityElement = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> datas;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 1. 当页面加载完毕后，动态获取省份信息</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 得到服务器端返回的数据</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> response = xhr.responseText;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 将JSON字符串转换成JSON对象</span></span></span><br><span class="line"><span class="javascript">          datas = <span class="built_in">JSON</span>.parse(response);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(data);</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(datas[i]);</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> data = datas[i];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> province = data.province;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(data.province);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 将数据更新到HTML页面中</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> opt = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span></span><br><span class="line"><span class="actionscript">            opt.setAttribute(<span class="string">"value"</span>, province);</span></span><br><span class="line">            opt.textContent = province;</span><br><span class="line">            provinceElement.appendChild(opt);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      xhr.open(<span class="string">"get"</span>, <span class="string">"./data/server1.json"</span>);</span></span><br><span class="line"><span class="actionscript">      xhr.send(<span class="literal">null</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 为省份下拉列表绑定change事件</span></span></span><br><span class="line"><span class="actionscript">      provinceElement.addEventListener(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1. 用户选择的省份信息</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> opts = provinceElement.options; <span class="comment">// 获取指定下拉列表所有选项</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(opts);</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> index = provinceElement.selectedIndex; <span class="comment">// 被选中&lt;option&gt;的索引值</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> opt = opts.item(index);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(opt);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> provinceName = opt.getAttribute(<span class="string">"value"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(province);</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2. 根据省份信息获取对应的城市信息</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> data = datas[i];</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> province = data.province;</span></span><br><span class="line">          if (provinceName === province) &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取对应的城市信息</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> cities = data.cities;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(cities);</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; cities.length; j++) &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">var</span> city = cities[j].city;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// console.log(city);</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// 将数据更新到HTML页面中</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> opt = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span></span><br><span class="line"><span class="actionscript">              opt.setAttribute(<span class="string">"value"</span>, city);</span></span><br><span class="line">              opt.textContent = city;</span><br><span class="line">              cityElement.appendChild(opt);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是当我选择了辽宁省，再选山东省之后，出现辽宁省的城市还在，也就是说，没有删除</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200902170212973.png#pic_center" alt="在这里插入图片描述" /></p><p>我们需要删除其他省份的城市</p><p>因为cityOpts.length要删除数据，那删了之后下一次的cityOpts.length的长度就比上一次的长度少一，也就是说，cityOpts.length的长度的动态变化的，所以最后要写一个k–，跟着cityOpts.length的长度对应的减小即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将城市下拉列表的选项清空</span></span><br><span class="line"><span class="keyword">var</span> cityOpts = cityElement.options;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">1</span>; k &lt; cityOpts.length; k++) &#123;</span><br><span class="line">    cityElement.removeChild(cityOpts[k]);</span><br><span class="line">    k--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果如下</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2V4dGhlb3IvaW1hZ2VzL0FqYXglRTUlOUIlQkUlRTclODklODcvJUU0JUI4JTg5JUU3JUJBJUE3JUU4JTgxJTk0JUU1JThBJUE4LmdpZg" alt="" /></p><ul><li><p>三级联动完整案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>三级联动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 三级联动 - 两个二级联动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"province"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"county"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 获取省份、城市下拉列表</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> provinceElement = <span class="built_in">document</span>.getElementById(<span class="string">"province"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> cityElement = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> countyElement = <span class="built_in">document</span>.getElementById(<span class="string">"county"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> datas;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 1. 当页面加载完毕后，动态获取省份信息</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 得到服务器端返回的数据</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> response = xhr.responseText;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 将JSON字符串转换成JSON对象</span></span></span><br><span class="line"><span class="javascript">          datas = <span class="built_in">JSON</span>.parse(response);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(data);</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(datas[i]);</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> data = datas[i];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> province = data.province;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(data.province);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 将数据更新到HTML页面中</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> opt = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span></span><br><span class="line"><span class="actionscript">            opt.setAttribute(<span class="string">"value"</span>, province);</span></span><br><span class="line">            opt.textContent = province;</span><br><span class="line">            provinceElement.appendChild(opt);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      xhr.open(<span class="string">"get"</span>, <span class="string">"./data/server1.json"</span>);</span></span><br><span class="line"><span class="actionscript">      xhr.send(<span class="literal">null</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 为省份下拉列表绑定change事件</span></span></span><br><span class="line"><span class="actionscript">      provinceElement.addEventListener(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 将城市下拉列表的选项清空</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> cityOpts = cityElement.options;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">1</span>; k &lt; cityOpts.length; k++) &#123;</span></span><br><span class="line">          cityElement.removeChild(cityOpts[k]);</span><br><span class="line">          k--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1. 用户选择的省份信息</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> opts = provinceElement.options; <span class="comment">// 获取指定下拉列表所有选项</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(opts);</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> index = provinceElement.selectedIndex; <span class="comment">// 被选中&lt;option&gt;的索引值</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> opt = opts.item(index);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(opt);</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> provinceName = opt.getAttribute(<span class="string">"value"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(provinceName);</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2. 根据省份信息获取对应的城市信息</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> data = datas[i];</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> province = data.province;</span></span><br><span class="line">          if (provinceName === province) &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取对应的城市信息</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> cities = data.cities;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(cities);</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; cities.length; j++) &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">var</span> city = cities[j].city;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// console.log(city);</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// 将数据更新到HTML页面中</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> opt = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span></span><br><span class="line"><span class="actionscript">              opt.setAttribute(<span class="string">"value"</span>, city);</span></span><br><span class="line">              opt.textContent = city;</span><br><span class="line">              cityElement.appendChild(opt);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 为城市下拉列表绑定change事件</span></span></span><br><span class="line"><span class="actionscript">      cityElement.addEventListener(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 将区级下拉列表的选项清空</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> countyOpts = countyElement.options;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">1</span>; k &lt; countyOpts.length; k++) &#123;</span></span><br><span class="line">          countyElement.removeChild(countyOpts[k]);</span><br><span class="line">          k--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1. 用户选择的城市信息</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> opts = cityElement.options; <span class="comment">// 获取指定下拉列表所有选项</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(opts);</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> index = cityElement.selectedIndex; <span class="comment">// 被选中&lt;option&gt;的索引值</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> opt = opts.item(index);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(opt);</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> cityName = opt.getAttribute(<span class="string">"value"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(cityName);</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2. 根据城市信息获取对应的区级信息</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> cities = datas[i].cities;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(cities);</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; cities.length; x++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> city = cities[x].city;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(city);</span></span></span><br><span class="line"></span><br><span class="line">            if (cityName === city) &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">var</span> counties = cities[x].counties;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// console.log(counties);</span></span></span><br><span class="line"><span class="actionscript">              <span class="keyword">for</span> (<span class="keyword">var</span> y = <span class="number">0</span>; y &lt; counties.length; y++) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> county = counties[y];</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log(county);</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 将数据更新到HTML页面中</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> opt = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span></span><br><span class="line"><span class="actionscript">                opt.setAttribute(<span class="string">"value"</span>, county);</span></span><br><span class="line">                opt.textContent = county;</span><br><span class="line">                countyElement.appendChild(opt);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2V4dGhlb3IvaW1hZ2VzL0FqYXglRTUlOUIlQkUlRTclODklODcvJUU0JUI4JTg5JUU3JUJBJUE3JUU4JTgxJTk0JUU1JThBJUE4MDIuZ2lm" alt="" /></p></li></ul>]]></content>
    
    <summary type="html">
    
      三级联动案例
    
    </summary>
    
    
      <category term="Ajax" scheme="https://extheor.github.io/categories/Ajax/"/>
    
    
      <category term="ajax" scheme="https://extheor.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>JSON是什么</title>
    <link href="https://extheor.github.io/posts/7d3ea75e/index.html"/>
    <id>https://extheor.github.io/posts/7d3ea75e/index.html</id>
    <published>2020-09-03T14:46:46.000Z</published>
    <updated>2020-09-03T14:53:40.756Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="json是什么"><a class="markdownIt-Anchor" href="#json是什么"></a> JSON是什么</h1><p>JSON是JavaScript Object Notation的缩写，是一种轻量级的数据交换格式。JSON是基于JavaScript Programming Language, Standard ECMA-262 3rd Edition-December 1999的一个子集。</p><p>JSON是独立于任何语言的文本格式。易于程序员阅读和编写，同时也易于计算机解析和生成。</p><p>JSON的中文官网地址: <a href="http://www.json.org/json-zh.html" target="_blank" rel="noopener">http://www.json.org/json-zh.html</a></p><h2 id="json语法规则"><a class="markdownIt-Anchor" href="#json语法规则"></a> JSON语法规则</h2><p>JSON格式的构建比较简单，主要为两种结构:</p><ul><li><p>“名称/值”对的集合(A collection of narne/value pairs）。不同的语言中，它被理解为对象<br />( object ），纪录(record)，结构(struct)，字典( dictionary)，哈希表( hash table ) ,有键列表(keyed list ），或者关联数组( associative array )。</p></li><li><p>值的有序列表(An ordered list of values ）。在大部分语言中，它被理解为数组( array )。<br />JSON格式中作为值的类型允许是字符串( string)、数值(number)、true、false、null、对象( object）或者数组( array ）。</p></li></ul><h2 id="json中的键值对集合"><a class="markdownIt-Anchor" href="#json中的键值对集合"></a> JSON中的键值对集合</h2><p>JSON格式中的“名称/值”对的集合是一个无序的“‘名称/值’对”集合。一个对象以“{”（左括号）开始，“}”（右括号）结束。每个“名称”后跟一个“”（冒号）;“ ‘名称/值’ 对 ”之间使用“,”（逗号）分隔。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/JSON%E4%B8%AD%E7%9A%84%E9%94%AE%E5%80%BC%E5%AF%B9%E9%9B%86%E5%90%88.png" alt="" /></p><h2 id="json中的值的有序列表"><a class="markdownIt-Anchor" href="#json中的值的有序列表"></a> JSON中的值的有序列表</h2><p>JSON格式中的值的有序列表是值(value ）的有序集合。一个数组以“[”（左中括号）开始，“]”(右中括号）结束。值之间使用“”（逗号）分隔。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/JSON%E4%B8%AD%E7%9A%84%E5%80%BC%E7%9A%84%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8.png" alt="" /></p><h2 id="json文件"><a class="markdownIt-Anchor" href="#json文件"></a> JSON文件</h2><p>写法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"武侠"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"倚天屠龙记"</span>: [<span class="string">"张无忌"</span>, <span class="string">"周芷若"</span>],</span><br><span class="line">      <span class="attr">"笑傲江湖"</span>: [<span class="string">"令狐冲"</span>, <span class="string">"东方不败"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"言情"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"还珠格格"</span>: [<span class="string">"尔康"</span>, <span class="string">"紫薇"</span>],</span><br><span class="line">      <span class="attr">"情深深雨蒙蒙"</span>: [<span class="string">"何书恒"</span>, <span class="string">"陆依萍"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      JSON是什么
    
    </summary>
    
    
      <category term="JSON" scheme="https://extheor.github.io/categories/JSON/"/>
    
    
      <category term="json" scheme="https://extheor.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>实现Ajax异步交互</title>
    <link href="https://extheor.github.io/posts/60b5dd06/index.html"/>
    <id>https://extheor.github.io/posts/60b5dd06/index.html</id>
    <published>2020-09-03T14:45:33.000Z</published>
    <updated>2020-09-03T14:53:40.763Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="实现ajax异步交互"><a class="markdownIt-Anchor" href="#实现ajax异步交互"></a> 实现Ajax异步交互</h1><h2 id="文章目录"><a class="markdownIt-Anchor" href="#文章目录"></a> 文章目录</h2><p><a href="#%E5%AE%9E%E7%8E%B0Ajax%E7%9A%84%E6%89%A7%E8%A1%8C%E6%AD%A5%E9%AA%A4">实现Ajax的执行步骤</a></p><p><a href="#%E5%88%9B%E5%BB%BAAjax%E7%9A%84%E6%A0%B8%E5%BF%83%E5%AF%B9%E8%B1%A1">创建Ajax的核心对象</a></p><p><a href="#%E9%80%9A%E8%BF%87Ajax%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE">通过Ajax异步请求数据</a></p><p><a href="#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F">请求方式</a></p><p><a href="#Ajax%E5%BC%82%E6%AD%A5%E4%BA%A4%E4%BA%92">Ajax异步交互</a></p><p>文章包含以下几点内容</p><ul><li><p>实现Ajax的执行步骤</p></li><li><p>创建Ajax的核心对象</p></li><li><p>通过Ajax异步请求数据</p></li><li><p>监听服务器端通信状态</p></li><li><p>处理服务器端响应数据</p></li></ul><h2 id="a-id实现ajax的执行步骤实现ajax的执行步骤a"><a class="markdownIt-Anchor" href="#a-id实现ajax的执行步骤实现ajax的执行步骤a"></a> <a id="实现Ajax的执行步骤">实现Ajax的执行步骤</a></h2><p>实现Ajax异步交互需要服务器端逻辑进行配合，而作为客户端的HTML页面需要完成以下步骤:</p><ol><li><p>创建Ajax的核心对象XMILHlttpRequest对象</p></li><li><p>通过XMLHttpRequest对象的open()方法与服务器端建立连接</p><blockquote><p>具体可以去MDN了解<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/open" target="_blank" rel="noopener">XMLHttpRequest.open()</a></p></blockquote></li><li><p>构建请求所需的数据内容，并通过XMLHttpRequest对象的send()方法发送给服务器端</p><blockquote><p>具体可以去MDN了解<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/send" target="_blank" rel="noopener">XMLHttpRequest.send()</a></p></blockquote></li><li><p>通过XMLHttpRequest对象提供的onreadystatechange事件监听服务器端的通信状态</p><blockquote><p>只要 <code>readyState</code> 属性发生变化，就会调用相应的处理函数。这个回调函数会被用户线程所调用。<strong><code>XMLHttpRequest.onreadystatechange</code></strong> 会在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener"><code>XMLHttpRequest</code></a> 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState" target="_blank" rel="noopener"><code>readyState</code></a> 属性发生改变时触发 <code>readystatechange</code> 事件的时候被调用。</p><p>具体可参考MDN上的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState" target="_blank" rel="noopener">XMLHttpRequest.readyState</a></p></blockquote></li><li><p>接收并处理服务器端向客户端响应的数据结果</p></li><li><p>将处理结果更新到HTMIL页面中</p></li></ol><ul><li><p>具体步骤代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span> /&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">"btn"</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>createXMLHttpRequest.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">      var btn = document.getElementById("</span>btn<span class="string">");</span></span><br><span class="line"><span class="string">      btn.addEventListener("</span>click<span class="string">", function () &#123;</span></span><br><span class="line"><span class="string">        // 实现Ajax的异步交互</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // 创建XMLHttpRequest对象</span></span><br><span class="line"><span class="string">        var xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="string">        /*</span></span><br><span class="line"><span class="string">        2. 调用XMLHttpRequest对象的open()方法</span></span><br><span class="line"><span class="string">         * 作用 - 与服务器端建立连接</span></span><br><span class="line"><span class="string">         open(method, url)方法</span></span><br><span class="line"><span class="string">         * method - 表示当前的请求方式</span></span><br><span class="line"><span class="string">            * 常见的请求方式为GET和POST</span></span><br><span class="line"><span class="string">         * url - 表示当前请求的服务器端地址链接</span></span><br><span class="line"><span class="string">      */</span></span><br><span class="line"><span class="string">        xhr.open("</span><span class="keyword">get</span>", "https://extheor.github.io/");</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        3. 调用XMLHttpRequest对象的send()方法</span><br><span class="line">         * 作用 - 将客户端页面的数据发送给服务器</span><br><span class="line">         send()方法</span><br><span class="line">         * 如果不传递任何数据内容时 - 向该方法传递null</span><br><span class="line">     */</span><br><span class="line">        xhr.send(null);</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        4. 利用XMLHttpRequest对象的onreadystatechange事件</span><br><span class="line">         * 作用 - 用于监听服务器端的通信状态</span><br><span class="line">         * 服务器端的通信状态中 - 存在着处理完毕（信号）</span><br><span class="line">            * 接收服务器端返回的处理结果</span><br><span class="line">     */</span><br><span class="line">        xhr.onreadystatechange = function () &#123;</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">                XMLHttpRequest对象的readyStatee属性</span></span><br><span class="line"><span class="comment">                * 作用 - 表示服务器端的通信状态</span></span><br><span class="line"><span class="comment">                * 值</span></span><br><span class="line"><span class="comment">                    * 0 - 未初始化</span></span><br><span class="line"><span class="comment">                    * 1 - open()方法被调用</span></span><br><span class="line"><span class="comment">                    * 2 - send()方法被调用</span></span><br><span class="line"><span class="comment">                    * 3 - 正在响应</span></span><br><span class="line"><span class="comment">                    * 4 - 响应已完毕</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">          <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                接收服务器端返回的处理结果</span></span><br><span class="line"><span class="comment">                XMLHttpRequest对象的responseText属性</span></span><br><span class="line"><span class="comment">                * 作用 - 用于接收服务器端的响应结果</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        5. 将接收到的结果更新到HTML页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>实现效果如下</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/%E5%AE%9E%E7%8E%B0Ajax%E7%9A%84%E6%89%A7%E8%A1%8C%E6%AD%A5%E9%AA%A4.gif" alt="" /></p></li></ul><h2 id="a-id创建ajax的核心对象创建ajax的核心对象a"><a class="markdownIt-Anchor" href="#a-id创建ajax的核心对象创建ajax的核心对象a"></a> <a id="创建Ajax的核心对象">创建Ajax的核心对象</a></h2><p>虽然XMLHttpRequest对象目前由W3C组织进行标准化，但在不同浏览器中，创建的方式略有不同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXMLHttpRequest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> httpRequest;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        <span class="comment">// 适用于Chrome,Firefox,Safari,...</span></span><br><span class="line">        httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</span><br><span class="line">        <span class="comment">// 适用于IE浏览器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          httpRequest = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>); <span class="comment">// IE7+</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            httpRequest = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>); <span class="comment">// IE6-</span></span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> httpRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>XMLHttpRequest继承关系</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/XMLHttpRequest%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="" /></p><p>具体请参考 MDN上的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest</a></p></li></ul><h2 id="a-id通过ajax异步请求数据通过ajax异步请求数据a"><a class="markdownIt-Anchor" href="#a-id通过ajax异步请求数据通过ajax异步请求数据a"></a> <a id="通过Ajax异步请求数据">通过Ajax异步请求数据</a></h2><p>通过Ajax异步请求数据是通过XMLHttpRequest对象的send()方法实现，语法结构如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpRequest.send(data);</span><br></pre></td></tr></table></figure><ul><li>data:表示请求的数据内容。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">httpRequest.send(<span class="literal">null</span>);</span><br><span class="line">httpRequest.send(<span class="string">'name=wolongxueyuan&amp;password=123456'</span>);</span><br></pre></td></tr></table></figure><p>如果该请求是异步模式(默认)，该方法会立刻返回。相反，如果请求是同步模式，则直到请求的响应完全接受以后，该方法才会返回。</p><h3 id="提交表单时向服务器端发送数据"><a class="markdownIt-Anchor" href="#提交表单时向服务器端发送数据"></a> 提交表单时，向服务器端发送数据</h3><ul><li>请求数据被添加请求链接地址中 - ?user=maxiaoyu&amp;pwd=123456<ul><li>请求数据的格式<ol><li>如果具有多个请求数据的话，之间使用&quot;&amp;&quot;进行分隔</li><li>每个数据格式 -&gt; name=value</li></ol></li></ul></li></ul><h3 id="向服务器端发送请求数据"><a class="markdownIt-Anchor" href="#向服务器端发送请求数据"></a> 向服务器端发送请求数据</h3><blockquote><p>send(data)方法</p></blockquote><ul><li><p>参数data - 表示要向服务器端发送的请求数据</p></li><li><p>请求方式</p><ul><li>如果当前的请求方式为GET的话 - send()方法中只能传递null值</li><li>将请求数据添加到请求地址链接中</li></ul></li><li><p>两种情况</p><ul><li>发送数据 - user=maxiaoyu&amp;pwd=123456<ul><li>请求数据的格式<ol><li>如果具有多个请求数据的话，之间使用&quot;&amp;&quot;进行分隔</li><li>每个数据格式 -&gt; name=value</li></ol></li></ul></li><li>不发送数据 - send()方法中必须传递null值，而不能为空</li></ul></li><li><p>代码演示</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">name</span>=<span class="string">"user"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="actionscript">      btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 实现Ajax的异步交互</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   console.log(xhr.readyState);</span></span></span><br><span class="line">          if (xhr.readyState === 4) &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(xhr.status);</span></span><br><span class="line">            if (xhr.status === 200) &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(xhr.responseText);</span></span><br><span class="line">            &#125;</span><br><span class="line">            if (xhr.status === 404) &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">"服务器端地址未找到"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        xhr.open(<span class="string">"get"</span>, <span class="string">"https://extheor.github.io/"</span>);</span></span><br><span class="line">          </span><br><span class="line"><span class="actionscript">        <span class="comment">// 人为方式获取当前的数据，构建成制定的数据格式</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        xhr.send(<span class="string">"user=maxiaoyu&amp;pwd=123456"</span>);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击按钮实现以下效果，请求URL为 <code>http://127.0.0.1:5501/05_send()%E6%96%B9%E6%B3%95.html</code></p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/send()%E6%96%B9%E6%B3%951.gif" alt="" /></p><p>点击表单提交实现以下效果，请求URL为 <code>http://127.0.0.1:5501/05_send()%E6%96%B9%E6%B3%95.html?user=maxiaoyu&amp;pwd=123456</code></p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/send()%E6%96%B9%E6%B3%952.gif" alt="" /></p><p>**<code>XMLHttpRequest.send()</code> **方法用于发送 HTTP 请求。如果是异步请求（默认为异步请求），则此方法会在请求发送后立即返回；如果是同步请求，则此方法直到响应到达后才会返回。XMLHttpRequest.send() 方法接受一个可选的参数，其作为请求主体；如果请求方法是 GET 或者 HEAD，则应将请求主体设置为 null。</p><p>如果没有使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader" target="_blank" rel="noopener"><code>setRequestHeader()</code></a> 方法设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept" target="_blank" rel="noopener"><code>Accept</code></a> 头部信息，则会发送带有 <code>&quot;* / *&quot;</code> 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept" target="_blank" rel="noopener"><code>Accept</code></a> 头部。</p><p>send()方法的使用具体可参考MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/send" target="_blank" rel="noopener">XMLHttpRequest.send()</a></p><p>既然请求方法是GET的话，send()方法只能设置为null值，那么我的请求数据应该在哪儿写呢？</p><ul><li><p>将请求数据添加到请求地址链接中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"https://extheor.github.io/?user=maxiaoyu&amp;pwd=123456"</span>);</span><br></pre></td></tr></table></figure></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/send()%E6%96%B9%E6%B3%952.gif" alt="" /></p><p>但是GET请求数据是有问题的，我们发现这请求数据是被写死掉的，我们以后是要动态获取数据的，所以不会用GET请求的</p><h2 id="a-id请求方式请求方式a"><a class="markdownIt-Anchor" href="#a-id请求方式请求方式a"></a> <a id="请求方式">请求方式</a></h2><h3 id="get请求方式"><a class="markdownIt-Anchor" href="#get请求方式"></a> GET请求方式</h3><p>Ajax异步交互中使用GET请求方式的话，需要注意以下几个问题:</p><ol><li><p>将构建的请求数据添加到open()方法中的url地址中，如下示例代码所示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">httpRequest.open(<span class="string">'GET'</span>,</span><br><span class="line"><span class="string">'http://www.wolongxueyuan.org/some.file?name=wolongxueyuan&amp;password=123456'</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>上述示例代码中，“name=wolongxueyuan&amp;password=123456”表示请求数据</p></li><li><p>将发送请求数据的send()方法中参数设置为null值，如下示例代码所示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpRequest.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>POST请求数据代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="actionscript">      btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 实现Ajax的异步交互</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   console.log(xhr.readyState);</span></span></span><br><span class="line">          if (xhr.readyState === 4) &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(xhr.status);</span></span><br><span class="line">            if (xhr.status === 200) &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(xhr.responseText);</span></span><br><span class="line">            &#125;</span><br><span class="line">            if (xhr.status === 404) &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">"服务器端地址未找到"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        xhr.open(<span class="string">"post"</span>, <span class="string">"https://extheor.github.io/"</span>);</span></span><br><span class="line">        /*</span><br><span class="line">          send()方法 </span><br><span class="line"><span class="actionscript">          * 如果是GET, send()方法只能传递<span class="literal">null</span>值 -&gt; 请求数据添加在请求地址中 </span></span><br><span class="line">          * 如果是POST, send()方法传递请求数据</span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        xhr.send(<span class="string">"user=maxiaoyu&amp;pwd=123456"</span>);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F1.gif" alt="" /></p></li></ul><p>我们会看到在请求负载（Request Payload）中有 <code>user=maxiaoyu&amp;pwd=123456</code> 请求数据</p><h3 id="post请求方式"><a class="markdownIt-Anchor" href="#post请求方式"></a> POST请求方式</h3><p>Ajax异步交互中使用POST请求方式的话，需要注意以下几个问题:</p><ol><li><p>调用send(方法之前，需要通过XMLHttpRequest对象的setRequestHleader()方法设置请求头信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpRequest.setRequestHeader(header, value);</span><br></pre></td></tr></table></figure><ul><li>header:将要被赋值的请求头名称。</li><li>value:给指定的请求头赋的值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpRequest.setRequestHeader(<span class="string">'Content-Type'</span> , <span class="string">'application/x-www-form-urlencoded'</span>);</span><br></pre></td></tr></table></figure></li><li><p>通过XMLHttpRequest对象的send()发送请求数据。</p></li></ol><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="actionscript">      btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 实现Ajax的异步交互</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   console.log(xhr.readyState);</span></span></span><br><span class="line">          if (xhr.readyState === 4) &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(xhr.status);</span></span><br><span class="line">            if (xhr.status === 200) &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(xhr.responseText);</span></span><br><span class="line">            &#125;</span><br><span class="line">            if (xhr.status === 404) &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">"服务器端地址未找到"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        xhr.open(<span class="string">"post"</span>, <span class="string">"https://extheor.github.io/"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 设置请求头部信息</span></span></span><br><span class="line">        xhr.setRequestHeader(</span><br><span class="line"><span class="actionscript">          <span class="string">"Content-Type"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"application/x-www-form-urlencoded"</span></span></span><br><span class="line">        );</span><br><span class="line">        /*</span><br><span class="line">          send()方法</span><br><span class="line"><span class="actionscript">          * 如果是GET, send()方法只能传递<span class="literal">null</span>值 -&gt; 请求数据添加在请求地址中</span></span><br><span class="line">          * 如果是POST, send()方法传递请求数据</span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        xhr.send(<span class="string">"user=maxiaoyu&amp;pwd=123456"</span>);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现效果如下</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F2.gif" alt="" /></p><p>我们会看到在表单数据（Form Data）中有user: maxiaoyu、pwd: 123456格式的请求数据</p><h2 id="a-idajax异步交互ajax异步交互a"><a class="markdownIt-Anchor" href="#a-idajax异步交互ajax异步交互a"></a> <a id="Ajax异步交互">Ajax异步交互</a></h2><p>用get请求真实的服务器</p><ul><li>首先需要写一个服务器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Node.js中的http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="comment">// 定义当前服务的IP地址和端口号</span></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">"127.0.0.1"</span>; <span class="comment">// 表示本机</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * createServer(callback)方法 - 表示创建一个服务</span></span><br><span class="line"><span class="comment"> * * callback - 表示回调函数</span></span><br><span class="line"><span class="comment"> *   function(request, response)&#123;&#125;</span></span><br><span class="line"><span class="comment"> *   * request - 表示请求(用于接收客户端发送给服务端的请求)</span></span><br><span class="line"><span class="comment"> *   * response - 表示响应(用于接收服务器端发送给客户端的处理结果)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span>;</span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">  res.end(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(port, hostname, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>然后再写一个Ajax异步交互代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax异步交互<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="actionscript">      btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 实现Ajax的异步交互</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   console.log(xhr.readyState);</span></span></span><br><span class="line">          if (xhr.readyState === 4) &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(xhr.status);</span></span><br><span class="line">            if (xhr.status === 200) &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(xhr.responseText);</span></span><br><span class="line">            &#125;</span><br><span class="line">            if (xhr.status === 404) &#123;</span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">"服务器端地址未找到"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        xhr.open(<span class="string">"get"</span>, <span class="string">"http://127.0.0.1:3000"</span>);</span></span><br><span class="line"><span class="actionscript">        xhr.send(<span class="literal">null</span>);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现效果如下</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/%E8%B7%A8%E5%9F%9F%E9%94%99%E8%AF%AF.png" alt="" /></p><p>会出现如图之错误，这就是浏览器的跨域限制</p><p>那怎么办呢？只需要在Header上加上一行代码即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/%E8%B7%A8%E5%9F%9F%E6%AD%A3%E7%A1%AE.png" alt="" /></p>]]></content>
    
    <summary type="html">
    
      实现Ajax异步交互
    
    </summary>
    
    
      <category term="Ajax" scheme="https://extheor.github.io/categories/Ajax/"/>
    
    
      <category term="ajax" scheme="https://extheor.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的JSON</title>
    <link href="https://extheor.github.io/posts/6b2f046/index.html"/>
    <id>https://extheor.github.io/posts/6b2f046/index.html</id>
    <published>2020-09-03T14:44:15.000Z</published>
    <updated>2020-09-03T14:53:40.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="javascript中的json"><a class="markdownIt-Anchor" href="#javascript中的json"></a> JavaScript中的JSON</h1><h2 id="javascript与json"><a class="markdownIt-Anchor" href="#javascript与json"></a> JavaScript与JSON</h2><p>JSON是一种语法，用来序列化对象、数组、数值、字符串、布尔值和null。它基于JavaScript语法，但与之不同:JavaScript不是JSON，JSON也不是JavaScripto</p><table><thead><tr><th>JavaScript类型</th><th>JSON的不同点</th></tr></thead><tbody><tr><td>对象和数组</td><td>属性名称必须是双引号括起来的字符串;最后一个属性后不能有逗号</td></tr><tr><td>数值</td><td>禁止出现前导零</td></tr><tr><td>字符串</td><td>只有有限的一些字符可能被转义</td></tr></tbody></table><h2 id="json字符串与json对象"><a class="markdownIt-Anchor" href="#json字符串与json对象"></a> JSON字符串与JSON对象</h2><ul><li><p>JSON字符串就是指在JavaScript语言中内容格式符合JSON格式的字符串类型的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonText = <span class="string">'&#123;"name":"卧龙学苑" "addr":"保定市复兴中路77号直隶大厦1516室"&#125;'</span>;</span><br></pre></td></tr></table></figure></li><li><p>JSON对象就是指JSON格式在JavaScript语言中的具体表现形式为对象或数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObject= &#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"卧龙学苑"</span>,</span><br><span class="line">    <span class="string">"addr"</span>:<span class="string">"保定市复兴中路77号直隶大厦1516室"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript中的JSON<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// JSON字符串 - 数据格式符合JSON格式的要求，类型是字符串类型</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> jsonString = <span class="string">'&#123;"name" : "张无忌"&#125;'</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// JSON对象 - JSON数据格式在JavaScript中的具体表现(对象和数组)</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> jsonObject = &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"张无忌"</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> jsonArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="javascript的json对象"><a class="markdownIt-Anchor" href="#javascript的json对象"></a> JavaScript的JSON对象</h2><p>JavaScript语言中存在UJSON对象，该对象用于实现字符串与对象之间的转换。其提供以下两个方法:</p><ul><li><p>JSON.parse()方法:解析JSON字符串并返回对应的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">''</span>);<span class="comment">//0&#125;</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">'true'</span>);<span class="comment">// true</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">""</span>foo<span class="string">""</span>);<span class="comment">// "foo"</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">'[1,5, "false"]'</span>);<span class="comment">//[1,5, "false"]</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">'null'</span>); <span class="comment">// null</span></span><br></pre></td></tr></table></figure></li><li><p>JSON.stringify()方法:返回与指定值对应的JSON字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(&#123;&#125;);<span class="comment">// '&#123;&#125;'</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="literal">true</span>);<span class="comment">// 'true'</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">"foo"</span>);<span class="comment">// "foo"</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify([<span class="number">1</span>, <span class="string">"false"</span>, <span class="literal">false</span>]);<span class="comment">//'[1,"false",false]'</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">x</span>: <span class="number">5</span> &#125;);<span class="comment">// '&#123;"x":5&#125;'</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><font color="red"><b>注意：</b></font>JSON对象在旧版本的浏览器中不被支持，引人json2.js文件进行解决。</p></blockquote><ul><li><p>JSON字符串转化为JSON对象（JSON.parse()）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> jsonString = <span class="string">'&#123;"name" : "张无忌"&#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonObject = <span class="built_in">JSON</span>.parse(jsonString);</span><br><span class="line"><span class="built_in">console</span>.log(jsonObject);</span><br></pre></td></tr></table></figure></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200901215941303.png#pic_center" alt="在这里插入图片描述" /></p><ul><li><p>JSON对象转化为JSON字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObject = &#123; <span class="attr">name</span>: <span class="string">"张无忌"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonString = <span class="built_in">JSON</span>.stringify(jsonObject);</span><br><span class="line"><span class="built_in">console</span>.log(jsonString);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> jsonString);</span><br></pre></td></tr></table></figure></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200901215956472.png#pic_center" alt="在这里插入图片描述" /></p>]]></content>
    
    <summary type="html">
    
      JavaScript中的JSON
    
    </summary>
    
    
      <category term="Ajax" scheme="https://extheor.github.io/categories/Ajax/"/>
    
    
      <category term="ajax" scheme="https://extheor.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Ajax中的JSON</title>
    <link href="https://extheor.github.io/posts/7000d139/index.html"/>
    <id>https://extheor.github.io/posts/7000d139/index.html</id>
    <published>2020-09-03T14:41:15.000Z</published>
    <updated>2020-09-03T14:53:40.755Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="ajax中的-json"><a class="markdownIt-Anchor" href="#ajax中的-json"></a> Ajax中的 JSON</h1><h2 id="构建-json格式数据"><a class="markdownIt-Anchor" href="#构建-json格式数据"></a> 构建 JSON格式数据</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax中的JSON<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="actionscript">      btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">          if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 1. 接收数据 - JSON数据格式，是字符串类型</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> data = xhr.responseText;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 2. 将符合JSON格式的字符串类型数据进行转换</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(data);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3. 进行具体处理</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(json);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        xhr.open(<span class="string">"post"</span>, <span class="string">"server.json"</span>);</span></span><br><span class="line"></span><br><span class="line">        xhr.setRequestHeader(</span><br><span class="line"><span class="actionscript">          <span class="string">"Content-Type"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"application/x-www-form-urlencoded"</span></span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="actionscript">          name: <span class="string">"周芷若"</span>,</span></span><br><span class="line">          age: 18,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        xhr.send(<span class="string">"name="</span> + obj.name + <span class="string">"&amp;age="</span> + obj.age);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>返回结果如下</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200901220045447.png#pic_center" alt="在这里插入图片描述" /></p><h2 id="接收json格式数据"><a class="markdownIt-Anchor" href="#接收json格式数据"></a> 接收JSON格式数据</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax中的JSON<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="actionscript">      btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">          if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 1. 接收数据 - JSON数据格式，是字符串类型</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> data = xhr.responseText;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 2. 将符合JSON格式的字符串类型数据进行转换</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(data);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3. 进行具体处理</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(json);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        xhr.open(<span class="string">"get"</span>, <span class="string">"server.json"</span>);</span></span><br><span class="line"><span class="actionscript">        xhr.send(<span class="literal">null</span>);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200901220053104.png#pic_center" alt="在这里插入图片描述" /></p><h2 id="补充-xml"><a class="markdownIt-Anchor" href="#补充-xml"></a> 补充 XML</h2><p>xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>张无忌<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ajax中的XML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax中的XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/createXMLHttpRequest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="actionscript">      btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> xhr = createXMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">          if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 1. 接收数据 - responseXML属性 -&gt; 接收XML数据格式</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> data = xhr.responseXML;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 2. 利用DOM解析XML即可</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> nameElement = data.getElementsByTagName(<span class="string">"name"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(nameElement.textContent); <span class="comment">// 张无忌</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        xhr.open(<span class="string">"get"</span>, <span class="string">"server.xml"</span>);</span></span><br><span class="line"><span class="actionscript">        xhr.send(<span class="literal">null</span>);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Ajax中的JSON
    
    </summary>
    
    
      <category term="Ajax" scheme="https://extheor.github.io/categories/Ajax/"/>
    
    
      <category term="ajax" scheme="https://extheor.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Ajax同步交互与异步交互</title>
    <link href="https://extheor.github.io/posts/10812f0/index.html"/>
    <id>https://extheor.github.io/posts/10812f0/index.html</id>
    <published>2020-09-03T14:38:55.000Z</published>
    <updated>2020-09-03T14:53:40.758Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h2 id="ajax同步交互与异步交互"><a class="markdownIt-Anchor" href="#ajax同步交互与异步交互"></a> Ajax同步交互与异步交互</h2><h2 id="同步交互是什么"><a class="markdownIt-Anchor" href="#同步交互是什么"></a> 同步交互是什么</h2><p>所谓同步交互，就是指发送一个请求，需要等待返回，然后才能够发送下一个请求。同步交互相当于排队，轮到下一个的情况会因为前一个而有所不同。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/%E5%90%8C%E6%AD%A5%E4%BA%A4%E4%BA%92%E6%98%AF%E4%BB%80%E4%B9%88.png" alt="" /></p><blockquote><p><font color="red"><b>说明：</b></font>同步交互就是第二次请求必须等待第一次请求结束之后才可以开始。</p></blockquote><h2 id="异步交互是什么"><a class="markdownIt-Anchor" href="#异步交互是什么"></a> 异步交互是什么</h2><p>所谓异步交互，就是指指发送一个请求，不需要等待返回，随时可以再发送下一个请求。同步交互与异步交互的区别在于同步交互需要等待结果，而异步交互不需要等待。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/%E5%90%8C%E6%AD%A5%E4%BA%A4%E4%BA%92%E6%98%AF%E4%BB%80%E4%B9%88.png" alt="" /></p><blockquote><p><font color="red"><b>说明：</b></font>异步交互就是第二次请求不需要等待第一次请求结束之后就可以开始。</p></blockquote><h2 id="异步交互的优势"><a class="markdownIt-Anchor" href="#异步交互的优势"></a> 异步交互的优势</h2><p>异步交互相比同步交互的优势主要具有以下几点:</p><ul><li>用户操作无须像同步交互必须等待结果。</li><li>异步交互只需与服务器端交换必要的数据内容，而不是将所有数据全部更新。</li><li>异步交互对带宽造成的压力相比同步交互更小。</li><li>通过Ajax实现异步交互不需要任何第三方插件，只要刘览器支持JavaScript语言即可实现。</li></ul><h2 id="异步交互的劣势"><a class="markdownIt-Anchor" href="#异步交互的劣势"></a> 异步交互的劣势</h2><p>异步交互相比同步交互并不是优势，它也存在一些问题:</p><ul><li>异步交互破坏了刘览器原有的前进和后退机制。</li><li>如果后面逻辑的执行依靠前面逻辑执行的结果的话，异步交互可能会造成问题。</li><li>Ajax实现异步交互对搜索引擎支持较弱。</li><li>Ajax实现异步交互会引起一些Web安全问题，例如SQL注入攻击、跨站点脚本攻击等问题。</li></ul><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/ajax%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5%E4%BA%A4%E4%BA%92.png" alt="" /></p>]]></content>
    
    <summary type="html">
    
      Ajax同步交互与异步交互
    
    </summary>
    
    
      <category term="Ajax" scheme="https://extheor.github.io/categories/Ajax/"/>
    
    
      <category term="ajax" scheme="https://extheor.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Ajax是什么</title>
    <link href="https://extheor.github.io/posts/a27042c6/index.html"/>
    <id>https://extheor.github.io/posts/a27042c6/index.html</id>
    <published>2020-09-03T14:36:15.000Z</published>
    <updated>2020-09-03T14:53:40.752Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="ajax是什么"><a class="markdownIt-Anchor" href="#ajax是什么"></a> Ajax是什么</h1><p>Ajax是Asynchronous JavaScript XML的缩写，被译为异步JavaScript和XML。Ajax本身并不是一个新技术，而是一个在2005年被Jesse James Garrett提出的新术语，用来描述一种使用现有技术集合的“新”方法。</p><p>当使用Ajax模型，HTML页面能够快速地将数据逐步更新显示在用户界面上，不需要重载（刷新）整个页面。这使得HTML页面能成更快速地对用户的操作进行反馈。</p><p>尽管Ajax中的“X”代表XML，但由于JSON的许多优势，目前JSON的使用比XML更加普遍。</p><p>JSON和XML都被用于在Ajax模型中封装数据。</p><ul><li><p>典型异步场景</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/%E5%85%B8%E5%9E%8B%E5%BC%82%E6%AD%A5%E5%9C%BA%E6%99%AF.png" alt="" /></p><p><strong>当我在浏览器搜索东西 时候，搜索引擎会自动列出你可能需要的网页，并且这些东西会实时更新，这就是我理解的异步操作</strong></p></li></ul><h2 id="ajax涉及的技术"><a class="markdownIt-Anchor" href="#ajax涉及的技术"></a> Ajax涉及的技术</h2><p>Ajax只是为实现异步交互的手段，不是一种技术，而是多种技术的整合。其中包括以下几种技术:</p><ul><li><p>HTML页面</p></li><li><p>Cascading Style Sheets ( CSS)</p></li><li><p>JavaScript脚本语言</p></li><li><p>Document Object Model ( DOM)</p></li><li><p>XML</p></li><li><p>XMLHttpRequest对象</p><p>上述技术中，XMLHttpRequest对象是实现Ajax异步交互的核心。</p></li></ul><h2 id="ajax的工作原理"><a class="markdownIt-Anchor" href="#ajax的工作原理"></a> Ajax的工作原理</h2><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Ajax%E5%9B%BE%E7%89%87/Ajax%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="" /></p><blockquote><p><font color="red"><b>说明：</b></font>Ajax异步交互的整体执行流程过程中，HTML页面是不被更新的。只是更新部分数据内容。</p></blockquote><h2 id="ajax的核心对象"><a class="markdownIt-Anchor" href="#ajax的核心对象"></a> Ajax的核心对象</h2><p>实现Ajax异步交互的核心就是XMLHttpRequest对象，该对象为客户端提供了在客户端和服务器之间传输数据的功能。</p><p>XMLHttpRequest对象提供了一个通过URL来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。</p><p>XMLHttpRequest对象最初由微软设计，随后被Mozilla、Apple和Google采纳。如今，该对象已经<br />被W3C组织标准化。通过该对象，可以很容易地得到一个URL上的资源数据。尽管名字里有XML，<br />但XMLHttpRequest对象可以得到所有类型的数据资源，并不局限于XML格式的数据。</p>]]></content>
    
    <summary type="html">
    
      Ajax是什么
    
    </summary>
    
    
      <category term="Ajax" scheme="https://extheor.github.io/categories/Ajax/"/>
    
    
      <category term="ajax" scheme="https://extheor.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>怎么使用Nginx服务开启HTTPS</title>
    <link href="https://extheor.github.io/posts/1c5a0485/index.html"/>
    <id>https://extheor.github.io/posts/1c5a0485/index.html</id>
    <published>2020-08-19T01:00:35.000Z</published>
    <updated>2020-08-19T01:02:53.588Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="怎么使用nginx服务开启https"><a class="markdownIt-Anchor" href="#怎么使用nginx服务开启https"></a> 怎么使用Nginx服务开启HTTPS</h1><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/%E6%B1%82%E5%85%B3%E6%B3%A8.jpg" alt="" /></p><h2 id="https的工作流程"><a class="markdownIt-Anchor" href="#https的工作流程"></a> HTTPS的工作流程</h2><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTPS.png" alt="" /></p><ol><li>首先在nginx目录下新建 <code>certs</code> 文件夹，右击用 <code>Git Bash Here</code> 打开，输入命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:2048 -nodes -sha256 -keyout localhost-privkey.pem -out localhost-cert.pem</span><br></pre></td></tr></table></figure><ol start="2"><li>然后在配置一个文件就行了</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path cache levels&#x3D;1:2 keys_zone&#x3D;my_cache:10m;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  test.com;</span><br><span class="line">    return 302 https:&#x2F;&#x2F;$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  test.com;</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate_key ..&#x2F;certs&#x2F;localhost-privkey.pem;</span><br><span class="line">    ssl_certificate ..&#x2F;certs&#x2F;localhost-cert.pem;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_cache my_cache;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8888;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTPS.gif" alt="" /></p><blockquote><p>如果对你有帮助的话，一键三连吧~</p><p>您的三连就是对我最大的鼓励👍</p></blockquote>]]></content>
    
    <summary type="html">
    
      怎么使用Nginx服务开启HTTPS
    
    </summary>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP消息</title>
    <link href="https://extheor.github.io/posts/d090b4d/index.html"/>
    <id>https://extheor.github.io/posts/d090b4d/index.html</id>
    <published>2020-08-19T00:52:24.000Z</published>
    <updated>2020-08-19T01:02:53.585Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="http消息"><a class="markdownIt-Anchor" href="#http消息"></a> HTTP消息</h1><h2 id="请求头"><a class="markdownIt-Anchor" href="#请求头"></a> 请求头</h2><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/%E8%AF%B7%E6%B1%82%E5%A4%B4.png" alt="" /></p><h2 id="响应头"><a class="markdownIt-Anchor" href="#响应头"></a> 响应头</h2><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/%E5%93%8D%E5%BA%94%E5%A4%B4.png" alt="" /></p><h2 id="成功响应"><a class="markdownIt-Anchor" href="#成功响应"></a> 成功响应</h2><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/%E6%88%90%E5%8A%9F%E5%93%8D%E5%BA%94.png" alt="" /></p><h2 id="重定向"><a class="markdownIt-Anchor" href="#重定向"></a> 重定向</h2><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/%E9%87%8D%E5%AE%9A%E5%90%91.png" alt="" /></p><h2 id="客户端响应"><a class="markdownIt-Anchor" href="#客户端响应"></a> 客户端响应</h2><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%93%8D%E5%BA%94.png" alt="" /></p><h2 id="服务端响应"><a class="markdownIt-Anchor" href="#服务端响应"></a> 服务端响应</h2><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%93%8D%E5%BA%94.png" alt="" /></p>]]></content>
    
    <summary type="html">
    
      HTTP消息
    
    </summary>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP缓存</title>
    <link href="https://extheor.github.io/posts/8837602f/index.html"/>
    <id>https://extheor.github.io/posts/8837602f/index.html</id>
    <published>2020-08-19T00:52:24.000Z</published>
    <updated>2020-08-19T01:02:53.586Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="http缓存解释为何页面响应的数据和服务端的不一致"><a class="markdownIt-Anchor" href="#http缓存解释为何页面响应的数据和服务端的不一致"></a> HTTP缓存解释为何页面响应的数据和服务端的不一致</h1><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/%E6%B1%82%E5%85%B3%E6%B3%A8.jpg" alt="" /></p><h3 id="用途"><a class="markdownIt-Anchor" href="#用途"></a> 用途</h3><p>HTTP缓存主要用在对一些实时性要求不高的静态文件进行的缓存，往往都是存在浏览器端，防止这些“多余”的请求重复的访问服务器，对服务器造成压力，从而提高网站的性能。</p><h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><p>现有两端，浏览器和服务器端。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%981.png" alt="" /></p><p>浏览器向服务器发送请求，获取一个文件f</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%982.png" alt="" /></p><p>服务器就把f给返回浏览器</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%983.png" alt="" /></p><p>假如这个文件的内容变化不是那么快，一两周更新一次，浏览器每次请求服务器都返回相同的文件，岂不是对服务器资源的一种浪费？</p><p>如何解决呢？</p><p>浏览器把请求后拿到的文件存到本地，等下次请求的时候，看看本地是否有缓存文件，如果有，直接拿本地的文件，岂不是就不用请求服务器了？这其实就是http缓存的最最根本的原理。</p><p>浏览器端把请求来的文件缓存到如图下f的小方格内<br /><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%984.png" alt="" /></p><p>等到下次浏览器端再次请求此文件时，就直接从浏览器缓存的文件中拿，而不再向服务器端发起请求了</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%985.png" alt="" /></p><p>以下浏览器截图中标红的部分，就是没有发起请求，直接从浏览器缓存中获取的数据</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%986.png" alt="" /></p><h3 id="两种缓存方式"><a class="markdownIt-Anchor" href="#两种缓存方式"></a> 两种缓存方式</h3><p>浏览器端有了缓存之后，不能一直有效吧，如果文件更新了，我们还继续使用浏览器缓存中的数据，虽说时效性不强，但长期使用旧文件也不算合理吧。</p><p>http协议提供了两种维度来让缓存失效：时间和文件的修改。</p><h2 id="可缓存性"><a class="markdownIt-Anchor" href="#可缓存性"></a> 可缓存性</h2><ul><li><p>public</p><blockquote><p>客户端和代理服务器都可以缓存，大部分情况可以认为public和private是一样的</p></blockquote></li><li><p>private</p><blockquote><p>客户端可以缓存</p></blockquote></li><li><p>no-cache</p><blockquote><p>需要使用另外一种http缓存策略来验证缓存数据</p></blockquote></li></ul><h2 id="到期"><a class="markdownIt-Anchor" href="#到期"></a> 到期</h2><ul><li><p>max-age= <code>&lt;seconds&gt;</code></p><blockquote><p>缓存的内容将在 xxx 秒后失效（时间就是在这儿设置的）</p></blockquote></li><li><p>s-maxage= <code>&lt;seconds&gt;</code></p></li><li><p>max-stale= <code>&lt;seconds&gt;</code></p></li></ul><h2 id="重新验证"><a class="markdownIt-Anchor" href="#重新验证"></a> 重新验证</h2><ul><li><p>must-revalidate</p><blockquote><p>验证缓存是否到期了</p></blockquote></li><li><p>proxy-revalidate</p><blockquote><p>发送一个报头，告诉浏览器当前页面不进行缓存，每次访问的时间必须从服务器上读取最新的数据</p></blockquote></li></ul><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><ul><li><p>no-store</p><blockquote><p>所有缓存策略都不会进行（这里指的是两种缓存策略都不会进行）</p></blockquote></li></ul><h2 id="cache-control-缓存原理"><a class="markdownIt-Anchor" href="#cache-control-缓存原理"></a> cache-control 缓存原理</h2><p>test.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>server.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"request come"</span>, request.url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (request.url === <span class="string">"/"</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> html = fs.readFileSync(<span class="string">"test.html"</span>, <span class="string">"utf8"</span>);</span><br><span class="line">      response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      response.end(html);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (request.url === <span class="string">"/script.js"</span>) &#123;</span><br><span class="line">      response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"text/javascript"</span>,</span><br><span class="line">        <span class="string">"Cache-Control"</span>: <span class="string">"max-age=60"</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      response.end(<span class="string">"console.log('script loaded  twice')"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"服务器开启了 - 8888"</span>);</span><br></pre></td></tr></table></figure><p>第一次访问请求，客户端向服务端发起一个文件请求，服务器返回文件并在<code>response</code>中加了响应头&quot;Cache-Control:max-age=60&quot;，这样一来，这个f文件只能在浏览器端存60秒</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%987.png" alt="" /></p><p>在这60秒钟，客户端请求服务器的f文件会直接从缓存中拿取</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%985.png" alt="" /></p><p>60秒过后，缓存失效，浏览器再次请求文件需要重新向服务器发起请求。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%982.png" alt="" /></p><p>注意：假如说请求中包含“Cache-Control:max-age=0”或者“Cache-Control:no-store”无论响应中返回的&quot;max-age&quot;值是多少，都不会缓存到服务器。浏览器中对于地址栏中直接输入文件地址的请求做了优化处理，加上了“Cache-Control:max-age=0”，也就是说，如果这个css、js或者其他静态文件是通过你在浏览器上直接输入获得的，将会每时每刻都是获取最新的。</p><h3 id="通过查看文件的修改来让缓存失效"><a class="markdownIt-Anchor" href="#通过查看文件的修改来让缓存失效"></a> 通过查看文件的修改来让缓存失效</h3><p>这种维度比较的科学：浏览器先请求服务获得文件后，服务器会返回该文件的最后修改时间<code>Last-Modified</code>，作为文件的一个标识，下次浏览器请求的时候，会带着这个标识去请求(此时为<code>If-Modified-Since</code>)，然后服务器做校验，如果说时间标识<code>If-Modified-Since</code>等于服务器的文件修改时间，则说明没有修改，返回304状态码，浏览器从缓存中获取文件，但是如果浏览器保存的时间标识<code>If-Modified-Since</code>小于服务器端的文件修改时间，那么，说明文件发生了修改，浏览器就会重新获取新的文件。<br />（<code>If-Modified-Since</code>的时间如果大于服务器端文件的时间，会被认为是错误的请求）</p><p>如图，浏览器C向服务器发S起请求，服务器返回文件的同时还会返回文件的最后修改时间<code>Last-Modified</code>作为文件时间标识，浏览器会将文件和文件时间标识都缓存起来。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%988.png" alt="" /></p><p>假如服务器端的文件f并没有被修改，服务器通过判断请求头带的时间标识<code>If-Modified-Since</code>得出结论后，都会返回状态码<code>304</code>告诉浏览器文件没有被修改，让浏览器使用缓存。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%989.png" alt="" /></p><p>假如服务器端的文件f修改了，那么，浏览器将重新获取文件，并缓存到浏览器中。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%9810.png" alt="" /></p><p>虽然通过文件最后修改时间作为标识已经很完美了，但是，还是可能存在一个问题：就是有可能服务器端的文件修改后，又改回原来的样子，这样，虽然文件最后修改时间变了，但是，文件内容并没有改变。这样还是会有多余的请求到达服务器，该如何处理呢？<br />可以将文件内容作为一个唯一标识，例如可以对文件内容取MD5值作为字段(<code>etag</code>)也传给浏览器端，假如这个文件内容没变化，那么MD5值也不会改变。那么，处理流程就变成了这样：服务器端先判断文件修改时间是否发生了变化，如果发生了变化，那么再对比浏览器传来的<code>If-None-Match</code>即浏览器端保留的<code>E-tag</code>值，如果发生了变化，则证明文件修改了，需要浏览器重新下载文件，如果没有，则证明文件内容没变化，返回304状态码。</p><p>如图，浏览器要访问服务器的f文件，服务器S返回了文件最后修改时间<code>Last-Modified</code>和文件的内容标识<code>E-tag</code>，浏览器将这两个字段及其文件缓存了起来</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%9811.png" alt="" /></p><p>当文件最后修改时间没变，文件内容也没变的时候，返回304，让浏览器从缓存中拿取文件。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%9812.png" alt="" /></p><p>当文件最后修改时间变了，文件内容没变的时候，返回304，让浏览器从缓存中拿取文件。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%9812.png" alt="" /></p><p>当文件修改时间变了，文件内容也变了的时候，服务器会重新下发新的文件给浏览器。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTP%E7%BC%93%E5%AD%9813.png" alt="" /></p><p>此维度让缓存失效牵扯的http字段有点多，我们最后整理一下：<br />文件最后修改时间字段：</p><ul><li>Response：<code>Last-Modified</code></li><li>Request：<code>If-Modified-Since</code></li></ul><p>文件内容标识字段：</p><ul><li>Response：<code>E-tag</code></li><li>Request：<code>If-None-Match</code></li></ul><blockquote><p>众里寻他千百度，慕然回首，点关注</p><p>写文章不易，求三连~/</p></blockquote>]]></content>
    
    <summary type="html">
    
      HTTP缓存解释为何页面响应的数据和服务端的不一致
    
    </summary>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Nginx服务开启HTTP2</title>
    <link href="https://extheor.github.io/posts/eac19412/index.html"/>
    <id>https://extheor.github.io/posts/eac19412/index.html</id>
    <published>2020-08-19T00:52:24.000Z</published>
    <updated>2020-08-19T01:02:53.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="如何使用nginx服务开启http2"><a class="markdownIt-Anchor" href="#如何使用nginx服务开启http2"></a> 如何使用Nginx服务开启HTTP2</h1><ol><li>首先在Nginx配置文件中配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path cache levels&#x3D;1:2 keys_zone&#x3D;my_cache:10m;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  test.com;</span><br><span class="line">    return 302 https:&#x2F;&#x2F;$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 http2; # 配置HTTP2</span><br><span class="line">    server_name  test.com;</span><br><span class="line">    http2_push_preload on; # 配置HTTP2</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate_key ..&#x2F;certs&#x2F;localhost-privkey.pem;</span><br><span class="line">    ssl_certificate ..&#x2F;certs&#x2F;localhost-cert.pem;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_cache my_cache;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8888;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在server.js中要加上Link，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>,</span><br><span class="line">    Connection: <span class="string">"close"</span>,</span><br><span class="line">    Link: <span class="string">"&lt;/test.jpg&gt;; as=image; rel=preload"</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      如何使用Nginx服务开启HTTP2
    
    </summary>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP CSP详解</title>
    <link href="https://extheor.github.io/posts/149dde25/index.html"/>
    <id>https://extheor.github.io/posts/149dde25/index.html</id>
    <published>2020-08-19T00:51:16.000Z</published>
    <updated>2020-08-19T01:02:53.582Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="http-csp详解"><a class="markdownIt-Anchor" href="#http-csp详解"></a> HTTP CSP详解</h1><p>跨域脚本攻击 <a href="http://baike.baidu.com/view/2161269.htm" target="_blank" rel="noopener">XSS</a> 是最常见、危害最大的网页安全漏洞。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091301.png" alt="img" /></p><p>为了防止它们，要采取很多编程措施，非常麻烦。很多人提出，能不能根本上解决问题，浏览器自动禁止外部注入恶意脚本？</p><p>这就是&quot;网页安全政策&quot;（Content Security Policy，缩写 CSP）的来历。本文详细介绍如何使用 CSP 防止 XSS 攻击。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091302.jpg" alt="img" /></p><h2 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h2><p>CSP 的实质就是白名单制度，开发者明确告诉客户端，哪些外部资源可以加载和执行，等同于提供白名单。它的实现和执行全部由浏览器完成，开发者只需提供配置。</p><p>CSP 大大增强了网页的安全性。攻击者即使发现了漏洞，也没法注入脚本，除非还控制了一台列入了白名单的可信主机。</p><p>两种方法可以启用 CSP。一种是通过 HTTP 头信息的<code>Content-Security-Policy</code>的字段。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091305.jpg" alt="img" /></p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: script-src 'self'; object-src 'none';</span><br><span class="line">style-src cdn.example.org third-party.org; child-src https:</span><br></pre></td></tr></table></figure></blockquote><p>另一种是通过网页的``标签。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Security-Policy&quot; content&#x3D;&quot;script-src &#39;self&#39;; object-src &#39;none&#39;; style-src cdn.example.org third-party.org; child-src https:&quot;&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，CSP 做了如下配置。</p><blockquote><ul><li>脚本：只信任当前域名</li><li>``标签：不信任任何URL，即不加载任何资源</li><li>样式表：只信任<code>cdn.example.org</code>和<code>third-party.org</code></li><li>框架（frame）：必须使用HTTPS协议加载</li><li>其他资源：没有限制</li></ul></blockquote><p>启用后，不符合 CSP 的外部资源就会被阻止加载。</p><p>Chrome 的报错信息。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091303.png" alt="img" /></p><p>Firefox 的报错信息。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091306.png" alt="img" /></p><h2 id="二-限制选项"><a class="markdownIt-Anchor" href="#二-限制选项"></a> 二、限制选项</h2><p>CSP 提供了很多限制选项，涉及安全的各个方面。</p><h3 id="21-资源加载限制"><a class="markdownIt-Anchor" href="#21-资源加载限制"></a> 2.1 资源加载限制</h3><p>以下选项限制各类资源的加载。</p><blockquote><ul><li><strong><code>script-src</code></strong>：外部脚本</li><li><strong><code>style-src</code></strong>：样式表</li><li><strong><code>img-src</code></strong>：图像</li><li><strong><code>media-src</code></strong>：媒体文件（音频和视频）</li><li><strong><code>font-src</code></strong>：字体文件</li><li><strong><code>object-src</code></strong>：插件（比如 Flash）</li><li><strong><code>child-src</code></strong>：框架</li><li><strong><code>frame-ancestors</code></strong>：嵌入的外部资源（比如<frame>、<iframe>、<embed>和<applet>）</li><li><strong><code>connect-src</code></strong>：HTTP 连接（通过 XHR、WebSockets、EventSource等）</li><li><strong><code>worker-src</code></strong>：<code>worker</code>脚本</li><li><strong><code>manifest-src</code></strong>：manifest 文件</li></ul></blockquote><h3 id="22-default-src"><a class="markdownIt-Anchor" href="#22-default-src"></a> 2.2 default-src</h3><p><code>default-src</code>用来设置上面各个选项的默认值。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: default-src 'self'</span><br></pre></td></tr></table></figure></blockquote><p>上面代码限制<strong>所有的</strong>外部资源，都只能从当前域名加载。</p><p>如果同时设置某个单项限制（比如<code>font-src</code>）和<code>default-src</code>，前者会覆盖后者，即字体文件会采用<code>font-src</code>的值，其他资源依然采用<code>default-src</code>的值。</p><h3 id="23-url-限制"><a class="markdownIt-Anchor" href="#23-url-限制"></a> 2.3 URL 限制</h3><p>有时，网页会跟其他 URL 发生联系，这时也可以加以限制。</p><blockquote><ul><li><strong><code>frame-ancestors</code></strong>：限制嵌入框架的网页</li><li><strong><code>base-uri</code></strong>：限制``</li><li><strong><code>form-action</code></strong>：限制``</li></ul></blockquote><h3 id="24-其他限制"><a class="markdownIt-Anchor" href="#24-其他限制"></a> 2.4 其他限制</h3><p>其他一些安全相关的功能，也放在了 CSP 里面。</p><blockquote><ul><li><strong><code>block-all-mixed-content</code></strong>：HTTPS 网页不得加载 HTTP 资源（浏览器已经默认开启）</li><li><strong><code>upgrade-insecure-requests</code></strong>：自动将网页上所有加载外部资源的 HTTP 链接换成 HTTPS 协议</li><li><strong><code>plugin-types</code></strong>：限制可以使用的插件格式</li><li><strong><code>sandbox</code></strong>：浏览器行为的限制，比如不能有弹出窗口等。</li></ul></blockquote><h3 id="25-report-uri"><a class="markdownIt-Anchor" href="#25-report-uri"></a> 2.5 report-uri</h3><p>有时，我们不仅希望防止 XSS，还希望记录此类行为。<code>report-uri</code>就用来告诉浏览器，应该把注入行为报告给哪个网址。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: default-src 'self'; ...; report-uri /my_amazing_csp_report_parser;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码指定，将注入行为报告给<code>/my_amazing_csp_report_parser</code>这个 URL。</p><p>浏览器会使用<code>POST</code>方法，发送一个JSON对象，下面是一个例子。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"csp-report"</span>: &#123;</span><br><span class="line">    <span class="string">"document-uri"</span>: <span class="string">"http://example.org/page.html"</span>,</span><br><span class="line">    <span class="string">"referrer"</span>: <span class="string">"http://evil.example.com/"</span>,</span><br><span class="line">    <span class="string">"blocked-uri"</span>: <span class="string">"http://evil.example.com/evil.js"</span>,</span><br><span class="line">    <span class="string">"violated-directive"</span>: <span class="string">"script-src 'self' https://apis.google.com"</span>,</span><br><span class="line">    <span class="string">"original-policy"</span>: <span class="string">"script-src 'self' https://apis.google.com; report-uri http://example.org/my_amazing_csp_report_parser"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091304.png" alt="img" /></p><h2 id="三-content-security-policy-report-only"><a class="markdownIt-Anchor" href="#三-content-security-policy-report-only"></a> 三、Content-Security-Policy-Report-Only</h2><p>除了<code>Content-Security-Policy</code>，还有一个<code>Content-Security-Policy-Report-Only</code>字段，表示不执行限制选项，只是记录违反限制的行为。</p><p>它必须与<code>report-uri</code>选项配合使用。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy-Report-Only</span>: default-src 'self'; ...; report-uri /my_amazing_csp_report_parser;</span><br></pre></td></tr></table></figure></blockquote><h2 id="四-选项值"><a class="markdownIt-Anchor" href="#四-选项值"></a> 四、选项值</h2><p>每个限制选项可以设置以下几种值，这些值就构成了白名单。</p><blockquote><ul><li>主机名：<code>example.org</code>，<code>https://example.com:443</code></li><li>路径名：<code>example.org/resources/js/</code></li><li>通配符：<code>*.example.org</code>，<code>*://*.example.com:*</code>（表示任意协议、任意子域名、任意端口）</li><li>协议名：<code>https:</code>、<code>data:</code></li><li>关键字<code>'self'</code>：当前域名，需要加引号</li><li>关键字<code>'none'</code>：禁止加载任何外部资源，需要加引号</li></ul></blockquote><p>多个值也可以并列，用空格分隔。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: script-src 'self' https://apis.google.com</span><br></pre></td></tr></table></figure></blockquote><p>如果同一个限制选项使用多次，只有第一次会生效。</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 错误的写法</span><br><span class="line">script-src https://host1.com; script-src https://host2.com</span><br><span class="line"></span><br><span class="line"># 正确的写法</span><br><span class="line">script-src https://host1.com https://host2.com</span><br></pre></td></tr></table></figure></blockquote><p>如果不设置某个限制选项，就是默认允许任何值。</p><h2 id="五-script-src-的特殊值"><a class="markdownIt-Anchor" href="#五-script-src-的特殊值"></a> 五、script-src 的特殊值</h2><p>除了常规值，<code>script-src</code>还可以设置一些特殊值。注意，下面这些值都必须放在单引号里面。</p><blockquote><ul><li><strong><code>'unsafe-inline'</code></strong>：允许执行页面内嵌的<code>&lt;script&gt;</code>标签和事件监听函数</li><li><strong><code>unsafe-eval</code></strong>：允许将字符串当作代码执行，比如使用<code>eval</code>、<code>setTimeout</code>、<code>setInterval</code>和<code>Function</code>等函数。</li><li><strong>nonce值</strong>：每次HTTP回应给出一个授权token，页面内嵌脚本必须有这个token，才会执行</li><li><strong>hash值</strong>：列出允许执行的脚本代码的Hash值，页面内嵌脚本的哈希值只有吻合的情况下，才能执行。</li></ul></blockquote><p>nonce值的例子如下，服务器发送网页的时候，告诉浏览器一个随机生成的token。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: script-src 'nonce-EDNnf03nceIOfn39fn3e9h3sdfa'</span><br></pre></td></tr></table></figure></blockquote><p>页面内嵌脚本，必须有这个token才能执行。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script nonce=EDNnf03nceIOfn39fn3e9h3sdfa&gt;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>hash值的例子如下，服务器给出一个允许执行的代码的hash值。</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>: script-src 'sha256-qznLcsROx4GACP2dm0UCKCzCG-HiZ1guq6ZZDob_Tng='</span><br></pre></td></tr></table></figure></blockquote><p>下面的代码就会允许执行，因为hash值相符。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&#39;Hello, world.&#39;);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></blockquote><p>注意，计算hash值的时候，<script>标签不算在内。</p><p>除了<code>script-src</code>选项，nonce值和hash值还可以用在<code>style-src</code>选项，控制页面内嵌的样式表。</p><h2 id="六-注意点"><a class="markdownIt-Anchor" href="#六-注意点"></a> 六、注意点</h2><p>（1）<code>script-src</code>和<code>object-src</code>是必设的，除非设置了<code>default-src</code>。</p><p>因为攻击者只要能注入脚本，其他限制都可以规避。而<code>object-src</code>必设是因为 Flash 里面可以执行外部脚本。</p><p>（2）<code>script-src</code>不能使用<code>unsafe-inline</code>关键字（除非伴随一个nonce值），也不能允许设置<code>data:</code>URL。</p><p>下面是两个恶意攻击的例子。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;&quot;evil()&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;data:text&#x2F;javascript,evil()&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></blockquote><p>（3）必须特别注意 JSONP 的回调函数。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">src&#x3D;&quot;&#x2F;path&#x2F;jsonp?callback&#x3D;alert(document.domain)&#x2F;&#x2F;&quot;&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面的代码中，虽然加载的脚本来自当前域名，但是通过改写回调函数，攻击者依然可以执行恶意代码。</p>]]></content>
    
    <summary type="html">
    
      HTTP CSP详解
    
    </summary>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP Cookie详解</title>
    <link href="https://extheor.github.io/posts/fb684fb0/index.html"/>
    <id>https://extheor.github.io/posts/fb684fb0/index.html</id>
    <published>2020-08-19T00:50:24.000Z</published>
    <updated>2020-08-19T01:02:53.583Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="http-cookie详解"><a class="markdownIt-Anchor" href="#http-cookie详解"></a> HTTP Cookie详解</h1><p>Cookie总是保存在客户端中，按在客户端中的存储位置，可分为内存Cookie和硬盘Cookie。内存Cookie由浏览器维护，保存在内存中，浏览器关闭后就消失了，其存在时间是短暂的。硬盘Cookie保存在硬盘里，有一个过期时间，除非用户手工清理或到了过期时间，硬盘Cookie不会被删除，其存在时间是长期的。所以，按存在时间，可分为非持久Cookie和持久Cookie。</p><h2 id="http请求cookie的交互流程"><a class="markdownIt-Anchor" href="#http请求cookie的交互流程"></a> HTTP请求+cookie的交互流程</h2><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/Cookie.png" alt="" /></p><p>如果步骤5携带的是过期的cookie或者是错误的cookie，那么将认证失败，返回至要求身份认证页面。</p><h4 id="cookie的属性"><a class="markdownIt-Anchor" href="#cookie的属性"></a> cookie的属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"request come"</span>, request.url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> host = request.headers.host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (request.url === <span class="string">"/"</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> html = fs.readFileSync(<span class="string">"test.html"</span>, <span class="string">"utf8"</span>);</span><br><span class="line">      <span class="keyword">if</span> (host === <span class="string">"test.com:8888"</span>) &#123;</span><br><span class="line">        response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>,</span><br><span class="line">          <span class="string">"Set-Cookie"</span>: [<span class="string">"id=123; max-age=2"</span>, <span class="string">"abc=456; domain=test.com:8888"</span>],</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      response.end(html);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"服务器开启了 - 8888"</span>);</span><br></pre></td></tr></table></figure><p>一般cookie所具有的属性，包括：</p><p>Domain：域，表示当前cookie所属于哪个域或子域下面。</p><p>对于服务器返回的Set-Cookie中，如果没有指定Domain的值，那么其Domain的值是默认为当前所提交的http的请求所对应的主域名的。比如访问 <code>test.com:8888</code> ，返回一个cookie，没有指名domain值，那么其为值为默认的 <code>test.com:8888</code> 。</p><p>通过以上代码设置了主域名 <code>test.com:8888</code> 后通过浏览器访问 <code>a.test.com:8888</code> 、<code>b.test.com:8888</code> 等都是一样的，都会在请求头设置Cookie。</p><p>Path：表示cookie的所属路径。</p><p>Expire time/Max-age：表示了cookie的有效期。expire的值，是一个时间，过了这个时间，该cookie就失效了。或者是用max-age指定当前cookie是在多长时间之后而失效。如果服务器返回的一个cookie，没有指定其expire time，那么表明此cookie有效期只是当前的session，即是session cookie，当前session会话结束后，就过期了。对应的，当关闭（浏览器中）该页面的时候，此cookie就应该被浏览器所删除了。</p><p>secure：表示该cookie只能用https传输。一般用于包含认证信息的cookie，要求传输此cookie的时候，必须用https传输。</p><p>httponly：表示此cookie必须用于http或https传输。这意味着，浏览器脚本，比如javascript中，是不允许访问操作此cookie的。</p><h4 id="服务器发送cookie给客户端"><a class="markdownIt-Anchor" href="#服务器发送cookie给客户端"></a> <strong>服务器发送cookie给客户端</strong></h4><p>从服务器端，发送cookie给客户端，是对应的Set-Cookie。包括了对应的cookie的名称，值，以及各个属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>-Cookie: lu=Rg3vHJZnehYLjVg7qi3bZjzg; Expires=Tue, <span class="number">15</span> Jan <span class="number">2013</span> <span class="number">21</span>:<span class="number">47</span>:<span class="number">38</span> GMT; Path=<span class="regexp">/; Domain=.169it.com; HttpOnly</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Set-Cookie: made_write_conn=1295214458; Path=/</span>; Domain=<span class="number">.169</span>it.com</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set</span>-Cookie: reg_fb_gate=deleted; Expires=Thu, <span class="number">01</span> Jan <span class="number">1970</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">01</span> GMT; Path=<span class="regexp">/; Domain=.169it.com; HttpOnly</span></span><br></pre></td></tr></table></figure><h4 id="从客户端把cookie发送到服务器"><a class="markdownIt-Anchor" href="#从客户端把cookie发送到服务器"></a> 从客户端把cookie发送到服务器</h4><p>从客户端发送cookie给服务器的时候，是不发送cookie的各个属性的，而只是发送对应的名称和值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /spec.html HTTP/<span class="number">1.1</span>  </span><br><span class="line"></span><br><span class="line">Host: www.example.org  </span><br><span class="line"></span><br><span class="line">Cookie: name=value; name2=value2  </span><br><span class="line"></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br></pre></td></tr></table></figure><h4 id="关于修改设置cookie"><a class="markdownIt-Anchor" href="#关于修改设置cookie"></a> 关于修改，设置cookie</h4><p>除了服务器发送给客户端（浏览器）的时候，通过Set-Cookie，创建或更新对应的cookie之外，还可以通过浏览器内置的一些脚本，比如javascript，去设置对应的cookie，对应实现是操作js中的document.cookie。</p><h4 id="cookie的缺陷"><a class="markdownIt-Anchor" href="#cookie的缺陷"></a> Cookie的缺陷</h4><ul><li>cookie会被附加在每个HTTP请求中，所以无形中增加了流量。</li><li>由于在HTTP请求中的cookie是明文传递的，所以安全性成问题。（除非用HTTPS)</li><li>Cookie的大小限制在4KB左右。对于复杂的存储需求来说是不够用的。</li></ul>]]></content>
    
    <summary type="html">
    
      HTTP Cookie详解
    
    </summary>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP Connection详解</title>
    <link href="https://extheor.github.io/posts/69d79f93/index.html"/>
    <id>https://extheor.github.io/posts/69d79f93/index.html</id>
    <published>2020-08-19T00:23:16.000Z</published>
    <updated>2020-08-25T12:22:23.830Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="http-connection详解"><a class="markdownIt-Anchor" href="#http-connection详解"></a> HTTP Connection详解</h1><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/%E6%B1%82%E5%85%B3%E6%B3%A8.jpg" alt="" /></p><p>HTTP请求发送之前，需要先建立TCP连接，只有TCP连接建立，才可以发送HTTP请求。<br />当HTTP请求发送并响应完成，有两种情况，</p><table><thead><tr><th>操作</th><th>Are</th></tr></thead><tbody><tr><td>关闭TCP连接</td><td>当HTTP发送下一个请求的时候，需要在此进行三次握手，建立TCP连接</td></tr><tr><td>不关闭TCP连接</td><td>长连接，HTTP发送下一个请求的时候可以直接发送，不需要再次建立TCP连接</td></tr></tbody></table><p>在浏览器中，ConnectionID 表示的就是TCP建立连接的ID<br /><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTPConnection1.png" alt="" /></p><p>以google浏览器为例子， 在常见网站中我们期望首页可以并发发送请求，以提高用户体验。<br />google可以提供最多6个TCP连接。<br />这也就意味着如果在一个首页中，需要同时发送7个请求，那么会同时创建6个TCP链接，并发送对应的6个请求，当这6个请求中有一个已经完成请求响应了，最后一个请求才可以接着发送请求。</p><hr /><p>在浏览器中不设置Connection，会默认是keep-alive（长连接）， 如下：<br /><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTPConnection2.png" alt="" /></p><p>设置关闭长连接，nodejs中代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"image/jpg"</span>,</span><br><span class="line">    <span class="string">"Connection"</span> : <span class="string">"close"</span>   <span class="comment">// 每个请求都会重新建立TCP连接</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>浏览器中：（此时所有的ConnectionID的值都是不同的）<br /><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/HTTP%E5%9B%BE%E7%89%87/HTTPConnection3.png" alt="" /></p><hr /><p>在HTTP2中，会有信道复用，意味着在一个TCP连接上可以并发发送多个HTTP请求。例如在google.com域名下的所有请求都是只会创建一个TCP连接。</p><blockquote><p>写文章不易，求关注~</p></blockquote>]]></content>
    
    <summary type="html">
    
      HTTP Connection详解
    
    </summary>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>curl命令大全</title>
    <link href="https://extheor.github.io/posts/98e67280/index.html"/>
    <id>https://extheor.github.io/posts/98e67280/index.html</id>
    <published>2020-08-19T00:21:15.000Z</published>
    <updated>2020-08-19T01:02:53.596Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p><p>它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://www.wangbase.com/blogimg/asset/201909/bg2019090501.jpg" alt="img" /></p><p>不带有任何参数时，curl 就是发出 GET 请求。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令向<code>www.example.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p><h2 id="-a"><a class="markdownIt-Anchor" href="#-a"></a> <strong>-A</strong></h2><p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -A <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span> https://google.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -A <span class="string">''</span> https://google.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令会移除<code>User-Agent</code>标头。</p><p>也可以通过<code>-H</code>参数直接指定标头，更改<code>User-Agent</code>。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -H <span class="string">'User-Agent: php/1.0'</span> https://google.com</span><br></pre></td></tr></table></figure></blockquote><h2 id="-b"><a class="markdownIt-Anchor" href="#-b"></a> <strong>-b</strong></h2><p><code>-b</code>参数用来向服务器发送 Cookie。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -b <span class="string">'foo=bar'</span> https://google.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -b <span class="string">'foo1=bar;foo2=bar2'</span> https://google.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令发送两个 Cookie。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -b cookies.txt https://www.google.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p><h2 id="-c"><a class="markdownIt-Anchor" href="#-c"></a> <strong>-c</strong></h2><p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -c cookies.txt https://www.google.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p><h2 id="-d"><a class="markdownIt-Anchor" href="#-d"></a> <strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -d<span class="string">'login=emma＆password=123'</span>-X POST https://google.com/login</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ curl -d <span class="string">'login=emma'</span> -d <span class="string">'password=123'</span> -X POST  https://google.com/login</span><br></pre></td></tr></table></figure></blockquote><p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p><p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -d <span class="string">'@data.txt'</span> https://google.com/login</span><br></pre></td></tr></table></figure></blockquote><p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p><h2 id="data-urlencode"><a class="markdownIt-Anchor" href="#data-urlencode"></a> <strong>–data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl --data-urlencode <span class="string">'comment=hello world'</span> https://google.com/login</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p><h2 id="-e"><a class="markdownIt-Anchor" href="#-e"></a> <strong>-e</strong></h2><p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -e <span class="string">'https://google.com?q=example'</span> https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令将<code>Referer</code>标头设为<code>https://google.com?q=example</code>。</p><p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">'Referer: https://google.com?q=example'</span> https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><h2 id="-f"><a class="markdownIt-Anchor" href="#-f"></a> <strong>-F</strong></h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -F <span class="string">'file=@photo.png'</span> https://google.com/profile</span><br></pre></td></tr></table></figure></blockquote><p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p><p><code>-F</code>参数可以指定 MIME 类型。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -F <span class="string">'file=@photo.png;type=image/png'</span> https://google.com/profile</span><br></pre></td></tr></table></figure></blockquote><p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p><p><code>-F</code>参数也可以指定文件名。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -F <span class="string">'file=@photo.png;filename=me.png'</span> https://google.com/profile</span><br></pre></td></tr></table></figure></blockquote><p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p><h2 id="-g"><a class="markdownIt-Anchor" href="#-g"></a> <strong>-G</strong></h2><p><code>-G</code>参数用来构造 URL 的查询字符串。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -G -d <span class="string">'q=kitties'</span> -d <span class="string">'count=20'</span> https://google.com/search</span><br></pre></td></tr></table></figure></blockquote><p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code>https://google.com/search?q=kitties&amp;count=20</code>。如果省略<code>--G</code>，会发出一个 POST 请求。</p><p>如果数据需要 URL 编码，可以结合<code>--data--urlencode</code>参数。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -G --data-urlencode <span class="string">'comment=hello world'</span> https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><h2 id="-h"><a class="markdownIt-Anchor" href="#-h"></a> <strong>-H</strong></h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -H <span class="string">'Accept-Language: en-US'</span> https://google.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -H <span class="string">'Accept-Language: en-US'</span> -H <span class="string">'Secret-Message: xyzzy'</span> https://google.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令添加两个 HTTP 标头。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -d <span class="string">'&#123;"login": "emma", "pass": "123"&#125;'</span> -H <span class="string">'Content-Type: application/json'</span> https://google.com/login</span><br></pre></td></tr></table></figure></blockquote><p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p><h2 id="-i"><a class="markdownIt-Anchor" href="#-i"></a> <strong>-i</strong></h2><p><code>-i</code>参数打印出服务器回应的 HTTP 标头。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p><h2 id="-i-2"><a class="markdownIt-Anchor" href="#-i-2"></a> <strong>-I</strong></h2><p><code>-I</code>参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -I https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令输出服务器对 HEAD 请求的回应。</p><p><code>--head</code>参数等同于<code>-I</code>。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl --head https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><h2 id="-k"><a class="markdownIt-Anchor" href="#-k"></a> <strong>-k</strong></h2><p><code>-k</code>参数指定跳过 SSL 检测。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -k https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令不会检查服务器的 SSL 证书是否正确。</p><h2 id="-l"><a class="markdownIt-Anchor" href="#-l"></a> <strong>-L</strong></h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L -d <span class="string">'tweet=hi'</span> https://api.twitter.com/tweet</span><br></pre></td></tr></table></figure></blockquote><h2 id="limit-rate"><a class="markdownIt-Anchor" href="#limit-rate"></a> <strong>–limit-rate</strong></h2><p><code>--limit-rate</code>用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl --<span class="built_in">limit</span>-rate 200k https://google.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令将带宽限制在每秒 200K 字节。</p><h2 id="-o"><a class="markdownIt-Anchor" href="#-o"></a> <strong>-o</strong></h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o example.html https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令将<code>www.example.com</code>保存成<code>example.html</code>。</p><h2 id="-o-2"><a class="markdownIt-Anchor" href="#-o-2"></a> <strong>-O</strong></h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -O https://www.example.com/foo/bar.html</span><br></pre></td></tr></table></figure></blockquote><p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p><h2 id="-s"><a class="markdownIt-Anchor" href="#-s"></a> <strong>-s</strong></h2><p><code>-s</code>参数将不输出错误和进度信息。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p><p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -o /dev/null https://google.com</span><br></pre></td></tr></table></figure></blockquote><h2 id="-s-2"><a class="markdownIt-Anchor" href="#-s-2"></a> <strong>-S</strong></h2><p><code>-S</code>参数指定只输出错误信息，通常与<code>-s</code>一起使用。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -o /dev/null https://google.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令没有任何输出，除非发生错误。</p><h2 id="-u"><a class="markdownIt-Anchor" href="#-u"></a> <strong>-u</strong></h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -u <span class="string">'bob:12345'</span> https://google.com/login</span><br></pre></td></tr></table></figure></blockquote><p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p><p>curl 能够识别 URL 里面的用户名和密码。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://bob:12345@google.com/login</span><br></pre></td></tr></table></figure></blockquote><p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -u <span class="string">'bob'</span> https://google.com/login</span><br></pre></td></tr></table></figure></blockquote><p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p><h2 id="-v"><a class="markdownIt-Anchor" href="#-v"></a> <strong>-v</strong></h2><p><code>-v</code>参数输出通信的整个过程，用于调试。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><p><code>--trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl --trace - https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><h2 id="-x"><a class="markdownIt-Anchor" href="#-x"></a> <strong>-x</strong></h2><p><code>-x</code>参数指定 HTTP 请求的代理。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p><p>如果没有指定代理协议，默认为 HTTP。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -x james:cats@myproxy.com:8080 https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令中，请求的代理使用 HTTP 协议。</p><h2 id="-x-2"><a class="markdownIt-Anchor" href="#-x-2"></a> <strong>-X</strong></h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST https://www.example.com</span><br></pre></td></tr></table></figure></blockquote><p>上面命令对<code>https://www.example.com</code>发出 POST 请求。</p>]]></content>
    
    <summary type="html">
    
      curl命令大全
    
    </summary>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/categories/HTTP/"/>
    
    
      <category term="curl" scheme="https://extheor.github.io/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>curl网站开发指南</title>
    <link href="https://extheor.github.io/posts/8bf9abeb/index.html"/>
    <id>https://extheor.github.io/posts/8bf9abeb/index.html</id>
    <published>2020-08-19T00:18:23.000Z</published>
    <updated>2020-08-19T01:02:53.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="curl网站开发指南"><a class="markdownIt-Anchor" href="#curl网站开发指南"></a> curl网站开发指南</h1><p><strong>一、查看网页源码</strong></p><p>直接在curl命令后加上网址，就可以看到网页源码。我们以网址www.sina.com为例（选择该网址，主要因为它的网页代码较短）：</p><blockquote><p>$ curl <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//IETF//DTD HTML 2.0//EN"</span>&gt;</span>　　<span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>301 Moved Permanently<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Moved Permanently<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The document has moved <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com.cn/"</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果要把这个网页保存下来，可以使用<code>-o</code>参数，这就相当于使用wget命令了。</p><blockquote><p>$ curl -o [文件名] <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></p></blockquote><p><strong>二、自动跳转</strong></p><p>有的网址是自动跳转的。使用<code>-L</code>参数，curl就会跳转到新的网址。</p><blockquote><p>$ curl -L <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></p></blockquote><p>键入上面的命令，<a href="http://xn--www-c88dn6rpsqu0sno6bq2flw7arnd.sina.com.cn" target="_blank" rel="noopener">结果就自动跳转为www.sina.com.cn</a>。</p><p><strong>三、显示头信息</strong></p><p><code>-i</code>参数可以显示http response的头信息，连同网页代码一起。</p><blockquote><p>$ curl -i <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 301 Moved Permanently</span><br><span class="line">Date: Sat, 03 Sep 2011 23:44:10 GMT</span><br><span class="line">Server: Apache/2.0.54 (Unix)</span><br><span class="line">Location: http://www.sina.com.cn/</span><br><span class="line">Cache-Control: max-age=3600</span><br><span class="line">Expires: Sun, 04 Sep 2011 00:44:10 GMT</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Length: 231</span><br><span class="line">Content-Type: text/html; charset=iso-8859-1</span><br><span class="line">Age: 3239</span><br><span class="line">X-Cache: HIT from sh201-9.sina.com.cn</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//IETF//DTD HTML 2.0//EN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>301 Moved Permanently<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Moved Permanently<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The document has moved <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com.cn/"</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>-I</code>参数则是只显示http response的头信息。</p><p><strong>四、显示通信过程</strong></p><p><code>-v</code>参数可以显示一次http通信的整个过程，包括端口连接和http request头信息。</p><blockquote><p>$ curl -v <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">* About to connect() to www.sina.com port 80 (#0)</span><br><span class="line">* Trying 61.172.201.195... connected</span><br><span class="line">* Connected to www.sina.com (61.172.201.195) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; User-Agent: curl/7.21.3 (i686-pc-linux-gnu) libcurl/7.21.3 OpenSSL/0.9.8o zlib/1.2.3.4 libidn/1.18</span><br><span class="line">&gt; Host: www.sina.com</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">* HTTP 1.0, assume close after body　　</span><br><span class="line"><span class="tag">&lt; <span class="attr">HTTP</span>/<span class="attr">1.0</span> <span class="attr">301</span> <span class="attr">Moved</span> <span class="attr">Permanently</span></span></span><br><span class="line">&lt; Date: Sun, 04 Sep 2011 00:42:39 GMT</span><br><span class="line"><span class="tag">&lt; <span class="attr">Server:</span> <span class="attr">Apache</span>/<span class="attr">2.0.54</span> (<span class="attr">Unix</span>)</span></span><br><span class="line">&lt; Location: http://www.sina.com.cn/</span><br><span class="line"><span class="tag">&lt; <span class="attr">Cache-Control:</span> <span class="attr">max-age</span>=<span class="string">3600</span></span></span><br><span class="line">&lt; Expires: Sun, 04 Sep 2011 01:42:39 GMT</span><br><span class="line"><span class="tag">&lt; <span class="attr">Vary:</span> <span class="attr">Accept-Encoding</span></span></span><br><span class="line">&lt; Content-Length: 231</span><br><span class="line"><span class="tag">&lt; <span class="attr">Content-Type:</span> <span class="attr">text</span>/<span class="attr">html</span>; <span class="attr">charset</span>=<span class="string">iso-8859-1</span></span></span><br><span class="line">&lt; X-Cache: MISS from sh201-19.sina.com.cn</span><br><span class="line"><span class="tag">&lt; <span class="attr">Connection:</span> <span class="attr">close</span></span></span><br><span class="line">&lt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//IETF//DTD HTML 2.0//EN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>301 Moved Permanently<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Moved Permanently<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The document has moved <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com.cn/"</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">hml</span>&gt;</span></span><br><span class="line">* Closing connection #0</span><br></pre></td></tr></table></figure><p>如果你觉得上面的信息还不够，那么下面的命令可以查看更详细的通信过程。</p><blockquote><p>$ curl --trace output.txt <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></p></blockquote><p>或者</p><blockquote><p>$ curl --trace-ascii output.txt <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></p></blockquote><p>运行后，请打开output.txt文件查看。</p><p><strong>五、发送表单信息</strong></p><p>发送表单信息有GET和POST两种方法。GET方法相对简单，只要把数据附在网址后面就行。</p><blockquote><p>$ curl <a href="http://example.com/form.cgi?data=xxx" target="_blank" rel="noopener">example.com/form.cgi?data=xxx</a></p></blockquote><p>POST方法必须把数据和网址分开，curl就要用到–data参数。</p><blockquote><p>$ curl -X POST --data “data=xxx” <a href="http://example.com/form.cgi" target="_blank" rel="noopener">example.com/form.cgi</a></p></blockquote><p>如果你的数据没有经过表单编码，还可以让curl为你编码，参数是<code>--data-urlencode</code>。</p><blockquote><p>$ curl -X POST–data-urlencode “date=April 1” <a href="http://example.com/form.cgi" target="_blank" rel="noopener">example.com/form.cgi</a></p></blockquote><p><strong>六、HTTP动词</strong></p><p>curl默认的HTTP动词是GET，使用<code>-X</code>参数可以支持其他动词。</p><blockquote><p>$ curl -X POST <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a></p></blockquote><blockquote><p>$ curl -X DELETE <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a></p></blockquote><p><strong>七、文件上传</strong></p><p>假定文件上传的表单是下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">'multipart/form-data'</span> <span class="attr">action</span>=<span class="string">"upload.cgi"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">name</span>=<span class="string">upload</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">press</span> <span class="attr">value</span>=<span class="string">"OK"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可以用curl这样上传文件：</p><blockquote><p>$ curl --form upload=@localfilename --form press=OK [URL]</p></blockquote><p><strong>八、Referer字段</strong></p><p>有时你需要在http request头信息中，提供一个referer字段，表示你是从哪里跳转过来的。</p><blockquote><p>$ curl --referer <a href="http://www.example.com" target="_blank" rel="noopener">http://www.example.com</a> <a href="http://www.example.com" target="_blank" rel="noopener">http://www.example.com</a></p></blockquote><p><strong>九、User Agent字段</strong></p><p>这个字段是用来表示客户端的设备信息。服务器有时会根据这个字段，针对不同设备，返回不同格式的网页，比如手机版和桌面版。</p><p>iPhone4的User Agent是</p><blockquote><p>Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7</p></blockquote><p>curl可以这样模拟：</p><blockquote><p>$ curl --user-agent “[User Agent]” [URL]</p></blockquote><p><strong>十、cookie</strong></p><p>使用<code>--cookie</code>参数，可以让curl发送cookie。</p><blockquote><p>$ curl --cookie “name=xxx” <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a></p></blockquote><p>至于具体的cookie的值，可以从http response头信息的<code>Set-Cookie</code>字段中得到。</p><p><code>-c cookie-file</code>可以保存服务器返回的cookie到文件，<code>-b cookie-file</code>可以使用这个文件作为cookie信息，进行后续的请求。</p><blockquote><p>$ curl -c cookies <a href="http://example.com" target="_blank" rel="noopener">http://example.com</a><br />　　$ curl -b cookies <a href="http://example.com" target="_blank" rel="noopener">http://example.com</a></p></blockquote><p><strong>十一、增加头信息</strong></p><p>有时需要在http request之中，自行增加一个头信息。<code>--header</code>参数就可以起到这个作用。</p><blockquote><p>$ curl --header “Content-Type:application/json” <a href="http://example.com" target="_blank" rel="noopener">http://example.com</a></p></blockquote><p><strong>十二、HTTP认证</strong></p><p>有些网域需要HTTP认证，这时curl需要用到<code>--user</code>参数。</p><blockquote><p>$ curl --user name:password <a href="http://example.com" target="_blank" rel="noopener">example.com</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      curl网站开发指南
    
    </summary>
    
    
      <category term="HTTP" scheme="https://extheor.github.io/categories/HTTP/"/>
    
    
      <category term="curl" scheme="https://extheor.github.io/tags/curl/"/>
    
  </entry>
  
</feed>
