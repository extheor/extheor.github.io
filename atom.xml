<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码小余の博客</title>
  <icon>https://www.gravatar.com/avatar/7ff8334eb3ce169d5ef407706436ee76</icon>
  <subtitle>每天进步一点点！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://extheor.club/"/>
  <updated>2020-10-28T12:51:41.570Z</updated>
  <id>https://extheor.club/</id>
  
  <author>
    <name>Continue.Run</name>
    <email>2044580857@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>迭代器与生成器</title>
    <link href="https://extheor.club/posts/e9a8ddd1/index.html"/>
    <id>https://extheor.club/posts/e9a8ddd1/index.html</id>
    <published>2020-10-28T02:25:31.000Z</published>
    <updated>2020-10-28T12:51:41.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="迭代器与生成器"><a class="markdownIt-Anchor" href="#迭代器与生成器"></a> 迭代器与生成器</h1><h2 id="symbol"><a class="markdownIt-Anchor" href="#symbol"></a> Symbol</h2><h3 id="symbol是什么"><a class="markdownIt-Anchor" href="#symbol是什么"></a> Symbol是什么</h3><p>ECMAScript 6新增了第六种原始类型Symbol(符号）类型。Symbol类型是唯一的并且是不可修改的，并且也可以用来作为Object 的 key 值。</p><p>Symbol类型的变量是通过调用Symbol()函数生成的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>([description])</span><br></pre></td></tr></table></figure><ul><li>description:可选的字符串。Symbol的描述，可用于调试但不能访问Symbol本身。</li></ul><p><strong>值得注意的是</strong>，由于Symbol类型是原始类型，是不能通过new Symbo()来创建对象的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="built_in">Symbol</span>(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">const</span> symbol3 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tpeof symbol1);<span class="comment">// "symbol"</span></span><br><span class="line"><span class="built_in">console</span>.log(symbol3.toString());<span class="comment">// "symbol(foo)"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>(<span class="string">'foo'</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="symbol的注意事项"><a class="markdownIt-Anchor" href="#symbol的注意事项"></a> Symbol的注意事项</h3><p>当使用Symbol值进行类型转换时需要注意一些事情:</p><ul><li>尝试将一个symbol值转换为一个number值时，会抛出一个工ypeEcor错误。</li><li>Object(symbol) == symbol表达式的结果返回true。</li><li>阻止从一个symbol值隐式地创建一个新的string类型的属性名。</li></ul><h3 id="symbol的方法"><a class="markdownIt-Anchor" href="#symbol的方法"></a> Symbol的方法</h3><ul><li><p>Symbol.for()方法</p><p>该方法会根据给定的键key，来从运行时的symbol注册表中找到对应的symbol。如果找到了，则返回它。否则，新建一个与该键关联的symbol，并放入全局symbol注册表中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>.for(key);</span><br></pre></td></tr></table></figure><ul><li><p>key:一个字符串，作为symbol注册表中与某 symbol关联的键。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);<span class="comment">//创建一个symbol并放入symbol注册表中，键为"foo"</span></span><br><span class="line"><span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);<span class="comment">//从symbol注册表中读取键为"foo"的 symbol</span></span><br></pre></td></tr></table></figure><p>和Symbol)不同的是，用Symbol.for()方法创建的的symbol会被放入一个全局symbol注册表中。</p></li></ul></li><li><p>Symbol.keyEor()方法</p><p>该方法用于获取 symbol注册表中与某个symbol关联的键。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>.kevor(sym);</span><br></pre></td></tr></table></figure><ul><li>sym:存储在symbol注册表中的某个symbol</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个symbol并放入Symbol注册表，key为"foo"</span></span><br><span class="line"><span class="keyword">var</span>. globalSym = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.kevFor(globalSym); <span class="comment">// "foo"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个symbol，但不放入symbol注册表中</span></span><br><span class="line"><span class="keyword">var</span> localSym = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">Symbol</span>.kexEor(localSym); <span class="comment">// undefined，所以是找不到 key 的</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="symbol与forin"><a class="markdownIt-Anchor" href="#symbol与forin"></a> Symbol与for…in</h3><p>Symbols在for …in 迭代中不可枚举。另外，Object.getOwnPropertyNames()不会返回symbol对象的属性，但是可以使用Object.getQwnPropertySymbols()得到它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obi= &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obij[<span class="built_in">Symbol</span>(<span class="string">"a"</span>)] = <span class="string">"a"</span>;obi[<span class="built_in">Symbol</span>.for(<span class="string">"b"</span>)] = <span class="string">"b"</span>;obj[<span class="string">"c"</span>] = <span class="string">"c"</span>;</span><br><span class="line">obj.d = <span class="string">"d"</span>;</span><br><span class="line">l</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obi)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// logs "c" and "d"</span></span><br></pre></td></tr></table></figure><h2 id="迭代器"><a class="markdownIt-Anchor" href="#迭代器"></a> 迭代器</h2><h3 id="迭代器是什么"><a class="markdownIt-Anchor" href="#迭代器是什么"></a> 迭代器是什么</h3><p>ECMAScript 5规范表示集合的数据结构有数组(Array)和对象(Object ),ECMAScript 6规范又新增了Set和Map 两种集合。这样在 JavaScript 中就具有四种集合，需要一种统一的机制进行操作。</p><p>迭代器（ lterator)就是这样的一种机制，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署lterator接口，就可以完成遍历操作。</p><p>迭代器( lterator )具有三种作用:</p><ul><li>为各种数据结构，提供一个统一的、简便的访问接。</li><li>使得数据结构的成员能够按某种次序排列。</li><li>ECMAScript 6新增了for…of循环语句，用于遍历迭代器。</li></ul><h2 id="iterator接口"><a class="markdownIt-Anchor" href="#iterator接口"></a> Iterator接口</h2><p>在JavaScript 中迭代器(lterator )是一个对象，该对象提供 next()方法用于返回序列中的下一项。该方法返回包含done和 value 两个属性的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    构建迭代器 -&gt; 返回迭代器对象</span></span><br><span class="line"><span class="comment">    * 该迭代器对象必须具备 next() 方法</span></span><br><span class="line"><span class="comment">      * 作用 - 用于返回序列中的下一项</span></span><br><span class="line"><span class="comment">      * 返回值 - 是一个对象</span></span><br><span class="line"><span class="comment">        * done属性 - 表示是否迭代完毕</span></span><br><span class="line"><span class="comment">          * false - 表示当前没有迭代完毕</span></span><br><span class="line"><span class="comment">          * true - 表示当前迭代完毕</span></span><br><span class="line"><span class="comment">        * value属性 - 表示当前迭代的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> index &lt; array.length</span><br><span class="line">        ? &#123;</span><br><span class="line">            done: <span class="literal">false</span>,</span><br><span class="line">            value: array[index++],</span><br><span class="line">          &#125;</span><br><span class="line">        : &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代器对象一旦被创建，就可以反复调用next()方法用于依次访问对象中的键值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"tom"</span>, <span class="string">"king"</span>, <span class="string">"lucy"</span>, <span class="string">"mary"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = fn(arr);</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; done: false, value: 'tom' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; done: false, value: 'king' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; done: false, value: 'lucy' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; done: false, value: 'mary' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; done: true &#125;</span></span><br></pre></td></tr></table></figure><p>一种数据结构只要部署了lterator接口，就可以称这种数据结构是“可遍历的”。ECMAScript 6规范规定默认的lterator接口部署在数据结构的 Symboliterator属性。换句话讲，一个数据结构只要具有 Symbol.iterator属性，就可以认为是“可遍历的”。<br />Symbol.iterator属性本身是一个函数，就是当前数据结构默认的迭代器生成函数。执行这个函数，就会返回一个迭代器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj= &#123;</span><br><span class="line">[Symbpl.iterator]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>JavaScript 中原生具有lterator接口的数据结构如下:</p><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数的arguments 对象</li><li>NodeList 对象</li></ul><h2 id="迭代协议"><a class="markdownIt-Anchor" href="#迭代协议"></a> 迭代协议</h2><p>ECMAScript 6新增了几种协议，这些协议可以被任何遵循某些约定的对象来实现。</p><ul><li><p>可迭代协议</p><p>可迭代协议允许JavaScript 对象去定义或定制它们的迭代行为。为了变成可迭代对象，对象必须实现 @@iterator方法。其实就是这个对象（或者它原型链上的某个对象）必须有一个名字<br />是Symboliteratoc的属性。</p><table><thead><tr><th>属性名称</th><th>描述</th></tr></thead><tbody><tr><td>[Symbol.iterator]</td><td>返回一个对象的无参函数，被返回对象符合迭代器协议</td></tr></tbody></table><p>当一个对象需要被迭代的时候，它的@@iterator方法被调用并且无参数，然后返回一个用于在迭代中获得值的迭代器。</p></li><li><p>迭代器协议<br />该迭代器协议定义了一种标准的方式来产生一个有限或无限序列的值。<br />当一个对象被认为是一个迭代器时，它实现了一个next()的方法并且拥有以下含义:</p><table><thead><tr><th>属性名称</th><th>描述</th></tr></thead><tbody><tr><td>next</td><td>返回一个对象的无参函数，被返回对象拥有两个属性:<br />- done(boolean)<br />  - 如果迭代器已经经过了被迭代序列时为true。这时 value 可能描述了该迭代器的返回值。<br />  - 如果迭代器可以产生序列中的下一个值，则为false。这等效于连同done属性也不指定。<br />- value:迭代器返回的任何JavaScript值。done 为true时可省略。</td></tr></tbody></table></li></ul><h2 id="forof-语句的用法"><a class="markdownIt-Anchor" href="#forof-语句的用法"></a> for…of 语句的用法</h2><p>ECMAScript 6引入了 for …of语句用于遍历迭代器。一个数据结构只要部署了Symboliterator属性，就被视为具有Iterator 接口，就可以用for…of循环遍历它的成员。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">of</span> iterable) &#123;</span><br><span class="line"><span class="comment">//statements</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>variable:在每次迭代中，将不同属性的值分配给变量。</p></li><li><p>iterable:被迭代枚举其属性的对象。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ECMAScript 6中的数组(Array )、Set和Map都具有以下方法，该方法返回一个迭代器对象。</p><ul><li>entries()方法:返回一个新的迭代器对象，这个对象的元素是用来遍历[键名,键值]组成的数组。</li><li>keys()方法:返回一个新的迭代器对象，用来遍历所有的键名。</li><li>values()方法:返回一个新的迭代器对象，用来遍历所有的键值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> arr.entries())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[0, 'a']</span></span><br><span class="line"><span class="comment">//[1, 'b']</span></span><br><span class="line"><span class="comment">//[2, 'c']</span></span><br></pre></td></tr></table></figure><h3 id="与foreach-方法的区别"><a class="markdownIt-Anchor" href="#与foreach-方法的区别"></a> 与forEach() 方法的区别</h3><p>ECMAScript 6中的数组(Array ) 、Set和 Map都具有forEach()方法用于遍历，该方法与for…of语句的区别如下:</p><ul><li>farEach()方法无法跳出循环。换句话讲，break 语句和continue 语句无效。</li><li>for…of语句不仅可以使用break语句和continue 语句，还可以配合使用return语句。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">// SyntaxError: Illegal break statement&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> index <span class="keyword">of</span> arr.kevs()) &#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="与forin-语句的区别"><a class="markdownIt-Anchor" href="#与forin-语句的区别"></a> 与for…in 语句的区别</h3><p>for …in语句主要用于遍历对象。与for…of语句对比，for…in语句具有以下几个缺点:</p><ul><li>for. …i不仅遍历自身，还会遍历手动添加的，甚至包括原型链的。</li><li>如果用于遍历数组的话，遍历得到的键名为字符串类型的数字值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Obiect.prototype.obiCustom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.arrCustom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterable = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>];</span><br><span class="line">iterable.foo = <span class="string">'hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> iterable)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// logs 0,1, 2, "foo", "arrCustom", "obiCustom"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> iterable)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// logs 3,5,7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成器"><a class="markdownIt-Anchor" href="#生成器"></a> 生成器</h2><h3 id="generator函数是什么"><a class="markdownIt-Anchor" href="#generator函数是什么"></a> Generator函数是什么</h3><p>虽然可以自定义一个迭代器，但自定义的迭代器需要显式地维护其内部状态。而生成器提供了另一个强大的选择，其提供了允许定义一个包含自有迭代算法的函数，同时可以自动维护其内部状态。</p><p>Generator函数可以作为生成一个迭代器的特殊函数，该函数被调用时返回一个Generator对象，该对象是符合可迭代协议和迭代器协议的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'wolongxueyuan'</span>;</span><br><span class="line"><span class="keyword">let</span> g = gen();<span class="comment">// "Generator &#123;&#125;"</span></span><br></pre></td></tr></table></figure><p>Generator函数与普通函数的区别在于:</p><ul><li>function*这种声明方式会定义一个生成器函数，它返回一个 Generator对象。</li><li>yield关键字用来暂停和恢复一个生成器函数。</li></ul><h4 id="generator函数与解构赋值"><a class="markdownIt-Anchor" href="#generator函数与解构赋值"></a> Generator函数与解构赋值</h4><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/ES6%E5%9B%BE%E7%89%87/Generator%20%E5%87%BD%E6%95%B0%E4%B8%8E%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.png"></img></p><h3 id="yield表达式"><a class="markdownIt-Anchor" href="#yield表达式"></a> yield表达式</h3><p>yield关键字用来暂停和恢复一个生成器函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rv] = <span class="keyword">yield</span> [expression];</span><br></pre></td></tr></table></figure><ul><li>expression:定义通过迭代器协议从生成器函数返回的值。如果省略，则返回undefined.</li><li>rv:返回传递给生成器的next()方法的可选值，以恢复其执行。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">countAppleSales</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> saleList = [<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = o; i&lt; saleList.length; i++) &#123;</span><br><span class="line"><span class="keyword">yield</span> saleList[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> appleStore = countAppleSales(); <span class="comment">// Generator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(appleStore.next()); <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(appleStore.next()); <span class="comment">// &#123; value: 7, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(appleStore.next()); <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(appleStore.next()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><h3 id="yield-表达式"><a class="markdownIt-Anchor" href="#yield-表达式"></a> yield* 表达式</h3><p>yield*表达式用于委托给另一个Generator 或可迭代对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">yield</span>*[[expression]];</span><br></pre></td></tr></table></figure><p>expression:返回一个可迭代对象的表达式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g1</span>(<span class="params"></span>) </span>&#123; <span class="keyword">yield</span> <span class="number">2</span>; <span class="keyword">yield</span> <span class="number">3</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span>* g1();</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = g2();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123;'value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());<span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><h3 id="generator对象的方法"><a class="markdownIt-Anchor" href="#generator对象的方法"></a> Generator对象的方法</h3><p>生成的 Generator 对象具有以下几个原型方法:</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>next()方法</td><td>返回一个包含属性done和value的对象。该方法也可以通过接受一个参数用以向生成器传值</td></tr><tr><td>return()方法</td><td>返回给定的值并结束生成器</td></tr><tr><td>throw()方法</td><td>用于向生成器抛出异常，并恢复生成器的执行，返回带有done及 value两个属性的对象</td></tr></tbody></table><p>next(、throw()、return()这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让Generator 函数恢复执行，并且使用不同的语句替换yield表达式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'wolongxueyuan'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span>.g = gen();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(g.next());<span class="comment">// &#123; value: 'wolongxueyuan', done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.return(<span class="string">"卧龙学苑"</span>)); <span class="comment">// &#123; value: '卧龙学苑', done: true &#125;</span></span><br><span class="line">g.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"出错啦..."</span>)); <span class="comment">// Error:出错啦...</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://extheor.club/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://extheor.club/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化</title>
    <link href="https://extheor.club/posts/2b2f44ba/index.html"/>
    <id>https://extheor.club/posts/2b2f44ba/index.html</id>
    <published>2020-10-27T08:41:22.000Z</published>
    <updated>2020-10-28T12:51:41.563Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="前端模块化"><a class="markdownIt-Anchor" href="#前端模块化"></a> 前端模块化</h1><h2 id="前端模块化是什么"><a class="markdownIt-Anchor" href="#前端模块化是什么"></a> 前端模块化是什么</h2><p>所谓模块化，就是指根据功能的不同进行划分，每个功能就是一个模块。最终，一个完整的产品是由各个模块组合而成的。<br />模块化的特点:</p><ul><li>独立性。可以针对一个模块单独进行设计、研发，相对工作量和难度变小。</li><li>复用性。一些通用模块(例如登录或注册)可以被重复使用，而不用每次重新开发。</li><li>解耦性。模块与模块Z间，付作一永P所l块的工作。</li><li>灵活性。通过选择和组合不同的模块，可以快速构建一个新的产品。</li></ul><h2 id="ecmascript5的模块化"><a class="markdownIt-Anchor" href="#ecmascript5的模块化"></a> ECMAScript5的模块化</h2><h3 id="函数的封装"><a class="markdownIt-Anchor" href="#函数的封装"></a> 函数的封装</h3><p>函数的定义可以将代码逻辑封装在指定的函数作用域中。可以将函数的封装作为自定义模块化的第一步:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">functien outer()&#123;</span><br><span class="line"><span class="keyword">var</span> v= <span class="string">'卧龙学苑'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'this is inner function.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码示例中，定义了outer()函数，方便在后面的逻辑中进行调用。outer()函数就可以看作是一个模块。</p><p>但是，这样的做法有着明显的缺点，就是污染了全局命名空间。换句话讲，无法在全局作用域再定义一个 outer()函数。</p><h3 id="对象的自定"><a class="markdownIt-Anchor" href="#对象的自定"></a> 对象的自定</h3><p>为了解决封装函数所带来的问题，可以引入JavaScript对象的概念。就是把所有相关的模块成员封装在一个对象中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outer = &#123;</span><br><span class="line">v: <span class="string">'卧龙学苑'</span>,</span><br><span class="line">    inner: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'this is inner function.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上述代码示例，使用对象实现的好处:</p><ul><li>解决了全局命名空间可能出现的冲突问题。因为所有的模块成员都是作为一个对象的属性或方法存在的。</li><li>模块成员之间也存在着某种关系。因为被定义在同一个JavaScript对象中，作为属性或方法存在。而这个对象名成为了所有模块成员对外的一个统一的模块名称。</li></ul><h3 id="自调函数"><a class="markdownIt-Anchor" href="#自调函数"></a> 自调函数</h3><p>看似引人对象概念后，这个模块的解决方案不错，但依旧存在着一些问题。对于这样一个模块(对象），是可以从外部对该模块（对象）的属性或方法进行修改的。这就导致了会产生一些意外的安全问题，而这个问题可以通过自调函数来进行解决。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> v = <span class="string">'longestory'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'this is inner function.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="最终模块化结构"><a class="markdownIt-Anchor" href="#最终模块化结构"></a> 最终模块化结构</h3><p>如果想要在真实开发中使用模块化概念，代码结构还需要进一步优化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> v = <span class="string">'longestory'</span>;</span><br><span class="line">    <span class="keyword">var</span> interface = &#123;</span><br><span class="line">getAttr: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">&#125;,</span><br><span class="line">inner: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'this is inner function.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> interface;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="ecmascript6的模块化"><a class="markdownIt-Anchor" href="#ecmascript6的模块化"></a> ECMAScript6的模块化</h2><p>ECMAScript 2015提供了基于原生的模块化概念。一个ECMAScript 2015的模块就是一个单独的JavaScript 文件，与普通的JavaScript 文件之间仅有两个区别:</p><ul><li>ECMAScript 2015的模块自动开启严格模式，即使没有写use strict。</li><li>可以在模块中使用import和export 命令。</li></ul><h3 id="export命令"><a class="markdownIt-Anchor" href="#export命令"></a> export命令</h3><p>export命令用于将指定的模块内容导出，该命令可以修饰在function、var、let或 const等之前。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> v = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> = <span class="string">'this is string.'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'this is function.'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>export命令除了上述方式以外，还可以这样编写:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v= <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> l = <span class="string">'this is string.'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'this is function.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; v, l, fn &#125;</span><br></pre></td></tr></table></figure><p>上述两种写法是等价的。但一般建议使用第二种写法，因为这样更直接，更清晰。</p><h3 id="import命令"><a class="markdownIt-Anchor" href="#import命令"></a> import命令</h3><p>import命令用于导人其他模块所提供的功能，基本语法如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;...&#125; <span class="keyword">from</span> modulepath;</span><br></pre></td></tr></table></figure><p>根据上述语法结构，可以通过import命令导入其他模块:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;v,l,fn&#125; from <span class="string">'./temp.js'</span>;</span><br></pre></td></tr></table></figure><p><strong>值得注意的是</strong>，使用import命令导入的名称必须与模块使用export导出的名称一致。<br />使用import命令导入其他模块的内容时，默认使用的是模块声明的名称。也可以在导入时，进行重命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; v <span class="keyword">as</span> variable &#125; <span class="keyword">from</span> <span class="string">'./temp.is'</span>;</span><br></pre></td></tr></table></figure><h2 id="前端模块化规范"><a class="markdownIt-Anchor" href="#前端模块化规范"></a> 前端模块化规范</h2><p>模块化开发可以将复杂的Web应用程序拆分成若干个模块，模块之间的相互依赖很低。使得开发结构更为清晰，依赖更为明确。在实际开发中，经常引人第三方的模块，例如 jQuery库等。</p><p>但是，ECMAScript 官方到目前为止并没有为模块化提供一个统一的标准规范，这可能导致每个模块的编写方式不同。</p><p>目前，最为流行的JavaScript模块化规范具有以下几种:</p><ul><li>CommonJS</li><li>RequireJS</li><li>SeaJS</li></ul><h3 id="commonjs"><a class="markdownIt-Anchor" href="#commonjs"></a> CommonJS</h3><p>2009年，美国程序员Ryan Dahl创造了Nodejs 项目，将JavaScript语言用于服务器端编程。这标志“JavaScript模块化编程”正式诞生。</p><p>Nocejs,的模块系统，就是参照CommonJS规范实现的。在CommonJS 中，有一个全局性方法require()，用于加载模块。</p><p>CommonJS的Modules规范实现了一套简单易用的模块系统，ComnmonJS对模块的定义也十分的简单。主要分为模块定义、模块引用及模块标识三个部分。</p><h3 id="requirejs"><a class="markdownIt-Anchor" href="#requirejs"></a> RequireJS</h3><p>RequireJS是一个JavaScript模块加载器。它非常适合在浏览器中使用。</p><p>RequireJS是一个基于AMD规范实现的函数，它区别于传统的CommonJS的require 规范。因为它能够异步地加载动态的依赖。</p><p>AMD( Asynchronous Module Definition，译为异步模块定义）是一个在浏览器端模块化开发的规范。模块将被异步加载，模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。</p><p>AMD是RequiceJS在推广过程中对模块定义的规范化的产出。</p><h4 id="加载requirejs"><a class="markdownIt-Anchor" href="#加载requirejs"></a> 加载RequireJS</h4><p>在HTML页面中通过 <code>&lt;script&gt;</code> 元素引人RequireJS，如下示例代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/reauire.is"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样加载 JavaScript 文件可能导致HTML页面失去响应。解决办法有两种，一是将<br />件的引入代码放置在HTML页面的底部，二是将代码改写成如下方式:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/ require.is"</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">"true"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>async属性表示异步加载 JavaScript 文件，避免HTML页面失去响应。但是E浏览器不支持该属性，可以利用defer 属性进行替换。</p><h4 id="主模块的编写"><a class="markdownIt-Anchor" href="#主模块的编写"></a> 主模块的编写</h4><p>通过如下方式定义 RequireJJS 的主模块:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"scripts/main.is"</span> <span class="attr">src</span>=<span class="string">"scripts/require.is"</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">"true"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>data-main属性表示设置当前HTML页面程序的主模块。由于require.js 默认的文件后缀名是 js,所以可以把 main.js简写成main。</p><h4 id="定义模块"><a class="markdownIt-Anchor" href="#定义模块"></a> 定义模块</h4><p>RequireJS使用define()函数来定义一个模块。定义模块的常见形式如下:</p><ul><li>键值对方式定义</li><li>函数式定义</li><li>存在依赖的函数式定义</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">"./cart"</span>, <span class="string">"./inventory"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">cart, inventory</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//return an object to define the "my/shirt" module.</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="string">`  color: "blue",</span></span><br><span class="line"><span class="string">   size: "large",</span></span><br><span class="line"><span class="string">       addToCart: function ()&#123;</span></span><br><span class="line"><span class="string">           inventory.decrement(this);</span></span><br><span class="line"><span class="string">           cart.add(this);`</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="加载模块"><a class="markdownIt-Anchor" href="#加载模块"></a> 加载模块</h4><p>RequireJS使用config()函数对模块的加载行为进行自定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">paths: &#123;</span><br><span class="line"><span class="string">"jquery"</span>: <span class="string">"jquery.min"</span>,</span><br><span class="line"><span class="string">"underscore"</span>: <span class="string">"underscore.min"</span>,</span><br><span class="line">        <span class="string">"backbone"</span>: <span class="string">"backbone.min"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>RequireJS 使用require()函数来加载指定模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>, <span class="string">'underscore'</span>, <span class="string">'backbone'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$,_, Backbone</span>) </span>&#123;</span><br><span class="line"><span class="comment">//some code here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="seajs"><a class="markdownIt-Anchor" href="#seajs"></a> SeaJS</h3><p>Sea.js追求简单、自然的代码书写和组织方式，具有以下核心特性:</p><ul><li><p>简单友好的模块定义规范: Seajs 遵循CMD规范，可以像Nodejs一般书写模块代码。</p></li><li><p>自然直观的代码组织方式:依赖的自动加载、配置的简洁清晰，可以让我们更多地享受编码的乐趣。Seajs 还提供常用插件，非常有助于开发调试和性能优化，并具有丰富的可扩展接口。</p></li></ul><p>CMD (Common Module Definition，译为通用模块定义）规范明确了模块的基本书写格式和基本交互规则。该规范是在国内发展出来的。</p><p>CMD是 SeaJS在推广过程中对模块定义的规范化的产出。</p><h4 id="加载seajs"><a class="markdownIt-Anchor" href="#加载seajs"></a> 加载SeaJS</h4><p>在HTML页面中通过 <code>&lt;script&gt;</code> 元素引人 SeaJS，如下示例代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/sea.is"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样加载JavaScript 文件可能导致HTML页面失去响应。解决办法有两种，一是将JavaScript文件的引入代码放置在HTML页面的底部，二是将代码改写成如下方式:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/sea.is"</span> <span class="attr">defer</span> <span class="attr">async</span>=<span class="string">"true"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>async属性表示异步加载 JavaScript 文件，避免HTML页面失去响应。但是IE浏览器不支持该属性，可以利用defer 属性进行替换。</p><h4 id="加载模块-2"><a class="markdownIt-Anchor" href="#加载模块-2"></a> 加载模块</h4><p>SeaJS利用config()方法进行配置:ll seais的简单配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">seajs.config(&#123;</span><br><span class="line">base: <span class="string">"./seajs/"</span>,</span><br><span class="line">    paths: &#123;</span><br><span class="line">        <span class="built_in">module</span>: <span class="string">"module"</span></span><br><span class="line">    &#125;</span><br><span class="line">    alias: &#123;</span><br><span class="line"><span class="string">"hello"</span>: <span class="string">"module"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>SeaJS利用use()方法加载模块:/加载入口模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">seajs.use(<span class="string">"hello"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> h1 = <span class="built_in">document</span>.createElement(<span class="string">"h1"</span>);</span><br><span class="line">    h1.textContent = value.hello;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(h1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="定义模块-2"><a class="markdownIt-Anchor" href="#定义模块-2"></a> 定义模块</h4><p>SeaJS利用define()方法定义模块:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有模块都通过define来定义</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过require引入依赖</span></span><br><span class="line">    <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">    <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过exports对外提供接口</span></span><br><span class="line">    exporto.doSomething= ...</span><br><span class="line">    <span class="comment">// 或者通过module.exports提供整个接口</span></span><br><span class="line">    <span class="built_in">module</span>.exports = ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://extheor.club/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://extheor.club/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Class关键字</title>
    <link href="https://extheor.club/posts/a9168bc5/index.html"/>
    <id>https://extheor.club/posts/a9168bc5/index.html</id>
    <published>2020-10-26T13:36:43.000Z</published>
    <updated>2020-10-28T13:51:41.369Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="class关键字"><a class="markdownIt-Anchor" href="#class关键字"></a> Class关键字</h1><h2 id="类的声明"><a class="markdownIt-Anchor" href="#类的声明"></a> 类的声明</h2><h3 id="类是什么"><a class="markdownIt-Anchor" href="#类是什么"></a> 类是什么</h3><p>ECMAScript 6提供了更接近传统开发语言的写法，引人了类(Class ）的概念。类作为对象的模板，只是一个语法糖。class关键字只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECMAScript 5使用构造函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">this</span>.x = x; <span class="keyword">this</span>.y = y; &#125;</span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x +<span class="string">', '</span>+<span class="keyword">this</span>.y + <span class="string">')";</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">// ECMAScript 6使用类的概念定义</span></span><br><span class="line"><span class="string">class Point &#123;</span></span><br><span class="line"><span class="string">constructor(x, y) &#123;</span></span><br><span class="line"><span class="string">this.x = x;</span></span><br><span class="line"><span class="string">        this.y =y;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    toString()&#123;</span></span><br><span class="line"><span class="string">return '</span>(<span class="string">' + this.x + '</span>, <span class="string">' + this.y + '</span>)<span class="string">";</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="类的声明-2"><a class="markdownIt-Anchor" href="#类的声明-2"></a> 类的声明</h3><p>声明类具有以下两种方式:</p><ul><li><p>类的声明方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class name [extends] &#123;</span><br><span class="line"><span class="comment">// class body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>name:表示当前声明的类名。<br />但是不同于类表达式,类声明不允许再次声明已经存在的类，否则将会抛出一个类型错误。</li></ul></li><li><p>类的表达式方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const MyClass = class [className][extends]&#123;</span><br><span class="line"><span class="comment">// class body</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>和函数表达式相同的一点是，类表达式可以是命名也可以是匿名的。如果是命名类表达式，这个名字只能在类体内部才能访问到。</p></li></ul><h3 id="构造函数"><a class="markdownIt-Anchor" href="#构造函数"></a> 构造函数</h3><p>构造函数(Constructor ）是用于创建和初始化类中创建的一个对象的一种特殊方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>([arguments])&#123;... &#125;</span><br></pre></td></tr></table></figure><ul><li>在一个类中只能有一个名为“constructor”的特殊方法。一个类中出现多次构造函数(Constructor)方法将会抛出一个SyntaxError错误。</li><li>在一个构造方法中可以使用super关键字来调用一个父类的构造方法。</li><li>如果没有显式指定构造方法，则会添加默认的constructor方法。</li><li>如果不指定一个构造函数（ constructor )方法,则使用一个默认的构造函数（constructor ) 。</li></ul><h3 id="getter与setter"><a class="markdownIt-Anchor" href="#getter与setter"></a> getter与setter</h3><p>与ECMAScript 5一样，在“类”的内部可以使用get和 set 关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> prop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'getter";</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    set prop(value) &#123;</span></span><br><span class="line"><span class="string">    console.log('</span>setter: <span class="string">' + value);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">let inst = new MyClass();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">inst.prop = 123;// setter: 123</span></span><br><span class="line"><span class="string">console.log(inst.prop);// '</span>getter<span class="string">'</span></span><br></pre></td></tr></table></figure><h3 id="不允许声明提前"><a class="markdownIt-Anchor" href="#不允许声明提前"></a> 不允许声明提前</h3><p>声明类时，是不存在声明提前的现象的。如下示例代码所示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Foo(); <span class="comment">// ReferenceError: Foo is not defined</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>上逑代码示例中，Foo类调用在前，声明在后。由于 ECMAScript 6不允许类的声明提前，结果为报错。</p><p>这种规定的原因与继承有关，必须保证子类在父类之后定义。</p><h3 id="不允许重复声明"><a class="markdownIt-Anchor" href="#不允许重复声明"></a> 不允许重复声明</h3><p>声明类时，是不存在重复声明的。如果一个类被重复声明的话，则引起解析错误。如下示例代码所示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;;<span class="comment">// SyntaxError: ldentifier 'Foo' has already been declared</span></span><br></pre></td></tr></table></figure><p>若之前使用类表达式定义了一个类，则再次声明这个类同样会引起解析错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Foo = <span class="class"><span class="keyword">class</span> </span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;;<span class="comment">// SyntaxError: ldentifier 'Foo' has already been declared</span></span><br></pre></td></tr></table></figure><h2 id="静态方法"><a class="markdownIt-Anchor" href="#静态方法"></a> 静态方法</h2><h3 id="静态方法的语法"><a class="markdownIt-Anchor" href="#静态方法的语法"></a> 静态方法的语法</h3><p>static关键字为一个类定义了一个静态方法。静态方法不会在类的实例上被调用，相反被类本身调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> methodName() &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li>methodName:表示指定类中的静态方法名称。</li></ul><p>静态方法调用直接在类上进行，不能在类的实例上调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassWithStaticMethod</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> staticMethod()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'static method has been called.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ClassWithStaticMethod.staticMethod());</span><br><span class="line"><span class="comment">// "static method has been called."</span></span><br></pre></td></tr></table></figure><h3 id="静态方法的调用"><a class="markdownIt-Anchor" href="#静态方法的调用"></a> 静态方法的调用</h3><ul><li>从另一个静态方法调用<br />在同一个类中的一个静态方法调用另一个静态方法，可以使用this关键字。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticMethodCall</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> staticMethod() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'Static method has been called'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">static</span> anotherStaticMethod() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.staticMethod() + <span class="string">' from another static method'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">StaticMethodCall.staticMethod();</span><br><span class="line"><span class="comment">// 'Static method has been called'</span></span><br><span class="line"></span><br><span class="line">StaticMethodCall.anotherStaticMethod();</span><br><span class="line"><span class="comment">// 'Static method has been called from another static method'</span></span><br></pre></td></tr></table></figure><ul><li><p>从类的构造函数和其他方法调用<br />静态方法不能直接在非静态方法中使用this关键字来访问。</p><ul><li>需要使用类名来调用:CLASSNAME.STATIC_METHOD_NAME()</li><li>将其作为构造函数的属性来调用该方法: <a href="http://this.constructor.STATICMETHOD.NAME" target="_blank" rel="noopener">this.constructor.STATICMETHOD.NAME</a>().。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticMethodCall</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(StaticMethodCall.staticMethod());<span class="comment">// 'static method has been called.'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.constructor.staticMethod());<span class="comment">// 'static method has been called.'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> staticMethod() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'static method has been called.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="类的继承"><a class="markdownIt-Anchor" href="#类的继承"></a> 类的继承</h2><h3 id="实现类的继承"><a class="markdownIt-Anchor" href="#实现类的继承"></a> 实现类的继承</h3><p>extends关键字用于类声明或者类表达式中，以创建一个类，该类作为另一个类的子类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>extends 关键字用来创建一个普通类或者内建对象的子类。</p><p><strong>值得注意的是</strong>，继承的.prototype必须是一个Object或者null</p><ul><li>编写一个类作为父类，如下示例代码所示:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Polygon</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(height, width)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'Polygon'</span>;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">sayName()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hi, l am a '</span> , <span class="keyword">this</span>.name + <span class="string">'.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写一个类作为Polygon类的子类，如下示例代码所示:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Polygon</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(length) &#123;</span><br><span class="line"><span class="keyword">super</span>(length, length);</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'Square'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> area() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.height * <span class="keyword">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> area(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.area = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Square(<span class="number">5</span>);</span><br><span class="line">s.sayName();<span class="comment">// Hi, l am a Square.</span></span><br></pre></td></tr></table></figure><h3 id="继承于内置对象"><a class="markdownIt-Anchor" href="#继承于内置对象"></a> 继承于内置对象</h3><p>如下示例代码所示，实现了继承了内置的Date 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myDate</span> <span class="keyword">extends</span> <span class="title">Date</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  getFormattedDate() &#123;</span><br><span class="line">    <span class="keyword">var</span> months = [</span><br><span class="line">      <span class="string">"Jan"</span>,</span><br><span class="line">      <span class="string">"Feb"</span>,</span><br><span class="line">      <span class="string">"Mar"</span>,</span><br><span class="line">      <span class="string">"Apr"</span>,</span><br><span class="line">      <span class="string">"May"</span>,</span><br><span class="line">      <span class="string">"Jun"</span>,</span><br><span class="line">      <span class="string">"Jul"</span>,</span><br><span class="line">      <span class="string">"Aug"</span>,</span><br><span class="line">      <span class="string">"Sep"</span>,</span><br><span class="line">      <span class="string">"Oct"</span>,</span><br><span class="line">      <span class="string">"Nov"</span>,</span><br><span class="line">      <span class="string">"Dec"</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="keyword">this</span>.getFullYear() + <span class="string">"-"</span> + months[<span class="keyword">this</span>.getMonth()] + <span class="string">"-"</span> + <span class="keyword">this</span>.getDate()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mydate = <span class="keyword">new</span> myDate();</span><br><span class="line"><span class="built_in">console</span>.log(mydate.getFormattedDate());</span><br></pre></td></tr></table></figure><h3 id="super关键字"><a class="markdownIt-Anchor" href="#super关键字"></a> super关键字</h3><p>super 关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。</p><ul><li>super关键字作为函数调用时，代表父类的构造函数。ECMAScript 6要求子类的构造函数必须执行一次 super 函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>值得注意的是</strong>，super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B，因此 super()在这里相当于A.prototype.constructor.call(this)。</p><ul><li><p>super 作为对象时，在普通方法中，指向父类的原型对象;在静态方法中，指向父类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  p() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A();</span><br><span class="line">a.c = <span class="string">"C"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B();</span><br><span class="line"><span class="built_in">console</span>.log(b.c); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><strong>值得注意的是</strong>，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。</p></li></ul><h2 id="类的完整示例"><a class="markdownIt-Anchor" href="#类的完整示例"></a> 类的完整示例：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 当前类的(实例对象)方法，而不是当前类的原型方法</span></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"this is parent method."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> staticMethod() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"this is parent method."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> parent = <span class="keyword">new</span> Parent(<span class="string">"东方月初"</span>);</span><br><span class="line"><span class="comment">// parent.toString(); // this is parent method.</span></span><br><span class="line"><span class="comment">// Parent.prototype.toString(); // this is parent method.</span></span><br><span class="line"><span class="comment">// parent.__proto__.toString(); // this is parent method.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name); <span class="comment">// 指向父类的构造器</span></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="comment">// console.log(super.toString());</span></span><br><span class="line">  &#125;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="comment">// super -&gt; 指向父类的原型对象(Parent.prototype)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"this is child method."</span> + <span class="keyword">super</span>.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> staticMethod() &#123;</span><br><span class="line">    <span class="comment">// super -&gt; 指向父类(Parent)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"this is child method."</span> + <span class="keyword">super</span>.staticMethod();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child(<span class="string">"白月初"</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// console.log(child.toString());</span></span><br><span class="line"><span class="comment">// console.log(Child.staticMethod());</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://extheor.club/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://extheor.club/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>async函数</title>
    <link href="https://extheor.club/posts/4f346c5/index.html"/>
    <id>https://extheor.club/posts/4f346c5/index.html</id>
    <published>2020-10-26T12:35:51.000Z</published>
    <updated>2020-10-28T12:51:41.562Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="async函数"><a class="markdownIt-Anchor" href="#async函数"></a> async函数</h1><h2 id="async函数是什么"><a class="markdownIt-Anchor" href="#async函数是什么"></a> async函数是什么</h2><p>ECMAScript 2017规范引入了async 函数，该函数的主要目的就是简化使用 Promises, 异步调用的操作，并对一组Promises执行某些操作。正如 Promises 类似于结构化回调，async/await 类似于组合生成器和 Promises。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveAfter2Seconds</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"resolved"</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncCall</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'calling'</span>);</span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> resolveAfter2Seconds();</span><br><span class="line">    <span class="built_in">console</span>.log(result);<span class="comment">// 'resolved'</span></span><br><span class="line">&#125;</span><br><span class="line">asyncCall();</span><br></pre></td></tr></table></figure><h2 id="异步函数声明式"><a class="markdownIt-Anchor" href="#异步函数声明式"></a> 异步函数声明式</h2><p>异步函数声明式用于定义一个返回Promise对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的Promise返回其结果。但是如果代码使用了异步函数，它的语法和结构会更像是标准的同步函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">[param[, paraml[,... param]]]</span>) </span>&#123; statements &#125;</span><br></pre></td></tr></table></figure><ul><li>name:表示函数名称。</li><li>param:要传递给函数的参数的名称。</li><li>statements:表示函数体语句。</li></ul><h2 id="异步函数表达式"><a class="markdownIt-Anchor" href="#异步函数表达式"></a> 异步函数表达式</h2><p>异步函数表达式用于在表达式中定义异步函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">[param1[, param2[, ..., paramN]]]</span>) </span>&#123; statements &#125;</span><br></pre></td></tr></table></figure><ul><li>name:表示函数名称。</li><li>param:要传递给函数的参数的名称。</li><li>statements:表示函数体语句。</li></ul><p>异步函数表达式与异步函数语句非常相似，语法也基本相同。它们之间的主要区别在于异步函数表达式可以省略函数名称来创建一个匿名函数。</p><h2 id="返回promise对象"><a class="markdownIt-Anchor" href="#返回promise对象"></a> 返回Promise对象</h2><p>async函数返回一个 Promise对象。async函数内部return语句返回的值，会成为then方法回调函数的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'hello world";</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">f().then(v =&gt; console.log(v)); // "hello world"</span></span><br></pre></td></tr></table></figure><p>值得注意的是，在上述代码示例中，return语句中没有await表达式，因为异步函数的返回值将被隐式地传递给Promise.resolve。</p><h2 id="await表达式是什么"><a class="markdownIt-Anchor" href="#await表达式是什么"></a> await表达式是什么</h2><p>await表达式用于等待一个Promise对象，它只能在异步函数中使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[return_value] = <span class="keyword">await</span> expression;</span><br></pre></td></tr></table></figure><ul><li>expression:一个Promise对象或者任何要等待的值。</li><li>return_value: 返回Promise对象的处理结果。如果等待的不是Promise 对象，则返回该值本身。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="keyword">await</span> <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(y);<span class="comment">// 20</span></span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://extheor.club/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://extheor.club/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>键值对集合</title>
    <link href="https://extheor.club/posts/5f1fa8df/index.html"/>
    <id>https://extheor.club/posts/5f1fa8df/index.html</id>
    <published>2020-10-26T06:33:23.000Z</published>
    <updated>2020-10-28T12:51:41.571Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="键值对集合"><a class="markdownIt-Anchor" href="#键值对集合"></a> 键值对集合</h1><h2 id="set集合"><a class="markdownIt-Anchor" href="#set集合"></a> Set集合</h2><h3 id="set集合是什么"><a class="markdownIt-Anchor" href="#set集合是什么"></a> Set集合是什么</h3><p>Set对象是值的集合，可以按照插入的顺序迭代它的元素。Set集合中的元素只会出现一次，即 <strong>Set集合中的元素是唯一的</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1,2,3,4,5]);</span><br></pre></td></tr></table></figure><p>NaN和 undefined都可以被存储在Set集合中，NaN之间被视为相同的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([NaN,NaN]);</span><br><span class="line">console.log(<span class="keyword">set</span>);// Set &#123; <span class="literal">NaN</span> &#125;</span><br></pre></td></tr></table></figure><p>对象被存储在Set集合中时，两个对象总是不相等的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([&#123;&#125;, &#123;&#125;]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">set</span>);// Set &#123; &#123;&#125;, &#123;&#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="set集合的属性与方法"><a class="markdownIt-Anchor" href="#set集合的属性与方法"></a> Set集合的属性与方法</h3><p>Set 对象提供了size属性用于返回Set 对象的值的个数。</p><p>Set对象提供了用于操作Set 集合的方法，如下表所示:</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>add(value)</td><td>在 Set 集合尾部添加一个元素，返回该 Set 对象</td></tr><tr><td>delete(value)</td><td>从Set 集合删除指定的元素。返回布尔值，表示是否删除成功</td></tr><tr><td>has(value)</td><td>检索Set 集合是否包含指定的元素。返回布尔值,表示是否包含</td></tr><tr><td>clear()</td><td>清除 Set集合中所有元素，没有返回值</td></tr></tbody></table><p>Set 对象提供了用于遍历Set 集合的方法，如下表所示:</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>values()</td><td>返回一个新的迭代器对象，该对象包含 Set集合中的按插入顺序排列的所有元素的值</td></tr><tr><td>keys()</td><td>与values()方法相同</td></tr><tr><td>entries()</td><td>返回一个新的迭代器对象，该对象包含Set 集合中的按插入顺序排列的所有元素的值的[value, value]数组</td></tr><tr><td>forEach()</td><td>按照插入顺序，为Set 集合中的每一个元素调用一次callback函数</td></tr></tbody></table><h3 id="set结合与aray对比"><a class="markdownIt-Anchor" href="#set结合与aray对比"></a> Set结合与Aray对比</h3><p>一般情况下，在 JavaScript中使用数组来存储一组元素，而新的集合对象有这些优势：</p><ul><li>数组中用于判断元素是否存在的indexOf()函数效率低下。</li><li>Set对象允许根据值删除元素，而数组中必须使用基于下标的splice()方法。</li><li>数组的indexOf()方法无法找到NaN值。</li><li>Set对象存储不重复的值，所以不需要手动处理包含重复值的情况。</li></ul><h2 id="weakset集合"><a class="markdownIt-Anchor" href="#weakset集合"></a> WeakSet集合</h2><h3 id="weakset是什么"><a class="markdownIt-Anchor" href="#weakset是什么"></a> WeakSet是什么</h3><p>WeakSet对象是一些对象值的集合，并且其中的每个对象值都只能出现一次。WeakSet 对象与Set 对象的区别主要有两点:</p><ul><li>WeakSet对象中只能存放对象引用，不能存放值。而 Set对象都可以。</li><li>WeakSet对象中存储的对象值都是被弱引用的。如果没有其他的变量或属性引用这个对象值,则这个对象值会被当成垃圾回收掉。正因为这样，WeakSet对象是无法被枚举的，没有办法拿到WeakSet集合包含的所有元素。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">var</span> obi=&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">ws.add(obj);</span><br><span class="line">ws.add(foo);</span><br></pre></td></tr></table></figure><h3 id="weakset集合的方法"><a class="markdownIt-Anchor" href="#weakset集合的方法"></a> WeakSet集合的方法</h3><p>WeakSet 对象提供了用于操作 WeakSet 集合的方法，如下表所示:</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>add(value)</td><td>在 WeakSet集合尾部添加一个元素，返回该WeakSet对象</td></tr><tr><td>delete(value)</td><td>从 WeakSet集合删除指定的元素。返回布尔值，表示是否删除成功</td></tr><tr><td>has(value)</td><td>检索WeakSet集合是否包含指定的元素。返回布尔值，表示是否包含</td></tr><tr><td>clear()</td><td>清除WeakSet集合中所有元素，没有返回值</td></tr></tbody></table><h2 id="map集合"><a class="markdownIt-Anchor" href="#map集合"></a> Map集合</h2><h3 id="map集合是什么"><a class="markdownIt-Anchor" href="#map集合是什么"></a> Map集合是什么</h3><p>Map集合是键值对的集合。任何值都可以作为Map 集合中的键或值。Map 集合可以按照插入的顺序迭代它的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>. myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> keyObj= &#123;&#125;,</span><br><span class="line">keyFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">keyString = <span class="string">"a string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加键</span></span><br><span class="line">myMap.set(keyString, <span class="string">"和键'a string'关联的值"</span>);</span><br><span class="line">myMap.set(keyObj, <span class="string">"和键 keyObj关联的值"</span>);</span><br><span class="line">myMap.set(keyFunc,<span class="string">"和键keyFunc关联的值"</span>);</span><br></pre></td></tr></table></figure><h3 id="map集合的属性与方法"><a class="markdownIt-Anchor" href="#map集合的属性与方法"></a> Map集合的属性与方法</h3><p>Map对象提供了size属性用于返回Map对象的键值对的个数。<br />Map对象提供了用于操作Map 集合的方法和用于遍历Map集合的方法，如下表所示:</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>set(key, value)</td><td>设置Map对象中键的值。返回该Map 对象</td></tr><tr><td>get(key)</td><td>返回键对应的值。如果不存在，则返回undefined</td></tr><tr><td>delete(key)</td><td>从 Map集合删除指定的键值对。返回布尔值，表示是否删除成功</td></tr><tr><td>has(key)</td><td>检索Map集合是否包含指定键对应的值。返回布尔值，表示是否包含</td></tr><tr><td>clear()</td><td>清除Map集合中所有键值对，没有返回值</td></tr><tr><td>values()</td><td>返回一个新的迭代器对象，该对象包含Map集合中所有元素的值</td></tr><tr><td>keys()</td><td>与values()方法相同</td></tr><tr><td>entries()</td><td>返回一个新的迭代器对象，该对象包含Map 集合中的按插入顺序排列的所有元素的值的[key, value]数组</td></tr><tr><td>forEach()</td><td>按照插入顺序，为Map集合中的每一个元素调用一次 callback函数</td></tr></tbody></table><h3 id="map集合键的相等"><a class="markdownIt-Anchor" href="#map集合键的相等"></a> Map集合键的相等</h3><p>Map集合的键的比较是基于“SamevalueZero”算法:</p><ul><li>判断使用与===相似的规则。</li><li>-0和+0相等。</li><li>NaN与自身相等(与===有所不同)。</li></ul><h3 id="map集合与object对比"><a class="markdownIt-Anchor" href="#map集合与object对比"></a> Map集合与Object对比</h3><p>一般情况下，Object 会被用于将字符串类型映射到数值。Object 允许设置键值对、根据键获取值、删除键、检测某个键是否存在。而Map具有更多的优势:</p><ul><li>Object 的键均为String类型，在Map里键可以是任意类型。</li><li>必须手动计算 Object的尺寸，但是可以很容易地获取使用Map的尺寸。</li><li>Map的遍历遵循元素的插入顺序。</li><li>Object有原型，所以映射中有一些缺省的键。</li></ul><h2 id="weakmap集合"><a class="markdownIt-Anchor" href="#weakmap集合"></a> WeakMap集合</h2><h3 id="weak集合是什么"><a class="markdownIt-Anchor" href="#weak集合是什么"></a> Weak集合是什么</h3><p>WeakMap对象也是键值对的集合。它的键必须是对象类型，值可以是任意类型。它的键被弱保持，也就是说，当其键所指对象没有其他地方引用的时候，它会被回收掉。WeakMap 提供的接口与Map 相同。</p><p>与Map对象不同的是，WeakMap 的键是不可枚举的。不提供列出其键的方法。列表是否存在取决于垃圾回收器的状态，是不可预知的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WeakMap可以使用set()方法添加成员</span></span><br><span class="line"><span class="keyword">const</span> wm1 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> key = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;;</span><br><span class="line">wm1.set(key, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// WeakMap也可以接受一个数组，作为构造函数的参数</span></span><br><span class="line"><span class="keyword">const</span> k1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> k2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> wm2 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>([[k1, <span class="string">'foo'</span>], [k2, <span class="string">'bar'</span>]]);</span><br></pre></td></tr></table></figure><h3 id="weakmap集合的方法"><a class="markdownIt-Anchor" href="#weakmap集合的方法"></a> WeakMap集合的方法、</h3><p>WeakMap.对象提供了用于操作 WeakMaD集合的方法，如下表所示:</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>set(key, value)</td><td>设置Map对象中键的值。返回该Map 对象</td></tr><tr><td>get(key)</td><td>返回键对应的值。如果不存在，则返回undefined</td></tr><tr><td>delete(key)</td><td>从 Map集合删除指定的键值对。返回布尔值，表示是否删除成功</td></tr><tr><td>has(key)</td><td>检索Map集合是否包含指定键对应的值。返回布尔值，表示是否包含</td></tr><tr><td>clear()</td><td>清除Map集合中所有键值对，没有返回值</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://extheor.club/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://extheor.club/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Array 提供的方法</title>
    <link href="https://extheor.club/posts/298cfeed/index.html"/>
    <id>https://extheor.club/posts/298cfeed/index.html</id>
    <published>2020-10-25T12:13:38.000Z</published>
    <updated>2020-10-28T12:51:41.556Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="array-提供的方法"><a class="markdownIt-Anchor" href="#array-提供的方法"></a> Array 提供的方法</h1><h2 id="arrayfrom方法"><a class="markdownIt-Anchor" href="#arrayfrom方法"></a> Array.from()方法</h2><p>Array.from()方法用于从一个类似数组或可迭代对象中创建一个新的数组实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">"0"</span>: <span class="string">"a"</span>,</span><br><span class="line">    <span class="string">"1"</span>: <span class="string">"b"</span>,</span><br><span class="line">    <span class="string">"2"</span>: <span class="string">"c"</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="comment">// ["a","b","c"]</span></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ["a","b","c"]</span></span><br></pre></td></tr></table></figure><p>**值得注意的是，**扩展运算符（…）也可以将某些数据结构转为数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arguments对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([...arguments]);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将数组的Symbol.iterator赋给obj (使类数组可迭代)</span></span><br><span class="line"><span class="comment">// obj[Symbol.iterator] = [][Symbol.iterator];</span></span><br><span class="line"><span class="comment">// console.log([...obj]); // [ 'a', 'b', 'c' ]</span></span><br><span class="line"><span class="built_in">console</span>.log([...Array.from(obj)]); <span class="comment">// [ 'a', 'b', 'c' ]</span></span><br></pre></td></tr></table></figure><h2 id="arrayof-方法"><a class="markdownIt-Anchor" href="#arrayof-方法"></a> Array.of() 方法</h2><p>Array.of() 方法用于创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>,<span class="number">11</span>,<span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>这个方法的主要目的，是弥补数组构造函数 Array() 的不足。因为参数个数的不同，会导致 Array() 的行为有差异。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>,<span class="number">11</span>,<span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// [,,,]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>).length <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>**值得注意的是，**Array.of() 方法如果没有参数，则会返回一个空数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of()); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>()); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>()); <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log([]); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://extheor.club/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://extheor.club/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>箭头函数的注意事项</title>
    <link href="https://extheor.club/posts/1e967920/index.html"/>
    <id>https://extheor.club/posts/1e967920/index.html</id>
    <published>2020-10-25T02:05:22.000Z</published>
    <updated>2020-10-28T12:51:41.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="函数的扩展"><a class="markdownIt-Anchor" href="#函数的扩展"></a> 函数的扩展</h1><h2 id="函数参数的默认值"><a class="markdownIt-Anchor" href="#函数参数的默认值"></a> 函数参数的默认值</h2><p>ECMAScript5的标准中是不允许对函数的参数设置其默认值的。如果定义了形参，而不传递实参时，导致形参的值为undefined。</p><p>当然，也可以通过变通的方式来实现默认值的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">    arg = arg || <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(arg); <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>ECMAScript6的标准新增了对函数的参数设置其默认值的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arg = <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg); <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h3 id="函数参数设置默认值作用域的问题"><a class="markdownIt-Anchor" href="#函数参数设置默认值作用域的问题"></a> 函数参数设置默认值作用域的问题</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/ES6%E5%9B%BE%E7%89%87/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%80%BC%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E9%97%AE%E9%A2%98.png"></img></p><p>所以最后的输出结果为 100</p><h2 id="rest参数"><a class="markdownIt-Anchor" href="#rest参数"></a> rest参数</h2><p>ECMAScript6新增了 rest 参数（…变量名），用于获取函数多余的参数，替代arguments对象。与 rest 参数配合的变量是一个数组，该变量将 多余的参数放入数组中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> val <span class="keyword">of</span> values)&#123;</span><br><span class="line">        sum += val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>)); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p><strong>值得注意的是：</strong></p><ul><li>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</li><li>函数的 length 属性，不包含 rest 参数。</li></ul><h2 id="箭头函数的注意事项"><a class="markdownIt-Anchor" href="#箭头函数的注意事项"></a> 箭头函数的注意事项</h2><p>使用箭头函数时，需要注意以下几点：</p><ul><li>函数体内的 this, 就是定义时所在的对象，而不是使用时所在的对象。</li><li>不可以当作构造函数。也就是说不可以使用 new 命令，否则会抛出一个错误。</li><li>不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</li></ul><h2 id="尾调用是什么"><a class="markdownIt-Anchor" href="#尾调用是什么"></a> 尾调用是什么</h2><p>尾调用（Tail Call）是函数式编程的一个重要概念。本身非常简单，就是指某个函数的最后一步调用 另一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> g(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码示例中，f()函数的最后一步是调用 g() 函数，g() 函数就叫尾调用。</p><p><strong>值得注意的是</strong>，尾调用不一定出现在函数尾部，只要是最后一步操作即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://extheor.club/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://extheor.club/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>对象的扩展内容</title>
    <link href="https://extheor.club/posts/3859c98f/index.html"/>
    <id>https://extheor.club/posts/3859c98f/index.html</id>
    <published>2020-10-25T01:42:23.000Z</published>
    <updated>2020-10-28T12:51:41.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="promise对象"><a class="markdownIt-Anchor" href="#promise对象"></a> Promise对象</h1><h2 id="promise对象是什么"><a class="markdownIt-Anchor" href="#promise对象是什么"></a> Promise对象是什么</h2><h3 id="promise对象是什么-2"><a class="markdownIt-Anchor" href="#promise对象是什么-2"></a> Promise对象是什么</h3><p>ECMAScript 6新增了Promise 对象，该对象允许对延迟和异步操作流程进行控制。一个Promise对象就是一个代表了异步操作最终完成或者失败的对象。</p><p>开发人员可以使用由其他函数创建并返回的Promise对象。Promise对象本质上就是一个绑定了回调的对象，而不是将回调传进函数内部。</p><p>一个Promise有以下几种状态:</p><ul><li>pending:初始状态，既不是成功，也不是失败状态。</li><li>fulfilled:意味着操作成功完成。</li><li>rejected:意味着操作失败。</li></ul><h3 id="创建promise对象"><a class="markdownIt-Anchor" href="#创建promise对象"></a> 创建Promise对象</h3><p>ECMAScript 6新增了Promise 对象是一个构造函数，用于创建生成Promise 对象实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;...&#125; <span class="comment">/* executor*/</span> );</span><br></pre></td></tr></table></figure><p>executor表示带有resolve和reject两个参数的函数。</p><ul><li>Promise 构造函数执行时立即调用executor 函数，resolve和reject两个函数作为参数传递给executor ( executor函数在Promise 构造函数返回新建对象前被调用）。</li><li>resolve和reject 函数被调用时，分别将Promise的状态改为fulfilled(完成)或<br />口rejectea<br />败)。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; resolve(<span class="string">'foo'</span>); &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">//l "foo"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="promise对象的约定"><a class="markdownIt-Anchor" href="#promise对象的约定"></a> Promise对象的约定</h3><p>在应用Promise 时，将会有以下约定:</p><ul><li>在 JavaScript事件队列的当前运行完成之前，回调函数永远不会被调用。</li><li>通过.then形式添加的回调函数，甚至都在异步操作完成之后才被添加的函数，都会被调用。</li><li>通过多次调用.then，可以添加多个回调函数，它们会按照插入顺序并且独立运行。</li></ul><p>因此，Promise最直接的好处就是链式调用。</p><h3 id="promise对象的链式操作"><a class="markdownIt-Anchor" href="#promise对象的链式操作"></a> Promise对象的链式操作</h3><p>常见的需求就是连续执行两个或者多个异步操作。这种情况下，每一个后来的操作都在前面的操作执行成功之后，带着上一步操作所返回的结果开始执行。可以通过创造一个Promise 来完成这种需求。<strong>then()函数会返回一个新的Promise，跟原来的不同</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = doSomething();</span><br><span class="line"><span class="keyword">const</span> promise2 = promise.then(successCallback, failureCallback);</span><br></pre></td></tr></table></figure><p>promise2对象不仅代表 doSomething()函数的完成，也代表了你传入的successCallback 或者failureCallback,的完成。</p><p>基本上，每一个 Promise 代表了链式中另一个异步过程的完成。</p><h2 id="promise对象原型的方法"><a class="markdownIt-Anchor" href="#promise对象原型的方法"></a> Promise对象原型的方法</h2><h3 id="then-方法"><a class="markdownIt-Anchor" href="#then-方法"></a> then() 方法</h3><p>then()方法用于为Promise 对象添加状态改变时回调函数。then()方法的第一个参数是 resolved 状态的回调函数，第二个参数（可选）是rejected状态的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="comment">/*fulfillment*/</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;<span class="comment">/*rejection*/</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>第一个回调函数:当Promise变成接受状态（ fulfillment )时，该参数作为回调函数被调用。该函数有一个参数，即接受的最终结果。</p></li><li><p>第二个回调函数:当 Promise 变成拒绝状态( rejection )时，该参数作为回调函数被调用。该函数有一个参数，即拒绝的原因。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">resolve(<span class="string">'Success!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">// "Success!"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="catch-方法"><a class="markdownIt-Anchor" href="#catch-方法"></a> catch() 方法</h3><p>catch)方法返回一个Promise对象，并且处理拒绝的情况。它的行为与调用then()方法相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;<span class="comment">/*拒绝*/</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li>回调函数:当Promise被rejected时，被调用该回调函数。该函数具有一个参数，即rejection的原因。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">reject(<span class="string">'error'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">// "Success!"</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">// "error"</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><h3 id="finally-方法"><a class="markdownIt-Anchor" href="#finally-方法"></a> finally() 方法</h3><p>finally()方法返回一个Promise对象，在执行 then()和catch()后，都会执行 finally指定的回调函数。避免同样的语句需要在 then()和catch()中各写一次的情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/*返回状态为(resolved或rejected)*/</span>&#125;);</span><br></pre></td></tr></table></figure><p>回调函数:Promnise状态改变后的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">resolve(<span class="string">'Success'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;&#125;)</span><br><span class="line">.finally(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p><strong>值得注意的是</strong>，finally()方法是ECMAScript 2018引入标准的。</p><h2 id="promise对象的方法"><a class="markdownIt-Anchor" href="#promise对象的方法"></a> Promise对象的方法</h2><h3 id="promiseall-方法"><a class="markdownIt-Anchor" href="#promiseall-方法"></a> Promise.all() 方法</h3><p>Promise.all()方法用于将多个Promise 对象，包装成一个新的Promise 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all iterable);</span><br></pre></td></tr></table></figure><ul><li>iterable:一个可迭代对象，如Array 或 String 等。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">setTimeout(resolve, <span class="number">100</span>, <span class="string">'foo'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2, promise3]).then(<span class="function"><span class="keyword">function</span> (<span class="params">values</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(values);<span class="comment">// Array [3, 42, "foo"]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="promiserace-方法"><a class="markdownIt-Anchor" href="#promiserace-方法"></a> Promise.race() 方法</h3><p>Promise.race()方法返回一个Promise 对象，一旦迭代器中的某个Promise 解决或拒绝，返回的Promise 就会解决或拒绝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race(iterable);</span><br></pre></td></tr></table></figure><ul><li>itecable:一个可迭代对象，如Array或 String 等。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">setTimeout(resolve, <span class="number">500</span>, <span class="string">'one'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">ar promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">setTimeout(resolve,<span class="number">100</span>, <span class="string">'two'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.race([promise1, promise2]).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="comment">//两个Promise对象都执行完毕，但promise2更快</span></span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// "two"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="promiseresolve-方法"><a class="markdownIt-Anchor" href="#promiseresolve-方法"></a> Promise.resolve() 方法</h3><p>Promise.resolve()方法返回一个以给定值解析后的Prormise对象。但如果这个值是个thenable(即带有 theh()方法），返回的Promise 会“跟随”这个thenable的对象，采用它的最终状态(指resolved/rejected/pending/settled );如果传入的value本身就是 Promise对象，则该对象作为Promise.cesolve()方法的返回值返回;否则以该值为成功状态返回Promise 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(value);</span><br></pre></td></tr></table></figure><ul><li>value:将被Promise对象解析的参数。也可以是一个 Promise 对象，或者是一个 thenable(即带有 then()方法）。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve(<span class="number">123</span>);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);<span class="comment">// 123</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="promisereject-方法"><a class="markdownIt-Anchor" href="#promisereject-方法"></a> Promise.reject() 方法</h3><p>Promise.reject()方法返回一个带有拒绝原因reason参数的Promise 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reiect(reason);</span><br></pre></td></tr></table></figure><ul><li>reason:表示 Promise被拒绝的原因。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">"Testing static reject"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line"><span class="comment">//未被调用</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(reason); l/ <span class="string">"Testing static reject"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="promise对象的应用"><a class="markdownIt-Anchor" href="#promise对象的应用"></a> Promise对象的应用</h2><h3 id="加载图片"><a class="markdownIt-Anchor" href="#加载图片"></a> 加载图片</h3><p>可以将图片加载写成一个Promise，一旦加载完成，Promise的状态就发生变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> preloadImage = <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">        image.onload = resolve;</span><br><span class="line">        image.onerror = reject;</span><br><span class="line">        image.src = path;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过ajax加载图片"><a class="markdownIt-Anchor" href="#通过ajax加载图片"></a> 通过Ajax加载图片</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgLoad</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        request.open(<span class="string">'GET'</span>, url);</span><br><span class="line">request.responseType = <span class="string">'blob'</span>;</span><br><span class="line">        request.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</span><br><span class="line">                resolve(request.response);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">reject(<span class="built_in">Error</span>(<span class="string">'error code:'</span> + request.statusText));</span><br><span class="line">            &#125;</span><br><span class="line">&#125;;</span><br><span class="line">request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">reject(<span class="built_in">Error</span>(<span class="string">'lt is a network error.'</span>));&#125;;</span><br><span class="line">request.send();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="promise对象的原理剖析"><a class="markdownIt-Anchor" href="#promise对象的原理剖析"></a> Promise对象的原理剖析</h2><h3 id="promise的执行流程"><a class="markdownIt-Anchor" href="#promise的执行流程"></a> Promise的执行流程</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/ES6%E5%9B%BE%E7%89%87/Promise%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png"></img></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://extheor.club/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://extheor.club/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>对象的扩展内容</title>
    <link href="https://extheor.club/posts/3859c98f/index.html"/>
    <id>https://extheor.club/posts/3859c98f/index.html</id>
    <published>2020-10-24T08:21:36.000Z</published>
    <updated>2020-10-28T12:51:41.565Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="对象的扩展内容"><a class="markdownIt-Anchor" href="#对象的扩展内容"></a> 对象的扩展内容</h1><h2 id="objectis"><a class="markdownIt-Anchor" href="#objectis"></a> <a href="http://Object.is" target="_blank" rel="noopener">Object.is</a>()方法</h2><p>ECMAScript 5比较两个值是否相等，使用的是相等运算符（<mark>）和全等运算符(</mark>=)。但这两个运算符在使用时都具有缺点:</p><ul><li>相等运算符在比较之前，会自动转换数据类型。</li><li>全等运算符导致 NaN与自身不等，+0 等于-0 等问题。</li></ul><p>ECMAScript 6提出了同值相等(Same-value equality)算法来解决以上问题。<a href="http://Object.is" target="_blank" rel="noopener">Object.is</a>()方法就是对同值相等算法的具体实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === <span class="number">-0</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="objectassign-方法"><a class="markdownIt-Anchor" href="#objectassign-方法"></a> Object.assign() 方法</h2><p>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(target, ...sources)</span><br></pre></td></tr></table></figure><ul><li>target: 目标对象</li><li>sources: 源对象</li><li>返回值: 目标对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> object2 = <span class="built_in">Object</span>.assign(&#123; <span class="attr">c</span>: <span class="number">4</span>, <span class="attr">d</span>: <span class="number">5</span> &#125;, object1);</span><br><span class="line"><span class="built_in">console</span>.log(object2.c, object2.d); <span class="comment">// 3 5</span></span><br></pre></td></tr></table></figure><p>Object.assign() 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。</p><h2 id="super关键字"><a class="markdownIt-Anchor" href="#super关键字"></a> super关键字</h2><p>ECMAScript6新增了 super 关键字用于指向当前对象的原型对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">    foo: <span class="string">"hello"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    foo: <span class="string">"world"</span>,</span><br><span class="line">    find() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.foo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line"><span class="built_in">console</span>.log(obj.find()); <span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure><h2 id="对象的扩展运算符"><a class="markdownIt-Anchor" href="#对象的扩展运算符"></a> 对象的扩展运算符</h2><p>对象的扩展运算符（…）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> z = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> n = &#123; ...z &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(n); <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><p>上述代码示例等价于 Object.assign() 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> z = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> m = <span class="built_in">Object</span>.assign(&#123;&#125;, z);</span><br><span class="line"><span class="built_in">console</span>.log(m); <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://extheor.club/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://extheor.club/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>扩展运算符</title>
    <link href="https://extheor.club/posts/3d1ef1fa/index.html"/>
    <id>https://extheor.club/posts/3d1ef1fa/index.html</id>
    <published>2020-10-24T07:21:36.000Z</published>
    <updated>2020-10-28T12:51:41.564Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="扩展运算符"><a class="markdownIt-Anchor" href="#扩展运算符"></a> 扩展运算符</h1><p>扩展运算符 (…) 允许一个表达式在原地展开，当需要多个参数（比如函数调用时）或者多个值（比如字面量数组）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>,log(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]); <span class="comment">// 1 2 3</span></span><br><span class="line"><span class="built_in">console</span>,log(<span class="number">1</span>, ...[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>); <span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><p>扩展运算符主要用于函数调用的参数（形参与实参）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x,y,z</span>)</span>&#123;</span><br><span class="line">    closole.log(x+y+z); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">f(...args);</span><br></pre></td></tr></table></figure><h2 id="替代-apply-方法"><a class="markdownIt-Anchor" href="#替代-apply-方法"></a> 替代 apply() 方法</h2><p>由于扩展运算符可以展开数组所以不再需要 apply() 方法将数组转为函数的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x,y,z</span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">f.apply(<span class="literal">null</span>, args); <span class="comment">// ES5的写法</span></span><br><span class="line">f(...args); <span class="comment">// ES6的写法</span></span><br></pre></td></tr></table></figure><h2 id="扩展运算符的应用"><a class="markdownIt-Anchor" href="#扩展运算符的应用"></a> 扩展运算符的应用</h2><ul><li><p>复制数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展运算符复制数组 - 深复制</span></span><br><span class="line"><span class="comment">// let arr2 = [...arr1];</span></span><br><span class="line"><span class="keyword">let</span> [...arr2] = arr1;</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line">arr2[<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr2, arr1);</span><br></pre></td></tr></table></figure></li><li><p>合并数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// ES5合并数组的方法</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.concat(arr2)); <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"><span class="comment">// ES6合并数组的方法(利用扩展运算符)</span></span><br><span class="line"><span class="built_in">console</span>.log([...arr1, ...arr2]); <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure></li><li><p>与解构赋值结合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="built_in">console</span>.log(a = list[<span class="number">0</span>], rest = list.slice(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="built_in">console</span>.log([a, ...rest] = list)</span><br></pre></td></tr></table></figure><p>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</p></li><li><p>字符串转换为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([...<span class="string">"hello"</span>]); <span class="comment">// [ 'h', 'e', 'l', 'l', 'o' ]</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://extheor.club/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://extheor.club/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>判断是否包含的方法</title>
    <link href="https://extheor.club/posts/26f82f65/index.html"/>
    <id>https://extheor.club/posts/26f82f65/index.html</id>
    <published>2020-10-24T06:38:35.000Z</published>
    <updated>2020-10-28T12:51:41.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="判断是否包含的方法"><a class="markdownIt-Anchor" href="#判断是否包含的方法"></a> 判断是否包含的方法</h1><h2 id="includes-方法"><a class="markdownIt-Anchor" href="#includes-方法"></a> includes() 方法</h2><p>includes() 方法用于判断一个字符串是否包含在另一个字符串中，返回布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.includes(searchString[,position])</span><br></pre></td></tr></table></figure><ul><li>searchString: 在 str 字符串中搜索的字符串</li><li>position: 可选项。从当前字符串的哪个索引位置开始搜寻子字符串，默认值为0。</li></ul><p><strong>值得注意的是</strong>，includes() 方法是区分大小写的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"To be,or not to be,that is the question."</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"To be"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"question"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"nonexistent"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"To be"</span>, <span class="number">1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">"TO BE"</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>自定义 myIncludes 方法，实现一个不区别大小写的判断</p><p>使用 Object.defineProperty 方法把 myIncludes 方法添加到 String 的原型中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">String</span>.prototype, <span class="string">"myIncludes"</span>, &#123;</span><br><span class="line">  value: <span class="function"><span class="keyword">function</span> (<span class="params">searchStr, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="keyword">this</span>.toLowerCase();</span><br><span class="line">    searchStr = searchStr.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> index === <span class="string">"number"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> str.includes(searchStr, index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> str.includes(searchStr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.myIncludes(<span class="string">"O"</span>, <span class="number">0</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="startswith-方法"><a class="markdownIt-Anchor" href="#startswith-方法"></a> startsWith() 方法</h2><p>startWidth() 方法用于判断当前字符串是否是以另外一个给定 的子字符串“开头”的，返回布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.startWith(searchString[,postion])</span><br></pre></td></tr></table></figure><ul><li>searchString: 在 str 字符串中 搜索的字符串</li><li>position: 可选项。从当前字符串的哪个索引位置开始搜寻子字符串，默认值为0。</li></ul><h2 id="endswith-方法"><a class="markdownIt-Anchor" href="#endswith-方法"></a> endsWith() 方法</h2><p>endsWith() 方法用于判断当前字符串是否是以另外一个给定的子字符串“结尾”的，返回布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.endsWith(searchString[,position])</span><br></pre></td></tr></table></figure><ul><li>searchString: 在 str 字符串中 搜索的字符串</li><li>position: 可选项。从当前字符串的哪个索引位置开始搜寻子字符串，默认值为0。</li></ul><h2 id="repeat-方法"><a class="markdownIt-Anchor" href="#repeat-方法"></a> repeat() 方法</h2><p>repeat() 方法用于将原字符串重复 n 次，返回一个新字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.repeat(number)</span><br></pre></td></tr></table></figure><ul><li>number: 表示将原字符串重复的次数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"x"</span>.repeat(<span class="number">3</span>)); <span class="comment">// "xxx"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello"</span>.repeat(<span class="number">2</span>)); <span class="comment">// "hellohello"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"na"</span>.repeat(<span class="number">0</span>)); <span class="comment">// ""</span></span><br></pre></td></tr></table></figure><p>number 参数具有以下几种情况：</p><ul><li>如果 number 参数为小鼠的话，则会向下取整。</li><li>如果number 参数为负数或无穷大的话，则会报错。</li><li>如果 number 参数为 NaN 的话，则为 0。</li><li>如果 number 参数为字符串，则会先转换为数字值。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://extheor.club/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://extheor.club/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>安装Babel</title>
    <link href="https://extheor.club/posts/9efd76a3/index.html"/>
    <id>https://extheor.club/posts/9efd76a3/index.html</id>
    <published>2020-10-24T03:24:12.000Z</published>
    <updated>2020-10-28T12:51:41.564Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="安装babel"><a class="markdownIt-Anchor" href="#安装babel"></a> 安装Babel</h1><p>使用以下命令安装 Babel packages:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel&#x2F;core @babel&#x2F;cli @babel&#x2F;preset-env</span><br><span class="line">npm install --save @babel&#x2F;polyfill</span><br></pre></td></tr></table></figure><p>如果感觉安装的慢，可以加上淘宝镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="配置babel"><a class="markdownIt-Anchor" href="#配置babel"></a> 配置Babel</h2><p>在工程项目的根目录下创建 package.json 配置文件，该配置文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"presets"</span>: [</span><br><span class="line">        <span class="string">"latest"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [],</span><br><span class="line">    <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">        <span class="attr">"babel-cli"</span>: <span class="string">"^6.0.0"</span>,</span><br><span class="line">        <span class="attr">"babel-preset-latest"</span>: <span class="string">"^6.24.1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"build"</span>: <span class="string">"babel src -d lib"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="babel-cli-转码"><a class="markdownIt-Anchor" href="#babel-cli-转码"></a> babel-cli 转码</h2><p>根据 package.json 配置文件在工程的根目录下创建 src 和 lib 两个目录：</p><ul><li>src 目录：用于放置 ECMAScript6 的代码文件。</li><li>lib 目录：用于放置通过 Babel 转码后的代码文件。</li></ul><p>在 src 目录下编写 ECMAScript6 的代码文件后，在命令提示符中通过如下指令进行转码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://extheor.club/categories/ES6/"/>
    
    
      <category term="ES6" scheme="https://extheor.club/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>FL如何用试用版保存音乐工程文件</title>
    <link href="https://extheor.club/posts/380dfa6c/index.html"/>
    <id>https://extheor.club/posts/380dfa6c/index.html</id>
    <published>2020-10-15T07:08:21.000Z</published>
    <updated>2020-10-15T07:09:01.562Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="fl如何用试用版保存音乐工程文件"><a class="markdownIt-Anchor" href="#fl如何用试用版保存音乐工程文件"></a> FL如何用试用版保存音乐工程文件</h1><p>首先，下载软件 Hex Edit Neo，可以百度自行下载<br />然后鼠标右击工程文件，用 Hex Edit 打开<br /><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200822223008268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nvb2xfYnJlZXplXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />将 00000020 这行下的 09 0a两列的值改为 03 25<br /><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200822223228816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Nvb2xfYnJlZXplXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><br />然后保存退出，用 fl studio20 打开即可~</p>]]></content>
    
    <summary type="html">
    
      FL如何用试用版保存音乐工程文件
    
    </summary>
    
    
      <category term="FL" scheme="https://extheor.club/categories/FL/"/>
    
    
      <category term="FL" scheme="https://extheor.club/tags/FL/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs博客开发笔记</title>
    <link href="https://extheor.club/posts/470d45ef/index.html"/>
    <id>https://extheor.club/posts/470d45ef/index.html</id>
    <published>2020-10-08T12:13:38.000Z</published>
    <updated>2020-10-28T12:51:42.019Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="nodejs博客开发笔记已完结"><a class="markdownIt-Anchor" href="#nodejs博客开发笔记已完结"></a> Nodejs博客开发笔记（已完结）</h1><blockquote><p>本博客采用 node 原生制作</p></blockquote><h2 id="span-id接口设计接口设计span"><a class="markdownIt-Anchor" href="#span-id接口设计接口设计span"></a> <span id="接口设计">接口设计</span></h2><table><thead><tr><th>描述</th><th>接口</th><th>方法</th><th>url参数</th><th>备注</th></tr></thead><tbody><tr><td>获取博客列表</td><td>/api/blog/list</td><td>get</td><td>author 作者，keyword 搜索关键字</td><td>参数为空的话，则不进行查询过滤</td></tr><tr><td>获取一篇博客的内容</td><td>/api/blog/detail</td><td>get</td><td>id</td><td></td></tr><tr><td>新增一篇博客</td><td>/api/blog/new</td><td>post</td><td></td><td>post中有新增的信息</td></tr><tr><td>更新一篇博客</td><td>/api/blog/update</td><td>post</td><td>id</td><td>postData中有更新的内容</td></tr><tr><td>删除一篇博客</td><td>/api/blog/del</td><td>post</td><td>id</td><td></td></tr><tr><td>登录</td><td>/api/user/login</td><td>post</td><td></td><td>postData中有用户名和密码</td></tr></tbody></table><h2 id="基本目录结构"><a class="markdownIt-Anchor" href="#基本目录结构"></a> 基本目录结构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">|-- bin</span><br><span class="line"></span><br><span class="line">​   |-- www.js  ---  服务启动文件</span><br><span class="line"></span><br><span class="line">|-- src</span><br><span class="line"></span><br><span class="line">​|-- controller</span><br><span class="line"></span><br><span class="line">​|-- blog.js  ---  数据文件</span><br><span class="line"></span><br><span class="line">​|-- model</span><br><span class="line"></span><br><span class="line">​|-- resModel.js  ---  模型文件</span><br><span class="line"></span><br><span class="line">​|-- router</span><br><span class="line"></span><br><span class="line">​|-- blog.js  ---  存放 blog 目录下的路由</span><br><span class="line"></span><br><span class="line">​|-- user.js  ---  存放 user 目录下的路由</span><br><span class="line"></span><br><span class="line">|-- app.js  ---  处理路由的文件</span><br><span class="line"></span><br><span class="line">|-- package.json  ---  包管理文件</span><br></pre></td></tr></table></figure><h2 id="博客搭建过程"><a class="markdownIt-Anchor" href="#博客搭建过程"></a> 博客搭建过程</h2><h3 id="梦初"><a class="markdownIt-Anchor" href="#梦初"></a> 【梦初】</h3><blockquote><p>把服务跑起来</p></blockquote><p>www.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="built_in">require</span>(<span class="string">"../app"</span>);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(serverHandle);</span><br><span class="line"></span><br><span class="line">server.listen(port, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`服务启动成功 --- <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>serverHandle 是分离出去的回调函数</p></blockquote><h3 id="梦入"><a class="markdownIt-Anchor" href="#梦入"></a> 【梦入】</h3><blockquote><p>把 serverHandle 导出去</p></blockquote><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> serverHandle = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置返回格式 JSON</span></span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">  res.end(<span class="string">"Hello Blog!"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = serverHandle;</span><br></pre></td></tr></table></figure><blockquote><p>现在 <code>127.0.0.1:3000</code> 就能正常启动了</p></blockquote><h3 id="梦时"><a class="markdownIt-Anchor" href="#梦时"></a> 【梦时】</h3><blockquote><p>我需要写<a href="#%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1">路由</a>，怎么办呢？于是乎我便把 blog 和 user 两个目录下的路由分别写到不同的 js 文件中，然后导出供 <code>app.js</code> 文件进行路由处理</p></blockquote><p>blog.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method; <span class="comment">// GET POST</span></span><br><span class="line">  <span class="keyword">const</span> url = req.url;</span><br><span class="line">  <span class="comment">// 获取路由地址</span></span><br><span class="line">  <span class="keyword">const</span> path = url.split(<span class="string">"?"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取博客列表</span></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">"GET"</span> &amp;&amp; path == <span class="string">"/api/blog/list"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"这是获取博客列表的接口"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取博客详情</span></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">"GET"</span> &amp;&amp; path == <span class="string">"/api/blog/detail"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"这是获取博客详情的接口"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新建一篇博客</span></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">"POST"</span> &amp;&amp; path == <span class="string">"/api/blog/new"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"这是新建博客的接口"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新一篇博客</span></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">"POST"</span> &amp;&amp; path == <span class="string">"/api/blog/update"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"这是更新博客的接口"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleBlogRouter;</span><br></pre></td></tr></table></figure><p>user.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method; <span class="comment">// GET POST</span></span><br><span class="line">  <span class="keyword">const</span> url = req.url;</span><br><span class="line">  <span class="comment">// 获取路由地址</span></span><br><span class="line">  <span class="keyword">const</span> path = url.split(<span class="string">"?"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 登录</span></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">"POST"</span> &amp;&amp; path == <span class="string">"/api/user/login"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"这是用户登录的接口"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleUserRouter;</span><br></pre></td></tr></table></figure><h3 id="梦境"><a class="markdownIt-Anchor" href="#梦境"></a> 【梦境】</h3><blockquote><p>但是写好路由之后怎么使用它呢？这就需要通过 <code>app.js</code> 来处理路由了，我们通常会在处理路由时，先给它设置 JSON 的返回格式，然后处理时需要以字符串的形式响应给前端，具体如下</p></blockquote><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 blog 路由文件</span></span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="built_in">require</span>(<span class="string">"./src/router/blog"</span>);</span><br><span class="line"><span class="comment">// 导入 user 路由文件</span></span><br><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="built_in">require</span>(<span class="string">"./src/router/user"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置返回格式 JSON</span></span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 blog 路由</span></span><br><span class="line">  <span class="keyword">const</span> blogData = handleBlogRouter(req, res);</span><br><span class="line">  <span class="keyword">if</span> (blogData) &#123;</span><br><span class="line">    <span class="comment">// 把 JSON 类型的数据先转换为字符串，再响应给前端</span></span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(blogData));</span><br><span class="line">    <span class="comment">// 最后需要返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 user 路由</span></span><br><span class="line">  <span class="keyword">const</span> userData = handleUserRouter(req, res);</span><br><span class="line">  <span class="keyword">if</span> (userData) &#123;</span><br><span class="line">    <span class="comment">// 把 JSON 类型的数据先转换为字符串，再响应给前端</span></span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(userData));</span><br><span class="line">    <span class="comment">// 最后需要返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 未命中路由，返回 404</span></span><br><span class="line">  res.writeHead(<span class="number">404</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  res.write(<span class="string">"404 Not Found\n"</span>);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = serverHandle;</span><br></pre></td></tr></table></figure><blockquote><p>现在我们已经可以通过 <code>http://127.0.0.1:3000/api/blog/list</code> 来正常的访问了</p></blockquote><h3 id="梦遇"><a class="markdownIt-Anchor" href="#梦遇"></a> 【梦遇】</h3><blockquote><p>虽然已经可以正常的访问了，但是我们可以发现， <code>blog.js</code> <code>user.js</code> 中是有重复的代码的，这就需要通过路由设计来优化代码了</p></blockquote><p>在 <code>app.js</code> 中处理它们重复的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = req.url;</span><br><span class="line">req.path = url.split(<span class="string">"?"</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 blog 路由文件</span></span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="built_in">require</span>(<span class="string">"./src/router/blog"</span>);</span><br><span class="line"><span class="comment">// 导入 user 路由文件</span></span><br><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="built_in">require</span>(<span class="string">"./src/router/user"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置返回格式 JSON</span></span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> url = req.url;</span><br><span class="line">  req.path = url.split(<span class="string">"?"</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 处理 blog 路由</span></span><br><span class="line">  <span class="keyword">const</span> blogData = handleBlogRouter(req, res);</span><br><span class="line">  <span class="keyword">if</span> (blogData) &#123;</span><br><span class="line">    <span class="comment">// 把 JSON 类型的数据先转换为字符串，再响应给前端</span></span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(blogData));</span><br><span class="line">    <span class="comment">// 最后需要返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 user 路由</span></span><br><span class="line">  <span class="keyword">const</span> userData = handleUserRouter(req, res);</span><br><span class="line">  <span class="keyword">if</span> (userData) &#123;</span><br><span class="line">    <span class="comment">// 把 JSON 类型的数据先转换为字符串，再响应给前端</span></span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(userData));</span><br><span class="line">    <span class="comment">// 最后需要返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 未命中路由，返回 404</span></span><br><span class="line">  res.writeHead(<span class="number">404</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  res.write(<span class="string">"404 Not Found\n"</span>);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = serverHandle;</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>blog.js</code>  <code>user.js</code> 文件中就得写成 <code>req.path</code> 了</p></blockquote><p>blog.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取博客列表</span></span><br><span class="line">  <span class="keyword">if</span> (req.method == <span class="string">"GET"</span> &amp;&amp; req.path == <span class="string">"/api/blog/list"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"这是获取博客列表的接口"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取博客详情</span></span><br><span class="line">  <span class="keyword">if</span> (req.method == <span class="string">"GET"</span> &amp;&amp; req.path == <span class="string">"/api/blog/detail"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"这是获取博客详情的接口"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新建一篇博客</span></span><br><span class="line">  <span class="keyword">if</span> (req.method == <span class="string">"POST"</span> &amp;&amp; req.path == <span class="string">"/api/blog/new"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"这是新建博客的接口"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新一篇博客</span></span><br><span class="line">  <span class="keyword">if</span> (req.method == <span class="string">"POST"</span> &amp;&amp; req.path == <span class="string">"/api/blog/update"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"这是更新博客的接口"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleBlogRouter;</span><br></pre></td></tr></table></figure><p>user.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 登录</span></span><br><span class="line">  <span class="keyword">if</span> (req.method == <span class="string">"POST"</span> &amp;&amp; req.path == <span class="string">"/api/user/login"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"这是用户登录的接口"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleUserRouter;</span><br></pre></td></tr></table></figure><h3 id="梦醒"><a class="markdownIt-Anchor" href="#梦醒"></a> 【梦醒】</h3><blockquote><p>现在虽然能返回一些内容了，但是我们需要返回一些动态的数据，数据是由 <code>router/blog.js</code> 文件中的路由返回的，同样的道理，把数据单独做成一个文件</p></blockquote><blockquote><p>在 <code>controller</code> 目录下新建一个 <code>blog.js</code> 文件</p></blockquote><p>controller/blog.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getList = <span class="function">(<span class="params">author, keyword</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 先返回假数据(格式是正确的)</span></span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">"标题A"</span>,</span><br><span class="line">      content: <span class="string">"内容A"</span>,</span><br><span class="line">      createTime: <span class="number">1601305438637</span>,</span><br><span class="line">      author: <span class="string">"张三"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">"标题B"</span>,</span><br><span class="line">      content: <span class="string">"内容B"</span>,</span><br><span class="line">      createTime: <span class="number">1601305527630</span>,</span><br><span class="line">      author: <span class="string">"李四"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getList,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这时我们就可以在 <code>router/blog.js</code> 文件中去使用这个数据文件中的数据了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 getList 数据文件</span></span><br><span class="line"><span class="keyword">const</span> &#123; getList &#125; = <span class="built_in">require</span>(<span class="string">"../controller/blog"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>想要获取到用户提交的数据，需要解析 query，获取到 query 对象</p><p>首先引入 querystring，然后再使用 querystring.parse 对url进行解析</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入querystring</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析 query</span></span><br><span class="line">req.query = querystring.parse(url.split(<span class="string">"?"</span>)[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 blog 路由文件</span></span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="built_in">require</span>(<span class="string">"./src/router/blog"</span>);</span><br><span class="line"><span class="comment">// 导入 user 路由文件</span></span><br><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="built_in">require</span>(<span class="string">"./src/router/user"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入querystring</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置返回格式 JSON</span></span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> url = req.url;</span><br><span class="line">  req.path = url.split(<span class="string">"?"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析 query</span></span><br><span class="line">  req.query = querystring.parse(url.split(<span class="string">"?"</span>)[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 blog 路由</span></span><br><span class="line">  <span class="keyword">const</span> blogData = handleBlogRouter(req, res);</span><br><span class="line">  <span class="keyword">if</span> (blogData) &#123;</span><br><span class="line">    <span class="comment">// 把 JSON 类型的数据先转换为字符串，再响应给前端</span></span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(blogData));</span><br><span class="line">    <span class="comment">// 最后需要返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 user 路由</span></span><br><span class="line">  <span class="keyword">const</span> userData = handleUserRouter(req, res);</span><br><span class="line">  <span class="keyword">if</span> (userData) &#123;</span><br><span class="line">    <span class="comment">// 把 JSON 类型的数据先转换为字符串，再响应给前端</span></span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(userData));</span><br><span class="line">    <span class="comment">// 最后需要返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 未命中路由，返回 404</span></span><br><span class="line">  res.writeHead(<span class="number">404</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  res.write(<span class="string">"404 Not Found\n"</span>);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = serverHandle;</span><br></pre></td></tr></table></figure><blockquote><p>现在我们可以在 <code>router/blog.js</code> 文件中调用 getList 函数，来获取到需要返回的数据了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 query 中的 anthor ,如果没有则为空字符串</span></span><br><span class="line"><span class="keyword">const</span> author = req.query.author || <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 获取 query 中的 keyword ,如果没有则为空字符串</span></span><br><span class="line"><span class="keyword">const</span> keyword = req.query.keyword || <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 调用 getList 函数</span></span><br><span class="line"><span class="keyword">const</span> listData = getList(author, keyword);</span><br></pre></td></tr></table></figure><blockquote><p>但是又想到我们不能直接把这个数据直接返回给前端，我们需要返回给前端的只是需要一些 code 啊，message 、data 之类的东西</p></blockquote><blockquote><p>所以需要创建模型文件，把需要返回的数据用类来封装一下</p></blockquote><p>resModel.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data, message) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = data;</span><br><span class="line">      data = <span class="literal">null</span>;</span><br><span class="line">      message = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">      <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (message) &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuccessModel</span> <span class="keyword">extends</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data, message) &#123;</span><br><span class="line">    <span class="keyword">super</span>(data, message);</span><br><span class="line">    <span class="keyword">this</span>.errno = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorModel</span> <span class="keyword">extends</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data, message) &#123;</span><br><span class="line">    <span class="keyword">super</span>(data, message);</span><br><span class="line">    <span class="keyword">this</span>.errno = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  SuccessModel,</span><br><span class="line">  ErrorModel,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>router/blog.js</code> 文件中导入数据模型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入数据模型</span></span><br><span class="line"><span class="keyword">const</span> &#123; SuccessModel, ErrorModel &#125; = <span class="built_in">require</span>(<span class="string">"../model/resModel"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>返回一个 SuccessModel 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个 SuccessModel 对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SuccessModel(listData);</span><br></pre></td></tr></table></figure><p>意思就是说在 <code>SuccessModel</code> 中只传入一个 data 数据，当执行 <code>SuccessModel</code> 类时，会把 <code>listData</code> 的值赋给 <code>this.data</code> 类本身，并且 <code>SuccessModel</code> 自带 error为0</p><blockquote><p>当我在浏览器输入 <code>http://127.0.0.1:3000/api/blog/list</code> 的时候，页面会返回以下内容</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">"title"</span>:<span class="string">"标题A"</span>,</span><br><span class="line">            <span class="attr">"content"</span>:<span class="string">"内容A"</span>,</span><br><span class="line">            <span class="attr">"createTime"</span>:<span class="number">1601305438637</span>,</span><br><span class="line">            <span class="attr">"author"</span>:<span class="string">"张三"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">"title"</span>:<span class="string">"标题B"</span>,</span><br><span class="line">            <span class="attr">"content"</span>:<span class="string">"内容B"</span>,</span><br><span class="line">            <span class="attr">"createTime"</span>:<span class="number">1601305527630</span>,</span><br><span class="line">            <span class="attr">"author"</span>:<span class="string">"李四"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"errno"</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="梦结"><a class="markdownIt-Anchor" href="#梦结"></a> 【梦结】</h3><blockquote><p>来总结一下</p><p>代码是怎么运行的？</p></blockquote><ul><li><p>第一层 – www.js</p><ul><li>开启服务</li></ul></li><li><p>第二层 – app.js</p><ul><li>设置返回格式 JSON</li><li>解析 query</li><li>处理 blog 路由</li><li>处理 user 路由</li><li>未命中路由，返回 404</li></ul></li><li><p>第三层 – router/blog.js</p><ul><li>路由文件</li></ul></li><li><p>第四层 – controller/blog.js</p><ul><li>最关心数据的一层</li><li>用来存放数据</li></ul></li></ul><h2 id="处理-post-请求"><a class="markdownIt-Anchor" href="#处理-post-请求"></a> 处理 POST 请求</h2><blockquote><p>在 <code>app.js</code> 文件中处理post data</p></blockquote><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于处理 post data</span></span><br><span class="line"><span class="keyword">const</span> getPostData = <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, rejects</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果当前的请求方法不是 POST,则返回空</span></span><br><span class="line">    <span class="keyword">if</span> (req.method !== <span class="string">"POST"</span>) &#123;</span><br><span class="line">      resolve(&#123;&#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果当前的请求头的 content-type 不为 application/json,则返回空</span></span><br><span class="line">    <span class="keyword">if</span> (req.headers[<span class="string">"content-type"</span>] !== <span class="string">"application/json"</span>) &#123;</span><br><span class="line">      resolve(&#123;&#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> postData = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 接收前端请求的数据</span></span><br><span class="line">    req.on(<span class="string">"data"</span>, (chunk) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 将传进来的数据转换为字符串</span></span><br><span class="line">      postData += chunk.toString();</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="comment">// 如果 postData 为空，则返回空</span></span><br><span class="line">      <span class="keyword">if</span> (!postData) &#123;</span><br><span class="line">        resolve(&#123;&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果 postData 存在，则返回这个JSON格式的对象</span></span><br><span class="line">      resolve(<span class="built_in">JSON</span>.parse(postData));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>然后需要使用这个 <code>getPostData</code> 函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理 post data</span></span><br><span class="line">getPostData(req).then(<span class="function">(<span class="params">postData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 把 postData 的数据放到 req.body 中</span></span><br><span class="line">    req.body = postData;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>然后需要处理各种路由，就需要把处理路由的全部代码放到处理 post data 之中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理 post data</span></span><br><span class="line">getPostData(req).then(<span class="function">(<span class="params">postData</span>) =&gt;</span> &#123;</span><br><span class="line">    req.body = postData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 blog 路由</span></span><br><span class="line">    <span class="keyword">const</span> blogData = handleBlogRouter(req, res);</span><br><span class="line">    <span class="keyword">if</span> (blogData) &#123;</span><br><span class="line">        <span class="comment">// 把 JSON 类型的数据先转换为字符串，再响应给前端</span></span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(blogData));</span><br><span class="line">        <span class="comment">// 最后需要返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 user 路由</span></span><br><span class="line">    <span class="keyword">const</span> userData = handleUserRouter(req, res);</span><br><span class="line">    <span class="keyword">if</span> (userData) &#123;</span><br><span class="line">        <span class="comment">// 把 JSON 类型的数据先转换为字符串，再响应给前端</span></span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(userData));</span><br><span class="line">        <span class="comment">// 最后需要返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未命中路由，返回 404</span></span><br><span class="line">    res.writeHead(<span class="number">404</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">    res.write(<span class="string">"404 Not Found\n"</span>);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>然后在 <code>controller/blog.js</code> 中写新建博客需要返回的数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newBlog = <span class="function">(<span class="params">blogData = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// blogData = &#123;&#125;  如果blogData没有值的话，默认为空</span></span><br><span class="line">  <span class="comment">// blogData 是一个博客对象，包含 title content 属性</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"newBlog blogData..."</span>, blogData);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    id: <span class="number">3</span>, <span class="comment">// 表示新建博客，插入到数据表里面的 id</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>记得把 newBlog 导出去</p></blockquote><blockquote><p>然后就可以在 <code>router/blog.js</code> 文件中返回数据给前端</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一篇博客</span></span><br><span class="line"><span class="keyword">if</span> (req.method == <span class="string">"POST"</span> &amp;&amp; req.path == <span class="string">"/api/blog/new"</span>) &#123;</span><br><span class="line">    <span class="comment">// 通过 app.js 文件中定义的 req.body 来获取到前端请求的数据</span></span><br><span class="line">    <span class="keyword">const</span> data = newBlog(req.body);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后可以通过 postman 发送 <code>http://127.0.0.1:3000/api/blog/new</code> 这个，选择 POST请求，然后在 Body 里面的 raw 中随便发送一个JSON格式的数据，类型格式选择 <code>JSON(application/json)</code></p></blockquote><p>返回结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"errno"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台输出的 <code>blogData</code> 的结果为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newBlog blogData... &#123; <span class="attr">title</span>: <span class="string">'测试标题123'</span>, <span class="attr">content</span>: <span class="string">'测试内容123'</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明成功</p></blockquote><blockquote><p>新增删除博客路由，同理</p></blockquote><blockquote><p>先 <code>controller/blog.js</code> 文件中设置一个删除路由需要返回的数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> delBlog = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// id 就是要删除博客的 id</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>记得把 delBlog 导出去</p></blockquote><blockquote><p>然后由 <code>router.blog.js</code> 文件在路由中返回数据给 <code>app.js</code> ，进行数据处理，然后再返回给前端</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除一篇博客</span></span><br><span class="line"><span class="keyword">if</span> (req.method == <span class="string">"POST"</span> &amp;&amp; req.path == <span class="string">"/api/blog/del"</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = delBlog(id);</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorModel(<span class="string">"删除博客失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>postman 请求 <code>http://127.0.0.1:3000/api/blog/del?id=1</code> 的结果如下：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"errno"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>新增登录接口</p></blockquote><blockquote><p>在 <code>controller/user.js</code> 文件中添加如下代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loginCheck = <span class="function">(<span class="params">username, passsword</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (username == <span class="string">"zhangsan"</span> &amp;&amp; passsword == <span class="string">"123"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  loginCheck,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><code>router/user.js</code> 文件内容如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入数据文件</span></span><br><span class="line"><span class="keyword">const</span> &#123; loginCheck &#125; = <span class="built_in">require</span>(<span class="string">"../controller/user"</span>);</span><br><span class="line"><span class="comment">// 导入数据模型</span></span><br><span class="line"><span class="keyword">const</span> &#123; SuccessModel, ErrorModel &#125; = <span class="built_in">require</span>(<span class="string">"../model/resModel"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 登录</span></span><br><span class="line">  <span class="keyword">if</span> (req.method == <span class="string">"POST"</span> &amp;&amp; req.path == <span class="string">"/api/user/login"</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = req.body;</span><br><span class="line">    <span class="keyword">const</span> result = loginCheck(username, password);</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ErrorModel(<span class="string">"登录失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleUserRouter;</span><br></pre></td></tr></table></figure><blockquote><p>postman 访问 <code>http://127.0.0.1:3000/api/user/login</code> 结果如下</p></blockquote><blockquote><p>如果成功</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"errno"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果失败</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"登录失败"</span>,</span><br><span class="line">    <span class="attr">"errno"</span>: <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="node连接mysql"><a class="markdownIt-Anchor" href="#node连接mysql"></a> node连接mysql</h2><p>新建 <code>myblog</code> 数据库</p><p>在数据库中新建两个表 <code>users</code> 、 <code>blogs</code></p><blockquote><p>users表字段如下</p></blockquote><table><thead><tr><th></th><th>id</th><th>username</th><th>password</th><th>realname</th><th>state</th></tr></thead><tbody><tr><td>类型</td><td>int</td><td>varchar</td><td>varchar</td><td>varchar</td><td>int</td></tr><tr><td>长度</td><td>11</td><td>20</td><td>20</td><td>10</td><td>10</td></tr><tr><td>不是null</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>主键</td><td>yes</td><td></td><td></td><td></td><td></td></tr><tr><td>注释</td><td></td><td></td><td></td><td></td><td>状态为1说明此数据存在，0代表此数据已被删除</td></tr></tbody></table><blockquote><p>blogs表字段如下</p></blockquote><table><thead><tr><th></th><th>id</th><th>title</th><th>content</th><th>createtime</th><th>author</th><th>state</th></tr></thead><tbody><tr><td>类型</td><td>int</td><td>varchar</td><td>longtext</td><td>bigint</td><td>varchar</td><td>int</td></tr><tr><td>长度</td><td>11</td><td>50</td><td></td><td>20</td><td>20</td><td>10</td></tr><tr><td>不是null</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td><td></td></tr><tr><td>主键</td><td>yes</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>注释</td><td></td><td></td><td></td><td></td><td></td><td>状态为1说明此数据存在，0代表此数据已被删除</td></tr></tbody></table><blockquote><p>首先，在 package.json 文件中配置 scripts</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"blog-1"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"bin/www.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"cross-env NODE_ENV=dev node ./bin/www.js"</span>,</span><br><span class="line">    <span class="attr">"prd"</span>: <span class="string">"cross-env NODE_ENV=production node ./bin/www.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"cross-env"</span>: <span class="string">"^7.0.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"mysql"</span>: <span class="string">"^2.18.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此操作需要安装 cross-env，<code>npm install cross-env --save-dev</code></p></blockquote><blockquote><p>然后，在src目录下新建 conf 目录，在 conf 目录下新建 <code>db.js</code> 文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> env = process.env.NODE_ENV; <span class="comment">// 环境参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line"><span class="keyword">let</span> MYSQL_CONF;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 npm run dev 会使用下面这个配置</span></span><br><span class="line"><span class="keyword">if</span> (env === <span class="string">"dev"</span>) &#123;</span><br><span class="line">  MYSQL_CONF = &#123;</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    user: <span class="string">"root"</span>,</span><br><span class="line">    password: <span class="string">"root"</span>,</span><br><span class="line">    port: <span class="string">"3306"</span>,</span><br><span class="line">    database: <span class="string">"myblog"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 npm run production 会使用下面这个配置</span></span><br><span class="line"><span class="keyword">if</span> (env === <span class="string">"production"</span>) &#123;</span><br><span class="line">  MYSQL_CONF = &#123;</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    user: <span class="string">"root"</span>,</span><br><span class="line">    password: <span class="string">"root"</span>,</span><br><span class="line">    port: <span class="string">"3306"</span>,</span><br><span class="line">    database: <span class="string">"myblog"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 node .\bin\www.js 启动服务会使用下面这个数据库配置</span></span><br><span class="line">MYSQL_CONF = &#123;</span><br><span class="line">  host: <span class="string">"localhost"</span>,</span><br><span class="line">  user: <span class="string">"root"</span>,</span><br><span class="line">  password: <span class="string">"root"</span>,</span><br><span class="line">  port: <span class="string">"3306"</span>,</span><br><span class="line">  database: <span class="string">"myblog"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  MYSQL_CONF,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这是配置数据库的一些参数</p></blockquote><blockquote><p>然后在 src 目录下新建 db 目录，在 db 目录下新建 <code>mysql.js</code> 文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">"mysql"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; MYSQL_CONF &#125; = <span class="built_in">require</span>(<span class="string">"../conf/db"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接对象</span></span><br><span class="line"><span class="keyword">const</span> con = mysql.createConnection(MYSQL_CONF);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始连接</span></span><br><span class="line">con.connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一执行 sql 的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params">sql</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    con.query(sql, (err, result) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(result);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  exec,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>用来封装一个统一执行 sql 的函数</p></blockquote><blockquote><p>修改 <code>controller/blog.js</code> 文件中的 <code>getList</code> 函数，获取数据库中的数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入统一执行 sql 的函数的文件</span></span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">"../db/mysql"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getList = <span class="function">(<span class="params">author, keyword</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> sql = <span class="string">`select id,title,content,createtime,author from blogs where 1=1 `</span>;</span><br><span class="line">  <span class="keyword">if</span> (author) &#123;</span><br><span class="line">    sql += <span class="string">`and author='<span class="subst">$&#123;author&#125;</span>' `</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (keyword) &#123;</span><br><span class="line">    sql += <span class="string">`and title like '%<span class="subst">$&#123;keyword&#125;</span>%' `</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sql += <span class="string">`order by createtime desc;`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回 promise</span></span><br><span class="line">  <span class="keyword">return</span> exec(sql);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>会返回一个从数据库中查到的结果，不过需要通过 Promise 对象来获取</p></blockquote><blockquote><p>然后需要在 <code>router/blog.js</code> 文件中返回一个 SuccessModel 对象的结果</p><p>就需要修改对应的博客列表路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取博客列表</span></span><br><span class="line"><span class="keyword">if</span> (req.method == <span class="string">"GET"</span> &amp;&amp; req.path == <span class="string">"/api/blog/list"</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取 query 中的 anthor ,如果没有则为空字符串</span></span><br><span class="line">    <span class="keyword">const</span> author = req.query.author || <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 获取 query 中的 keyword ,如果没有则为空字符串</span></span><br><span class="line">    <span class="keyword">const</span> keyword = req.query.keyword || <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = getList(author, keyword);</span><br><span class="line">    <span class="comment">// 返回 promise</span></span><br><span class="line">    <span class="comment">// listData 为从数据库查到的对应的数据</span></span><br><span class="line">    <span class="keyword">return</span> result.then(<span class="function">(<span class="params">listData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel(listData);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回的这个结果还是Promise对象，所以继续通过 then 方法来接收这个路由返回的 SuccessModel 数据结果</p></blockquote><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理 blog 路由</span></span><br><span class="line"><span class="keyword">const</span> blogResult = handleBlogRouter(req, res);</span><br><span class="line"><span class="keyword">if</span> (blogResult) &#123;</span><br><span class="line">    <span class="comment">// blogData 为SuccessModule对象返回的结果</span></span><br><span class="line">    blogResult.then(<span class="function">(<span class="params">blogData</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log("blogData:", blogData);</span></span><br><span class="line">        <span class="comment">// 把 JSON 类型的数据先转换为字符串，再响应给前端</span></span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(blogData));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 最后需要返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后通过 <code>npm run dev</code> 命令启动服务，访问 <code>http://127.0.0.1:3000/api/blog/list?author=zhangsan&amp;keyword=A</code> 结果如下</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">"title"</span>:<span class="string">"标题A"</span>,</span><br><span class="line">            <span class="attr">"content"</span>:<span class="string">"内容A"</span>,</span><br><span class="line">            <span class="attr">"createtime"</span>:<span class="number">1601528638003</span>,</span><br><span class="line">            <span class="attr">"author"</span>:<span class="string">"zhangsan"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"errno"</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>查询到的此数据就是我数据库中的数据，到此，node 连接 mysql 成功。</p></blockquote><h3 id="cookie-登录"><a class="markdownIt-Anchor" href="#cookie-登录"></a> cookie 登录</h3><blockquote><p>需要在 <code>app.js</code> 文件中解析 cookie</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析 cookie</span></span><br><span class="line">req.cookie = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> cookieStr = req.headers.cookie || <span class="string">""</span>;</span><br><span class="line">cookieStr.split(<span class="string">";"</span>).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!item) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> arr = item.split(<span class="string">"="</span>);</span><br><span class="line">    <span class="keyword">const</span> key = arr[<span class="number">0</span>].trim();</span><br><span class="line">    <span class="keyword">const</span> val = arr[<span class="number">1</span>].trim();</span><br><span class="line">    req.cookie[key] = val;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>把 cookie 转换成一个对象格式的数据</p><p>trim() 是去除多余的空格</p></blockquote><blockquote><p>登录验证测试</p></blockquote><p>router/user.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录验证的测试</span></span><br><span class="line"><span class="keyword">if</span> (method == <span class="string">"GET"</span> &amp;&amp; req.path == <span class="string">"/api/user/login-test"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.cookie.username) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(</span><br><span class="line">            <span class="keyword">new</span> SuccessModel(&#123;</span><br><span class="line">                username: req.cookie.username,</span><br><span class="line">            &#125;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="keyword">new</span> ErrorModel(<span class="string">"尚未登录"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>登录</p></blockquote><p>controller/user.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入统一执行 sql 的函数的文件</span></span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">"../db/mysql"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> login = <span class="function">(<span class="params">username, password</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> sql = <span class="string">`select username,realname,state from users where state=1 and username='<span class="subst">$&#123;username&#125;</span>' and password='<span class="subst">$&#123;password&#125;</span>'`</span>;</span><br><span class="line">  <span class="keyword">return</span> exec(sql).then(<span class="function">(<span class="params">rows</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rows[<span class="number">0</span>] || &#123;&#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  login,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>router/user.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录</span></span><br><span class="line"><span class="keyword">if</span> (method == <span class="string">"GET"</span> &amp;&amp; req.path == <span class="string">"/api/user/login"</span>) &#123;</span><br><span class="line">    <span class="comment">// const &#123; username, password &#125; = req.body;</span></span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = req.query;</span><br><span class="line">    <span class="keyword">const</span> result = login(username, password);</span><br><span class="line">    <span class="keyword">return</span> result.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.username) &#123;</span><br><span class="line">            <span class="comment">// 操作 cookie</span></span><br><span class="line">            res.setHeader(<span class="string">"Set-Cookie"</span>, <span class="string">`username=<span class="subst">$&#123;data.username&#125;</span>; path=/;`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorModel(<span class="string">"登录失败"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>username=${data.username}; 登录的用户名</p><p>path=/; 让 cookie 在所有的路由中都生效</p></blockquote><blockquote><p>最后，别忘了在 <code>app.js</code> 文件中处理 user 路由</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理 user 路由</span></span><br><span class="line"><span class="keyword">const</span> userResult = handleUserRouter(req, res);</span><br><span class="line"><span class="keyword">if</span> (userResult) &#123;</span><br><span class="line">    userResult.then(<span class="function">(<span class="params">userData</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 把 JSON 类型的数据先转换为字符串，再响应给前端</span></span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(userData));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 最后需要返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在浏览器输入 <code>http://127.0.0.1:3000/api/user/login?username=lisi&amp;password=456</code> 即可在添加一条 cookie，<code>username=lisi</code></p></blockquote><blockquote><p>虽然现在是后端设置的 cookie，但是前端也能修改 cookie 的值，并不安全，所以需要用后端来做一些限制条件才行</p><p>在 setHeader 中加上 <code>httpOnly</code> 即可</p></blockquote><p>router/user.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 操作 cookie</span></span><br><span class="line">res.setHeader(</span><br><span class="line">    <span class="string">"Set-Cookie"</span>,</span><br><span class="line">    <span class="string">`username=<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">    data.username</span></span></span><br><span class="line"><span class="string"><span class="subst">    &#125;</span>; path=/; httpOnly;`</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>获取 cookie 的过期时间</p></blockquote><p>router/user.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 cookie 的过期时间</span></span><br><span class="line"><span class="keyword">const</span> getCookieExpires = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取当前时间（中国标准时间）</span></span><br><span class="line">  <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  d.setTime(d.getTime() + <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"d.toGMTString() is "</span>, d.toGMTString());</span><br><span class="line">  <span class="keyword">return</span> d.toGMTString();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>参数说明：</p><p>getTime() 获取当前时间戳</p><p>setTime() 用时间戳设置时间</p><p>toGMTString() 设置成 GMT 格式的时间</p></blockquote><blockquote><p>然后给 cookie 设置一个过期时间</p><p>在 setHeader 中加上 <code>expires=${getCookieExpires()};</code> 即可</p></blockquote><p>router/user.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 操作 cookie</span></span><br><span class="line">res.setHeader(</span><br><span class="line">    <span class="string">"Set-Cookie"</span>,</span><br><span class="line">    <span class="string">`username=<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">    data.username</span></span></span><br><span class="line"><span class="string"><span class="subst">    &#125;</span>; path=/; httpOnly; expires=<span class="subst">$&#123;getCookieExpires()&#125;</span>;`</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>getCookieExpires() 就是调用的那个获取 cookie 过期时间的函数</p></blockquote><h2 id="session-登录"><a class="markdownIt-Anchor" href="#session-登录"></a> session 登录</h2><blockquote><p>既然已经有了 cookie 登录了，那为什么还要使用 session 登录呢，那是因为 cookie 登录存在着许多问题，会暴露许多用户的信息，很危险</p><p>那么如何解决呢？cookie 中存储 userid，server端对应 username</p><p>解决方案就是使用 session，即 server 端存储用户信息</p></blockquote><blockquote><p>首先需要 定义一个存储 session 的数据</p></blockquote><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// session 数据</span></span><br><span class="line"><span class="keyword">const</span> SESSION_DATA = &#123;&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>然后需要解析 session</p></blockquote><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析 session</span></span><br><span class="line"><span class="keyword">let</span> needSetCookie = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> userId = req.cookie.userid;</span><br><span class="line"><span class="keyword">if</span> (userId) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!SESSION_DATA[userId]) &#123;</span><br><span class="line">        SESSION_DATA[userId] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    needSetCookie = <span class="literal">true</span>;</span><br><span class="line">    userId = <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>_<span class="subst">$&#123;<span class="built_in">Math</span>.random()&#125;</span>`</span>;</span><br><span class="line">    SESSION_DATA[userId] = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">req.session = SESSION_DATA[userId];</span><br></pre></td></tr></table></figure><blockquote><p>needSetCookie是否需要设置 cookie，当 cookie 中不存在 userid 时，则需要设置 cookie</p><p>这个 session 只是把 userid 存储在 cookie 中，并且这个 userid 是实时变化的</p></blockquote><blockquote><p>我们在 处理 blog 路由和处理 user 路由中判断 如果需要设置 cookie 怎么办</p></blockquote><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (needSetCookie) &#123;</span><br><span class="line">    <span class="comment">// 操作 cookie</span></span><br><span class="line">    res.setHeader(</span><br><span class="line">        <span class="string">"Set-Cookie"</span>,</span><br><span class="line">        <span class="string">`userid=<span class="subst">$&#123;userId&#125;</span>; path=/; httpOnly; expires=<span class="subst">$&#123;getCookieExpires()&#125;</span>;`</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中提到了需要调用 getCookieExpires()，则需要获取 cookie 的过期时间</p></blockquote><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 cookie 的过期时间</span></span><br><span class="line"><span class="keyword">const</span> getCookieExpires = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  d.setTime(d.getTime() + <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"d.toGMTString() is "</span>, d.toGMTString());</span><br><span class="line">  <span class="keyword">return</span> d.toGMTString();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>写好之后需要在 <code>router/user.js</code> 文件中设置登录，操作 session</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录</span></span><br><span class="line"><span class="keyword">if</span> (method == <span class="string">"GET"</span> &amp;&amp; req.path == <span class="string">"/api/user/login"</span>) &#123;</span><br><span class="line">    <span class="comment">// const &#123; username, password &#125; = req.body;</span></span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = req.query;</span><br><span class="line">    <span class="keyword">const</span> result = login(username, password);</span><br><span class="line">    <span class="keyword">return</span> result.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.username) &#123;</span><br><span class="line">            <span class="comment">// 操作 session</span></span><br><span class="line">            req.session.username = data.username;</span><br><span class="line">            req.session.realname = data.realname;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"req.session is "</span>, req.session);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorModel(<span class="string">"登录失败"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在浏览器中输入 <code>http://127.0.0.1:3000/api/user/login?username=zhangsan&amp;password=123</code> ，后台输出如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session is  &#123; <span class="attr">username</span>: <span class="string">'zhangsan'</span>, <span class="attr">realname</span>: <span class="string">'张三'</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>登录验证测试</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录验证的测试</span></span><br><span class="line"><span class="keyword">if</span> (method == <span class="string">"GET"</span> &amp;&amp; req.path == <span class="string">"/api/user/login-test"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.session.username) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(</span><br><span class="line">            <span class="keyword">new</span> SuccessModel(&#123;</span><br><span class="line">                session: req.session,</span><br><span class="line">            &#125;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="keyword">new</span> ErrorModel(<span class="string">"尚未登录"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在浏览器中输入 <code>http://127.0.0.1:3000/api/user/login-test</code> ，页面显示如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"data"</span>:&#123;</span><br><span class="line">        <span class="string">"session"</span>:&#123;</span><br><span class="line">            <span class="string">"username"</span>:<span class="string">"zhangsan"</span>,</span><br><span class="line">            <span class="string">"realname"</span>:<span class="string">"张三"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"errno"</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="redis-存储-session-数据"><a class="markdownIt-Anchor" href="#redis-存储-session-数据"></a> redis 存储 session 数据</h2><blockquote><p>redis 内容可以自行了解，这里只提供如何使用</p></blockquote><blockquote><p>启动 redis</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><blockquote><p>首先，在 <code>db.js</code> 文件中配置 redis</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> REDIS_CONF;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REDIS_CONF = &#123;</span><br><span class="line">    port: <span class="number">6379</span>,</span><br><span class="line">    host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>整体代码</p><p>db.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> env = process.env.NODE_ENV; <span class="comment">// 环境参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line"><span class="keyword">let</span> MYSQL_CONF;</span><br><span class="line"><span class="keyword">let</span> REDIS_CONF;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 npm run dev 会使用下面这个配置</span></span><br><span class="line"><span class="keyword">if</span> (env === <span class="string">"dev"</span>) &#123;</span><br><span class="line">  MYSQL_CONF = &#123;</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    user: <span class="string">"root"</span>,</span><br><span class="line">    password: <span class="string">"root"</span>,</span><br><span class="line">    port: <span class="string">"3306"</span>,</span><br><span class="line">    database: <span class="string">"myblog"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  REDIS_CONF = &#123;</span><br><span class="line">    port: <span class="number">6379</span>,</span><br><span class="line">    host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 npm run production 会使用下面这个配置</span></span><br><span class="line"><span class="keyword">if</span> (env === <span class="string">"production"</span>) &#123;</span><br><span class="line">  MYSQL_CONF = &#123;</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    user: <span class="string">"root"</span>,</span><br><span class="line">    password: <span class="string">"root"</span>,</span><br><span class="line">    port: <span class="string">"3306"</span>,</span><br><span class="line">    database: <span class="string">"myblog"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  REDIS_CONF = &#123;</span><br><span class="line">    port: <span class="number">6379</span>,</span><br><span class="line">    host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 node .\bin\www.js 启动服务会使用下面这个数据库配置</span></span><br><span class="line">MYSQL_CONF = &#123;</span><br><span class="line">  host: <span class="string">"localhost"</span>,</span><br><span class="line">  user: <span class="string">"root"</span>,</span><br><span class="line">  password: <span class="string">"root"</span>,</span><br><span class="line">  port: <span class="string">"3306"</span>,</span><br><span class="line">  database: <span class="string">"myblog"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">REDIS_CONF = &#123;</span><br><span class="line">  port: <span class="number">6379</span>,</span><br><span class="line">  host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  MYSQL_CONF,</span><br><span class="line">  REDIS_CONF,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>然后需要在 db 文件夹下新建 <code>redis.js</code> 文件，其中用 Promise 封装了设置 redis 的键值对的方法和通过键获取对应的值的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">"redis"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; REDIS_CONF &#125; = <span class="built_in">require</span>(<span class="string">"../conf/db"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建客户端</span></span><br><span class="line"><span class="keyword">const</span> redisClient = redis.createClient(REDIS_CONF.port, REDIS_CONF.post);</span><br><span class="line">redisClient.on(<span class="string">"error"</span>, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">key, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">"object"</span>) &#123;</span><br><span class="line">    val = <span class="built_in">JSON</span>.stringify(val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// redis.print  返回设置的状态</span></span><br><span class="line">  redisClient.set(key, val, redis.print);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    redisClient.get(key, (err, val) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (val == <span class="literal">null</span>) &#123;</span><br><span class="line">        resolve(val);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        resolve(<span class="built_in">JSON</span>.parse(val));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        resolve(val);</span><br><span class="line">      &#125;                                              </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">set</span>,</span><br><span class="line">  <span class="keyword">get</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>封装好 set 和 get 之后，就要使用 redis 来存储 session 了</p><p>则需要修改 <code>app.js</code> 文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 blog 路由文件</span></span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="built_in">require</span>(<span class="string">"./src/router/blog"</span>);</span><br><span class="line"><span class="comment">// 导入 user 路由文件</span></span><br><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="built_in">require</span>(<span class="string">"./src/router/user"</span>);</span><br><span class="line"><span class="comment">// 导入 get set 获取和设置 session</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="keyword">get</span>, <span class="keyword">set</span> &#125; = require("./src/db/redis");</span><br><span class="line">// 引入querystring</span><br><span class="line">const querystring = require("querystring");</span><br><span class="line"></span><br><span class="line">// session 数据</span><br><span class="line">// const SESSION_DATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 cookie 的过期时间</span></span><br><span class="line"><span class="keyword">const</span> getCookieExpires = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  d.setTime(d.getTime() + <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"d.toGMTString() is "</span>, d.toGMTString());</span><br><span class="line">  <span class="keyword">return</span> d.toGMTString();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于处理 post data</span></span><br><span class="line"><span class="keyword">const</span> getPostData = <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果当前的请求方法不是 POST,则返回空</span></span><br><span class="line">    <span class="keyword">if</span> (req.method !== <span class="string">"POST"</span>) &#123;</span><br><span class="line">      resolve(&#123;&#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果当前的请求头的 content-type 不为 application/json,则返回空</span></span><br><span class="line">    <span class="keyword">if</span> (req.headers[<span class="string">"content-type"</span>] !== <span class="string">"application/json"</span>) &#123;</span><br><span class="line">      resolve(&#123;&#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> postData = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 接收前端请求的数据</span></span><br><span class="line">    req.on(<span class="string">"data"</span>, (chunk) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 将传进来的数据转换为字符串</span></span><br><span class="line">      postData += chunk.toString();</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="comment">// 如果 postData 为空，则返回空</span></span><br><span class="line">      <span class="keyword">if</span> (!postData) &#123;</span><br><span class="line">        resolve(&#123;&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果 postData 存在，则返回这个JSON格式的对象</span></span><br><span class="line">      resolve(<span class="built_in">JSON</span>.parse(postData));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置返回格式 JSON</span></span><br><span class="line">  res.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取 path</span></span><br><span class="line">  <span class="keyword">const</span> url = req.url;</span><br><span class="line">  req.path = url.split(<span class="string">"?"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析 query</span></span><br><span class="line">  req.query = querystring.parse(url.split(<span class="string">"?"</span>)[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析 cookie</span></span><br><span class="line">  req.cookie = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> cookieStr = req.headers.cookie || <span class="string">""</span>;</span><br><span class="line">  cookieStr.split(<span class="string">";"</span>).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!item) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> arr = item.split(<span class="string">"="</span>);</span><br><span class="line">    <span class="keyword">const</span> key = arr[<span class="number">0</span>].trim();</span><br><span class="line">    <span class="keyword">const</span> val = arr[<span class="number">1</span>].trim();</span><br><span class="line">    req.cookie[key] = val;</span><br><span class="line">    <span class="comment">// console.log(key, val);</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析 session (使用 redis)</span></span><br><span class="line">  <span class="keyword">let</span> needSetCookie = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> userId = req.cookie.userid;</span><br><span class="line">  <span class="keyword">if</span> (!userId) &#123;</span><br><span class="line">    needSetCookie = <span class="literal">true</span>;</span><br><span class="line">    userId = <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>_<span class="subst">$&#123;<span class="built_in">Math</span>.random()&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">set</span>(userId, &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取 session</span></span><br><span class="line">  req.sessionId = userId;</span><br><span class="line">  <span class="keyword">get</span>(req.sessionId)</span><br><span class="line">    .then((sessionData) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (sessionData === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 初始化 redis 中的 session 值</span></span><br><span class="line">        <span class="keyword">set</span>(req.sessionId, &#123;&#125;);</span><br><span class="line">        <span class="comment">// 设置 session</span></span><br><span class="line">        req.session = &#123;&#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 设置 session</span></span><br><span class="line">        req.session = sessionData;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"req.session "</span>, req.session);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理 post data</span></span><br><span class="line">      <span class="keyword">return</span> getPostData(req);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">postData</span>) =&gt;</span> &#123;</span><br><span class="line">      req.body = postData;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理 blog 路由</span></span><br><span class="line">      <span class="keyword">const</span> blogResult = handleBlogRouter(req, res);</span><br><span class="line">      <span class="keyword">if</span> (blogResult) &#123;</span><br><span class="line">        <span class="comment">// blogData 为SuccessModule对象返回的结果</span></span><br><span class="line">        blogResult.then(<span class="function">(<span class="params">blogData</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (needSetCookie) &#123;</span><br><span class="line">            <span class="comment">// 操作 cookie</span></span><br><span class="line">            res.setHeader(</span><br><span class="line">              <span class="string">"Set-Cookie"</span>,</span><br><span class="line">              <span class="string">`userid=<span class="subst">$&#123;userId&#125;</span>; path=/; httpOnly; expires=<span class="subst">$&#123;getCookieExpires()&#125;</span>;`</span></span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// console.log("blogData:", blogData);</span></span><br><span class="line">          <span class="comment">// 把 JSON 类型的数据先转换为字符串，再响应给前端</span></span><br><span class="line">          res.end(<span class="built_in">JSON</span>.stringify(blogData));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 最后需要返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理 user 路由</span></span><br><span class="line">      <span class="keyword">const</span> userResult = handleUserRouter(req, res);</span><br><span class="line">      <span class="keyword">if</span> (userResult) &#123;</span><br><span class="line">        userResult.then(<span class="function">(<span class="params">userData</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (needSetCookie) &#123;</span><br><span class="line">            <span class="comment">// 操作 cookie</span></span><br><span class="line">            res.setHeader(</span><br><span class="line">              <span class="string">"Set-Cookie"</span>,</span><br><span class="line">              <span class="string">`userid=<span class="subst">$&#123;userId&#125;</span>; path=/; httpOnly; expires=<span class="subst">$&#123;getCookieExpires()&#125;</span>;`</span></span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 把 JSON 类型的数据先转换为字符串，再响应给前端</span></span><br><span class="line">          res.end(<span class="built_in">JSON</span>.stringify(userData));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 最后需要返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 未命中路由，返回 404</span></span><br><span class="line">      res.writeHead(<span class="number">404</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">      res.write(<span class="string">"404 Not Found\n"</span>);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = serverHandle;</span><br></pre></td></tr></table></figure><blockquote><p>文件修改了 获取 session 部分代码</p></blockquote><blockquote><p>然后需要在登录时把 username 和 realname 添加到 session中，然后再把 session 添加到 redis 中</p></blockquote><p>router/user.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入数据文件</span></span><br><span class="line"><span class="keyword">const</span> &#123; login &#125; = <span class="built_in">require</span>(<span class="string">"../controller/user"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="keyword">set</span> &#125; = require("../db/redis");</span><br><span class="line">// 导入数据模型</span><br><span class="line">const &#123; SuccessModel, ErrorModel &#125; = <span class="built_in">require</span>(<span class="string">"../model/resModel"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method; <span class="comment">// GET POST</span></span><br><span class="line">  <span class="comment">// 登录</span></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">"POST"</span> &amp;&amp; req.path == <span class="string">"/api/user/login"</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = req.body;</span><br><span class="line">    <span class="comment">// const &#123; username, password &#125; = req.query;</span></span><br><span class="line">    <span class="keyword">const</span> result = login(username, password);</span><br><span class="line">    <span class="keyword">return</span> result.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(data); // RowDataPacket &#123; username: 'zhangsan', realname: '张三', state: 1 &#125;</span></span><br><span class="line">      <span class="keyword">if</span> (data.username) &#123;</span><br><span class="line">        <span class="comment">// 操作 session</span></span><br><span class="line">        req.session.username = data.username;</span><br><span class="line">        req.session.realname = data.realname;</span><br><span class="line">        <span class="comment">// 同步到 redis</span></span><br><span class="line">        <span class="keyword">set</span>(req.sessionId, req.session);</span><br><span class="line"></span><br><span class="line">        console.log("req.session is ", req.session);</span><br><span class="line"></span><br><span class="line">        return new SuccessModel();</span><br><span class="line">      &#125;</span><br><span class="line">      return new ErrorModel("登录失败");</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = handleUserRouter;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码把 session 同步到了 redis 中</p></blockquote><blockquote><p>修改 <code>controller/blog.js</code> 文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入统一执行 sql 的函数的文件</span></span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">"../db/mysql"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getList = <span class="function">(<span class="params">author, keyword</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> sql = <span class="string">`select id,title,content,createtime,author,state from blogs where state=1 `</span>;</span><br><span class="line">  <span class="keyword">if</span> (author) &#123;</span><br><span class="line">    sql += <span class="string">`and author='<span class="subst">$&#123;author&#125;</span>' `</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (keyword) &#123;</span><br><span class="line">    sql += <span class="string">`and title like '%<span class="subst">$&#123;keyword&#125;</span>%' `</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sql += <span class="string">`order by createtime desc;`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回 promise</span></span><br><span class="line">  <span class="keyword">return</span> exec(sql);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDetail = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sql = <span class="string">`select id,title,content,createtime,author,state from blogs where state=1 and id='<span class="subst">$&#123;id&#125;</span>'`</span>;</span><br><span class="line">  <span class="keyword">return</span> exec(sql).then(<span class="function">(<span class="params">rows</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rows[<span class="number">0</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newBlog = <span class="function">(<span class="params">blogData = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// blogData = &#123;&#125;  如果blogData没有值的话，默认为空</span></span><br><span class="line">  <span class="comment">// blogData 是一个博客对象，包含 title content author 属性</span></span><br><span class="line">  <span class="keyword">const</span> title = blogData.title;</span><br><span class="line">  <span class="keyword">const</span> content = blogData.content;</span><br><span class="line">  <span class="keyword">const</span> author = blogData.author;</span><br><span class="line">  <span class="keyword">const</span> createTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sql = <span class="string">`</span></span><br><span class="line"><span class="string">    insert into blogs(title, content, createtime, author)</span></span><br><span class="line"><span class="string">    value ('<span class="subst">$&#123;title&#125;</span>', '<span class="subst">$&#123;content&#125;</span>', <span class="subst">$&#123;createTime&#125;</span>, '<span class="subst">$&#123;author&#125;</span>');</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> exec(sql).then(<span class="function">(<span class="params">insertData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log("insertData is ", insertData);</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      id: insertData.insertId,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateBlog = <span class="function">(<span class="params">id, blogData = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// id 就是要更新博客的 id</span></span><br><span class="line">  <span class="comment">// blogData 是一个博客对象</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> title = blogData.title;</span><br><span class="line">  <span class="keyword">const</span> content = blogData.content;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sql = <span class="string">`</span></span><br><span class="line"><span class="string">    update blogs set title='<span class="subst">$&#123;title&#125;</span>', content='<span class="subst">$&#123;content&#125;</span>' where state=1 and id=<span class="subst">$&#123;id&#125;</span></span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> exec(sql).then(<span class="function">(<span class="params">updateData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log("updateData is ", updateData);</span></span><br><span class="line">    <span class="keyword">if</span> (updateData.affectedRows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> delBlog = <span class="function">(<span class="params">id, author</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// id 就是要删除博客的 id</span></span><br><span class="line">  <span class="keyword">const</span> sql = <span class="string">`</span></span><br><span class="line"><span class="string">    update blogs set state=0 where state=1 and id=<span class="subst">$&#123;id&#125;</span> and author='<span class="subst">$&#123;author&#125;</span>'</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> exec(sql).then(<span class="function">(<span class="params">delData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log("delData is ", delData);</span></span><br><span class="line">    <span class="keyword">if</span> (delData.affectedRows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getList,</span><br><span class="line">  getDetail,</span><br><span class="line">  newBlog,</span><br><span class="line">  updateBlog,</span><br><span class="line">  delBlog,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>来查询 mysql 中的真实数据来动态加载数据</p></blockquote><blockquote><p>再修改 <code>router/blog.js</code> 文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 getList 数据文件</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  getList,</span><br><span class="line">  getDetail,</span><br><span class="line">  newBlog,</span><br><span class="line">  updateBlog,</span><br><span class="line">  delBlog,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">"../controller/blog"</span>);</span><br><span class="line"><span class="comment">// 导入数据模型</span></span><br><span class="line"><span class="keyword">const</span> &#123; SuccessModel, ErrorModel &#125; = <span class="built_in">require</span>(<span class="string">"../model/resModel"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一的登录验证函数(登录拦截)</span></span><br><span class="line"><span class="keyword">const</span> loginCheck = <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.session.username) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="keyword">new</span> ErrorModel(<span class="string">"尚未登录"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method;</span><br><span class="line">  <span class="keyword">const</span> id = req.body.id;</span><br><span class="line">  <span class="keyword">const</span> loginCheckResult = loginCheck(req);</span><br><span class="line">  <span class="comment">// 获取博客列表</span></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">"GET"</span> &amp;&amp; req.path == <span class="string">"/api/blog/list"</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取 query 中的 anthor ,如果没有则为空字符串</span></span><br><span class="line">    <span class="keyword">const</span> author = req.query.author || <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 获取 query 中的 keyword ,如果没有则为空字符串</span></span><br><span class="line">    <span class="keyword">const</span> keyword = req.query.keyword || <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = getList(author, keyword);</span><br><span class="line">    <span class="comment">// 返回 promise</span></span><br><span class="line">    <span class="comment">// listData 为从数据库查到的对应的数据</span></span><br><span class="line">    <span class="keyword">return</span> result.then(<span class="function">(<span class="params">listData</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel(listData);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取博客详情</span></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">"GET"</span> &amp;&amp; req.path == <span class="string">"/api/blog/detail"</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取 query 中的 id ,如果没有则为空字符串</span></span><br><span class="line">    <span class="keyword">const</span> id = req.query.id || <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// console.log(id);</span></span><br><span class="line">    <span class="keyword">const</span> result = getDetail(id);</span><br><span class="line">    <span class="comment">// 返回一个 SuccessModel 对象</span></span><br><span class="line">    <span class="keyword">return</span> result.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新建一篇博客</span></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">"POST"</span> &amp;&amp; req.path == <span class="string">"/api/blog/new"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (loginCheckResult) &#123;</span><br><span class="line">      <span class="comment">// 未登录</span></span><br><span class="line">      <span class="keyword">return</span> loginCheck;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.body.author = req.session.username;</span><br><span class="line">    <span class="comment">// 通过 app.js 文件中定义的 req.body 来获取到前端请求的数据</span></span><br><span class="line">    <span class="keyword">const</span> result = newBlog(req.body);</span><br><span class="line">    <span class="keyword">return</span> result.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新一篇博客</span></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">"POST"</span> &amp;&amp; req.path == <span class="string">"/api/blog/update"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (loginCheckResult) &#123;</span><br><span class="line">      <span class="comment">// 未登录</span></span><br><span class="line">      <span class="keyword">return</span> loginCheck;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = updateBlog(id, req.body);</span><br><span class="line">    <span class="keyword">return</span> result.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorModel(<span class="string">"更新博客失败"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除一篇博客</span></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">"POST"</span> &amp;&amp; req.path == <span class="string">"/api/blog/del"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (loginCheckResult) &#123;</span><br><span class="line">      <span class="comment">// 未登录</span></span><br><span class="line">      <span class="keyword">return</span> loginCheck;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> author = req.session.username;</span><br><span class="line">    <span class="keyword">const</span> result = delBlog(id, author);</span><br><span class="line">    <span class="keyword">return</span> result.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorModel(<span class="string">"删除博客失败"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleBlogRouter;</span><br></pre></td></tr></table></figure><blockquote><p>使用 promise 来返回成功或失败的数据</p></blockquote><blockquote><p>使用 postman 访问 post <code>http://127.0.0.1:3000/api/user/login</code> 输入用户名和密码，结果返回errno:0，说明成功</p><p>后端可以看到由 <code>app.js</code> 文件输出的结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session  &#123; <span class="attr">username</span>: <span class="string">'zhangsan'</span>, <span class="attr">realname</span>: <span class="string">'张三'</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明已经把 username 和 realname 存到了 session 中，并且把 session 存到了 redis 中了</p></blockquote><h2 id="前端联调"><a class="markdownIt-Anchor" href="#前端联调"></a> 前端联调</h2><blockquote><p>前端文件需要安装 <code>npm i http-server -g</code> 来全局安装http启动服务，然后输入命令 <code>http-server -p 8001</code> 来启动 8001 端口</p><p><a href="https://github.com/extheor/WebCase/tree/master/html-test" target="_blank" rel="noopener">前端文件获取入口</a></p></blockquote><blockquote><p>需要配置 <a href="http://nginx.org/" target="_blank" rel="noopener">nginx</a></p></blockquote><blockquote><p>我的是配置 <code>D:\Nginx\nginx-1.19.2\conf\nginx.conf</code> 文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line"></span><br><span class="line"># CPU开启双核</span><br><span class="line">worker_processes  2;</span><br><span class="line"></span><br><span class="line">#error_log  logs&#x2F;error.log;</span><br><span class="line">#error_log  logs&#x2F;error.log  notice;</span><br><span class="line">#error_log  logs&#x2F;error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include       server&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">        #location &#x2F; &#123;</span><br><span class="line">        #    root   html;</span><br><span class="line">        #    index  index.html index.htm;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line"># 访问前端页面时 nginx 会代理 8001 端口</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">proxy_pass http:&#x2F;&#x2F;localhost:8001;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 访问后端路由时 nginx 会代理 8000 端口</span><br><span class="line">location &#x2F;api&#x2F; &#123;</span><br><span class="line">proxy_pass http:&#x2F;&#x2F;localhost:8000;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  &#x2F;scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#39;s document root</span><br><span class="line">        # concurs with nginx&#39;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ &#x2F;\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>也可以看图理解</p></blockquote><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Nodejs博客图片/nginx配置.png"><blockquote><p>这时 nginx 已经代理的两端的服务，把前后端的服务全部开启，然后</p><p>浏览器输入 <code>http://127.0.0.1:8080/index.html</code> 即可，首页效果如下</p></blockquote><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/Nodejs博客图片/博客首页test.png"><blockquote><p>查看文章只能查看自己的，而不能查看别人的，所以需要加个判断</p></blockquote><p>router/blog.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取博客列表</span></span><br><span class="line"><span class="keyword">if</span> (method == <span class="string">"GET"</span> &amp;&amp; req.path == <span class="string">"/api/blog/list"</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取 query 中的 anthor ,如果没有则为空字符串</span></span><br><span class="line">    <span class="keyword">let</span> author = req.query.author || <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 获取 query 中的 keyword ,如果没有则为空字符串</span></span><br><span class="line">    <span class="keyword">const</span> keyword = req.query.keyword || <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req.query.isadmin) &#123;</span><br><span class="line">        <span class="comment">// 管理员界面</span></span><br><span class="line">        <span class="keyword">if</span> (loginCheckResult) &#123;</span><br><span class="line">            <span class="comment">// 未登录</span></span><br><span class="line">            <span class="keyword">return</span> loginCheckResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 强制查询自己的博客</span></span><br><span class="line">        author = req.session.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = getList(author, keyword);</span><br><span class="line">    <span class="comment">// 返回 promise</span></span><br><span class="line">    <span class="comment">// listData 为从数据库查到的对应的数据</span></span><br><span class="line">    <span class="keyword">return</span> result.then(<span class="function">(<span class="params">listData</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel(listData);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样就可以只查看当前登录用户的博客了，如果没有登录则就是查看全部博客</p></blockquote><h2 id="添加日志"><a class="markdownIt-Anchor" href="#添加日志"></a> 添加日志</h2><blockquote><p>首先在 blog-1 目录下新建 <code>logs</code> 目录，然后在这个文件夹中新建三个空日志文件</p><p>在 src 目录下新建 <code>utils</code> 目录，在这个目录下在新建 <code>log.js</code> 文件</p></blockquote><p>log.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写日志</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeLog</span>(<span class="params">writeStream, log</span>) </span>&#123;</span><br><span class="line">  writeStream.write(log + <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 write stream</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWriteStream</span>(<span class="params">fileName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fullFileName = path.join(__dirname, <span class="string">"../"</span>, <span class="string">"../"</span>, <span class="string">"logs"</span>, fileName);</span><br><span class="line">  <span class="keyword">const</span> writeStream = fs.createWriteStream(fullFileName, &#123;</span><br><span class="line">    flags: <span class="string">"a"</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> writeStream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写访问日志</span></span><br><span class="line"><span class="keyword">const</span> accessWriteStream = createWriteStream(<span class="string">"access.log"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">access</span>(<span class="params">log</span>) </span>&#123;</span><br><span class="line">  writeLog(accessWriteStream, log);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  access,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这个就是通过文件流来写日志存储到文件中</p></blockquote><blockquote><p>在 <code>app.js</code> 文件中引入处理日志的文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入处理日志的文件</span></span><br><span class="line"><span class="keyword">const</span> &#123; access &#125; = <span class="built_in">require</span>(<span class="string">"./src/utils/log"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>然后再在 <code>serverHandle</code> 函数中记录 access log</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录 access log</span></span><br><span class="line">access(</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;req.method&#125;</span> -- <span class="subst">$&#123;req.url&#125;</span> -- <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">    req.headers[<span class="string">"user-agent"</span>]</span></span></span><br><span class="line"><span class="string"><span class="subst">    &#125;</span> -- <span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>日志存储结果如下：</p></blockquote><p>access.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET -- &#x2F;api&#x2F;blog&#x2F;list -- Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.121 Safari&#x2F;537.36 Edg&#x2F;85.0.564.68 -- 1602127808640</span><br><span class="line">GET -- &#x2F;api&#x2F;blog&#x2F;detail?id&#x3D;3 -- Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.121 Safari&#x2F;537.36 Edg&#x2F;85.0.564.68 -- 1602127827129</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Nodejs博客系统
    
    </summary>
    
    
      <category term="Nodejs博客实战" scheme="https://extheor.club/categories/Nodejs%E5%8D%9A%E5%AE%A2%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="Nodejs博客实战" scheme="https://extheor.club/tags/Nodejs%E5%8D%9A%E5%AE%A2%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>拗音</title>
    <link href="https://extheor.club/posts/95fc9e6e/index.html"/>
    <id>https://extheor.club/posts/95fc9e6e/index.html</id>
    <published>2020-10-07T14:27:41.000Z</published>
    <updated>2020-10-07T14:29:14.530Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="拗音"><a class="markdownIt-Anchor" href="#拗音"></a> 拗音</h1><p>拗音是模仿<strong>中国古代汉语的发音</strong>而产生的。</p><p><strong>い段（「い · ぢ」除外）＋や · ゆ · よ（小一号）</strong></p><p>い段假名 --&gt; き · し · ち · に · ひ · み · り</p><p>​  ぎ · じ · び · ぴ</p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/拗音.png"><h2 id="拗音例词"><a class="markdownIt-Anchor" href="#拗音例词"></a> 拗音例词</h2><ul><li>おちゃ（お茶）⓪【茶】</li><li>ジャズ①【爵士乐】</li><li>しゅくしゃ（宿舎）②【宿舍】</li><li>しょくぶつ（植物）②【植物】</li></ul><h2 id="合拗音"><a class="markdownIt-Anchor" href="#合拗音"></a> 合拗音</h2><p>合拗音是明治维新以后为了模仿西方外来语的发音而产生的。专门用于表记<strong>外来语</strong>。只有片假名，无平假名。</p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/合拗音.png"><h2 id="合拗音例词"><a class="markdownIt-Anchor" href="#合拗音例词"></a> 合拗音例词</h2><ul><li>フィルム（film）①【胶卷】</li><li>ピロジェクト（project）②③【企画，项目】</li><li>チェス（chess）①【国际象棋】</li><li>サファイア（sapphire）②【蓝宝石】</li><li>おじゃまします（お邪魔します）【打扰了】</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="日语" scheme="https://extheor.club/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="日语" scheme="https://extheor.club/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>五十音图</title>
    <link href="https://extheor.club/posts/af43816b/index.html"/>
    <id>https://extheor.club/posts/af43816b/index.html</id>
    <published>2020-10-07T12:01:35.000Z</published>
    <updated>2020-10-07T14:29:14.517Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="五十音图"><a class="markdownIt-Anchor" href="#五十音图"></a> 五十音图</h1><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/五十音图.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="日语" scheme="https://extheor.club/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="日语" scheme="https://extheor.club/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>浊音半浊音</title>
    <link href="https://extheor.club/posts/3914bfed/index.html"/>
    <id>https://extheor.club/posts/3914bfed/index.html</id>
    <published>2020-10-06T15:07:25.000Z</published>
    <updated>2020-10-06T15:08:39.473Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="浊音半浊音"><a class="markdownIt-Anchor" href="#浊音半浊音"></a> 浊音半浊音</h1><h2 id="か行和が行"><a class="markdownIt-Anchor" href="#か行和が行"></a> か行和が行</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/か行和が行.png"><h2 id="が行例词"><a class="markdownIt-Anchor" href="#が行例词"></a> が行例词</h2><ul><li>かぎ（鍵）②【钥匙】</li><li>かいがい（海外）①【海外】</li><li>およぐ（泳ぐ）②【游泳】</li><li>かげ（影）①【影子】</li><li>いちご（苺）⓪【草莓】</li><li>かいぎ（会議）①③【会议】</li></ul><h2 id="か行清浊音对比练习"><a class="markdownIt-Anchor" href="#か行清浊音对比练习"></a> か行清浊音对比练习</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/か行清浊音对比练习.png"><h2 id="浊音和鼻浊音"><a class="markdownIt-Anchor" href="#浊音和鼻浊音"></a> 浊音和鼻浊音</h2><p>「が」行根据位置的不同发音有两种。</p><ul><li>词头 --&gt; 浊音<ul><li>ぐあい（具合）⓪【情形】</li><li>ごい語彙①【词汇】</li></ul></li><li>词中或词尾 --&gt; 浊音或鼻浊音均可<ul><li>かがく（科学）①【科学】</li><li>かげ（影）①【影子】</li></ul></li></ul><h2 id="ざ行例词"><a class="markdownIt-Anchor" href="#ざ行例词"></a> ざ行例词</h2><ul><li>かぞく（家族）①【家人】</li><li>みずうみ（湖）③【湖泊】</li><li>ちず（地図）①【地图】</li><li>ふくざつ（複雑）⓪【复杂】</li><li>じこ（事故）①【事故】</li><li>かぜ（風邪）⓪【感冒】</li></ul><h2 id="さ行清浊音对比练习"><a class="markdownIt-Anchor" href="#さ行清浊音对比练习"></a> さ行清浊音对比练习</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/さ行清浊音对比练习.png"><h2 id="た行和だ行"><a class="markdownIt-Anchor" href="#た行和だ行"></a> た行和だ行</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/た行和だ行.png"><h2 id="だ行清浊音对比练习"><a class="markdownIt-Anchor" href="#だ行清浊音对比练习"></a> だ行清浊音对比练习</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/だ行清浊音对比练习.png"><h2 id="だ行例词"><a class="markdownIt-Anchor" href="#だ行例词"></a> だ行例词</h2><ul><li>だもの（果物）②【水果】</li><li>ちぢむ（縮む）⓪【缩小】</li><li>ドア（door）①【门】</li><li>でぐち（出口）①【出口】</li></ul><h2 id="发音相同的两组浊音"><a class="markdownIt-Anchor" href="#发音相同的两组浊音"></a> 发音相同的两组浊音</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/发音相同的两组浊音.png"><h2 id="は行-ば行-ぱ行"><a class="markdownIt-Anchor" href="#は行-ば行-ぱ行"></a> は行 · ば行 · ぱ行</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/は行ば行ぱ行.png"><h2 id="ば行-ぱ行例词"><a class="markdownIt-Anchor" href="#ば行-ぱ行例词"></a> ば行 · ぱ行例词</h2><ul><li>バイク（bike）①【摩托车】</li><li>ながれぼし（流れ星）③【流星】</li><li>ピアス（pierced earrings）①【耳钉，耳坠】</li><li>ピアノ（piano）⓪【钢琴】</li></ul><h2 id="は行清浊音对比练习"><a class="markdownIt-Anchor" href="#は行清浊音对比练习"></a> は行清浊音对比练习</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/は行清浊音对比练习.png"><h2 id="寒暄语"><a class="markdownIt-Anchor" href="#寒暄语"></a> 寒暄语</h2><ul><li>いただきます【我开动了】</li><li>お　かえ（帰）りなさい【欢迎回来】</li><li>ただいま【我回来了】</li><li>おひさしぶりだす【好久不见】</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="日语" scheme="https://extheor.club/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="日语" scheme="https://extheor.club/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>五十音图わ行，复习</title>
    <link href="https://extheor.club/posts/9f97db8f/index.html"/>
    <id>https://extheor.club/posts/9f97db8f/index.html</id>
    <published>2020-10-05T16:21:20.000Z</published>
    <updated>2020-10-05T16:26:34.611Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="五十音图わ行复习"><a class="markdownIt-Anchor" href="#五十音图わ行复习"></a> 五十音图わ行，复习</h1><h2 id="わ"><a class="markdownIt-Anchor" href="#わ"></a> わ</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/わ.png"><h2 id="を"><a class="markdownIt-Anchor" href="#を"></a> を</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/を.png"><h2 id="わ行例词"><a class="markdownIt-Anchor" href="#わ行例词"></a> わ行例词</h2><ul><li>にわ（庭）⓪【院子】</li><li>わらう（笑う）⓪【笑】</li></ul><h2 id="寒暄语"><a class="markdownIt-Anchor" href="#寒暄语"></a> 寒暄语</h2><ul><li>お休みなさい【晚安】</li><li>また明日【明天见】</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="日语" scheme="https://extheor.club/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="日语" scheme="https://extheor.club/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>五十音图やら行</title>
    <link href="https://extheor.club/posts/6bbf03f0/index.html"/>
    <id>https://extheor.club/posts/6bbf03f0/index.html</id>
    <published>2020-10-02T14:39:25.000Z</published>
    <updated>2020-10-02T14:41:36.109Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="五十音图やら行"><a class="markdownIt-Anchor" href="#五十音图やら行"></a> 五十音图やら行</h1><h2 id="や"><a class="markdownIt-Anchor" href="#や"></a> や</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/や.png"><h2 id="い"><a class="markdownIt-Anchor" href="#い"></a> い</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/い.png"><h2 id="ゆ"><a class="markdownIt-Anchor" href="#ゆ"></a> ゆ</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/ゆ.png"><h2 id="え"><a class="markdownIt-Anchor" href="#え"></a> え</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/え.png"><h2 id="よ"><a class="markdownIt-Anchor" href="#よ"></a> よ</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/よ.png"><h2 id="や行例词"><a class="markdownIt-Anchor" href="#や行例词"></a> や行例词</h2><ul><li>やおや（八百屋）⓪【果蔬店】</li><li>おかゆ（お粥）⓪【粥】</li><li>よなか（夜中）⓪【半夜】</li><li>やすみ（休み）③【休息】</li></ul><h2 id="ら"><a class="markdownIt-Anchor" href="#ら"></a> ら</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/ら.png"><h2 id="り"><a class="markdownIt-Anchor" href="#り"></a> り</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/り.png"><h2 id="る"><a class="markdownIt-Anchor" href="#る"></a> る</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/る.png"><h2 id="れ"><a class="markdownIt-Anchor" href="#れ"></a> れ</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/れ.png"><h2 id="ろ"><a class="markdownIt-Anchor" href="#ろ"></a> ろ</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/日语图片/ろ.png"><h2 id="ら行发音练习"><a class="markdownIt-Anchor" href="#ら行发音练习"></a> ら行发音练习</h2><p>られりりれら</p><p>らろるるろら</p><p>られりるれろらろ</p><p>らりるれろ</p><h2 id="ら行例词"><a class="markdownIt-Anchor" href="#ら行例词"></a> ら行例词</h2><ul><li>さくら（桜）⓪【樱花】</li><li>くすり（薬）⓪【药】</li><li>ホテル（hotel）①【宾馆】</li><li>かれし（彼氏）①【男朋友】</li><li>はしる（走る）②【奔跑】</li><li>ロシア（Russia）①【俄罗斯】</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="日语" scheme="https://extheor.club/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="日语" scheme="https://extheor.club/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Promise的使用方法</title>
    <link href="https://extheor.club/posts/9eadcdf6/index.html"/>
    <id>https://extheor.club/posts/9eadcdf6/index.html</id>
    <published>2020-09-30T15:35:40.000Z</published>
    <updated>2020-09-30T15:37:26.235Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="promise的使用方法"><a class="markdownIt-Anchor" href="#promise的使用方法"></a> Promise的使用方法</h1><h2 id="不用promise的方法"><a class="markdownIt-Anchor" href="#不用promise的方法"></a> 不用Promise的方法</h2><blockquote><p>会出现回调地狱</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;fileName&#125;</span> </span>文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;callback&#125;</span> </span>回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileContent</span>(<span class="params">fileName, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 绝对路径</span></span><br><span class="line">  <span class="keyword">const</span> fullFileName = path.resolve(__dirname, <span class="string">"files"</span>, fileName);</span><br><span class="line">  fs.readFile(fullFileName, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log("data:", data); // data: &lt;Buffer 7b 0d 0a 20 20 22 6e 65 78 74 22 3a 20 22 62 2e 6a 73 6f 6e 22 2c 0d 0a 20 20 22 6d 73 67 22 3a 20 22 74 68 69 73 20 69 73 20 61 22 0d 0a 7d 0d 0a&gt;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * data 传过来的是二进制格式,如上结果</span></span><br><span class="line"><span class="comment">     * 需要通过 toString() 方法把data转成字符串</span></span><br><span class="line"><span class="comment">     * 然后通过 JSON.parse() 方法把这个字符串解析为对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    callback(<span class="built_in">JSON</span>.parse(data.toString()));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 getFileContent 函数</span></span><br><span class="line"><span class="comment">// 测试 callback-hell</span></span><br><span class="line">getFileContent(<span class="string">"a.json"</span>, (aData) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a data"</span>, aData);</span><br><span class="line">  getFileContent(aData.next, (bData) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b data"</span>, bData);</span><br><span class="line">    getFileContent(bData.next, (cData) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"c data"</span>, cData);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>实现了先执行a.json文件后才能执行b.json文件，执行了b.json文件后才能执行c.json文件，但是存在回调地狱</p></blockquote><h2 id="使用promise的方法"><a class="markdownIt-Anchor" href="#使用promise的方法"></a> 使用Promise的方法</h2><blockquote><p>解决了回调地狱的问题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用promise</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileContent</span>(<span class="params">fileName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * resolve  成功后触发 resolve</span></span><br><span class="line"><span class="comment">   * rejects  失败后触发 rejects</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, rejects</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 绝对路径</span></span><br><span class="line">    <span class="keyword">const</span> fullFileName = path.resolve(__dirname, <span class="string">"files"</span>, fileName);</span><br><span class="line">    fs.readFile(fullFileName, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        rejects(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// console.log("data:", data); // data: &lt;Buffer 7b 0d 0a 20 20 22 6e 65 78 74 22 3a 20 22 62 2e 6a 73 6f 6e 22 2c 0d 0a 20 20 22 6d 73 67 22 3a 20 22 74 68 69 73 20 69 73 20 61 22 0d 0a 7d 0d 0a&gt;</span></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * data 传过来的是二进制格式,如上结果</span></span><br><span class="line"><span class="comment">       * 需要通过 toString() 方法把data转成字符串</span></span><br><span class="line"><span class="comment">       * 然后通过 JSON.parse() 方法把这个字符串解析为对象</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      resolve(<span class="built_in">JSON</span>.parse(data.toString()));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 把这个promise返回出去</span></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getFileContent(<span class="string">"a.json"</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">aData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a data"</span>, aData);</span><br><span class="line">    <span class="keyword">return</span> getFileContent(aData.next);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">bData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b data"</span>, bData);</span><br><span class="line">    <span class="keyword">return</span> getFileContent(bData.next);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">cData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(cData);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>首先new一个 <code>Promise</code> 对象，然后记得把创建的这个对象返回</p><p>然后 <code>getFileContent(&quot;a.json&quot;)</code> 返回一个 <code>Promise { &lt;pending&gt; }</code> 对象，这个对象中有 <code>then</code> 方法和 <code>catch</code> 方法，当文件读取成功后触发 <code>then</code> 方法，当文件读取失败后触发 <code>catch</code> 方法</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="promise" scheme="https://extheor.club/categories/promise/"/>
    
    
      <category term="promise" scheme="https://extheor.club/tags/promise/"/>
    
  </entry>
  
</feed>
