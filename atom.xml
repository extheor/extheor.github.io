<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码小余の博客</title>
  <icon>https://www.gravatar.com/avatar/7ff8334eb3ce169d5ef407706436ee76</icon>
  <subtitle>每天进步一点点！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://extheor.club/"/>
  <updated>2020-11-16T11:17:35.388Z</updated>
  <id>https://extheor.club/</id>
  
  <author>
    <name>Continue.Run</name>
    <email>2044580857@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第六章：react-router4</title>
    <link href="https://extheor.club/posts/af4880c3/index.html"/>
    <id>https://extheor.club/posts/af4880c3/index.html</id>
    <published>2020-11-16T11:13:50.501Z</published>
    <updated>2020-11-16T11:17:35.388Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="第六章react-router4"><a class="markdownIt-Anchor" href="#第六章react-router4"></a> 第六章：react-router4</h1><h2 id="61-相关理解"><a class="markdownIt-Anchor" href="#61-相关理解"></a> 6.1.  相关理解</h2><h3 id="611-react-router-的理解"><a class="markdownIt-Anchor" href="#611-react-router-的理解"></a> 6.1.1. react-router  的理解</h3><ol><li><p>react 的一个插件库</p></li><li><p>专门用来实现一个 SPA 应用</p></li><li><p>基于 react 的项目基本都会用到此库</p></li></ol><h3 id="612-spa-的理解"><a class="markdownIt-Anchor" href="#612-spa-的理解"></a> 6.1.2. SPA  的理解</h3><ol><li><p>单页 Web 应用（single page web application，SPA）</p></li><li><p>整个应用只有一个完整的页面</p></li><li><p>点击页面中的链接不会刷新页面, 本身也不会向服务器发请求</p></li><li><p>当点击路由链接时, 只会做页面的局部更新</p></li><li><p>数据都需要通过 ajax 请求获取, 并在前端异步展现</p></li></ol><h3 id="613-路由的理解"><a class="markdownIt-Anchor" href="#613-路由的理解"></a> 6.1.3.  路由的理解</h3><ol><li>什么是路由?</li></ol><p>a. 一个路由就是一个映射关系(key:value)</p><p>b. key 为路由路径, value 可能是 function/component</p><ol start="2"><li>路由分类</li></ol><p>a. 后台路由: node 服务器端路由, value 是 function, 用来处理客户端提交的请求并返回一个响应数据</p><p>b. 前台路由: 浏览器端路由, value 是 component, 当请求的是路由 path 时, 浏览器端前没有发送 http 请求, 但界面会更新显示对应的组件</p><ol start="3"><li>后台路由</li></ol><p>a. 注册路由: <code>router.get(path, function(req, res))</code></p><p>b. 当 node 接收到一个请求时, 根据请求路径找到匹配的路由, 调用路由中的函数来<br>处理请求, 返回响应数据</p><ol start="4"><li>前端路由</li></ol><p>a. 注册路由: <code>&lt;Route path="/about" component={About}&gt;</code></p><p>b. 当浏览器的 hash 变为#about 时, 当前路由组件就会变为 About 组件</p><h3 id="614-前端路由的实现"><a class="markdownIt-Anchor" href="#614-前端路由的实现"></a> 6.1.4.  前端路由的实现</h3><ol><li>history 库</li></ol><p>a. 网址: <a href="https://github.com/ReactTraining/history" target="_blank" rel="noopener">https://github.com/ReactTraining/history</a></p><p>b. 管理浏览器会话历史(history)的工具库</p><p>c. 包装的是原生 BOM 中 window.history 和 window.location.hash</p><ol start="2"><li>history API</li></ol><p>a. History.createBrowserHistory(): 得到封装 window.history 的管理对象</p><p>b. History.createHashHistory(): 得到封装 window.location.hash 的管理对象</p><p>c. history.push(): 添加一个新的历史记录</p><p>d. history.replace(): 用一个新的历史记录替换当前的记录</p><p>e. history.goBack(): 回退到上一个历史记录</p><p>f. history.goForword(): 前进到下一个历史记录</p><p>g. history.listen(function(location){}): 监视历史记录的变化</p><ol start="3"><li>测试</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@2e1b355122477a81c143659a1c0937b4a12108ac/2020/11/15/6c83b38c6c62fe02e3021f012142fc8c.png" alt="history-方式1 "></p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@8cd0276acc1287b07f15a7253f86b102ccafc057/2020/11/15/66b15f7b6da52454b866ef1e81e19d81.png" alt="history-方式2"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>history test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/test1"</span> <span class="attr">onclick</span>=<span class="string">"return push('/test1')"</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"push('/test2')"</span>&gt;</span>push test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"back()"</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"forword()"</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"replace('/test3')"</span>&gt;</span>replace test3<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/history/4.7.2/history.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> history = History.createBrowserHistory() <span class="comment">// 方式一</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// history = History.createHashHistory() // 方式二</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(history)</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">push</span> <span class="params">(to)</span> </span>{</span></span><br><span class="line">                history.push(to)</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line">            }</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">back</span><span class="params">()</span> </span>{</span></span><br><span class="line">                history.goBack()</span><br><span class="line">            }</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">forword</span><span class="params">()</span> </span>{</span></span><br><span class="line">                history.goForward()</span><br><span class="line">            }</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">replace</span> <span class="params">(to)</span> </span>{</span></span><br><span class="line">                history.replace(to)</span><br><span class="line">            }</span><br><span class="line"><span class="javascript">            history.listen(<span class="function">(<span class="params">location</span>) =&gt;</span> {</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">' 请求路由路径变化了'</span>, location)</span></span><br><span class="line">            })</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="62-react-router-相关-api"><a class="markdownIt-Anchor" href="#62-react-router-相关-api"></a> 6.2. react-router  相关 API</h2><h3 id="621-组件"><a class="markdownIt-Anchor" href="#621-组件"></a> 6.2.1.  组件</h3><ol><li><code>&lt;BrowserRouter&gt;</code></li><li><code>&lt;HashRouter&gt;</code></li><li><code>&lt;Route&gt;</code></li><li><code>&lt;Redirect&gt;</code></li><li><code>&lt;Link&gt;</code></li><li><code>&lt;NavLink&gt;</code></li><li><code>&lt;Switch&gt;</code></li></ol><h3 id="622-其它"><a class="markdownIt-Anchor" href="#622-其它"></a> 6.2.2.  其它</h3><ol><li><p>history 对象</p></li><li><p>match 对象</p></li><li><p>withRouter 函数</p></li></ol><h2 id="63-基本路由使用"><a class="markdownIt-Anchor" href="#63-基本路由使用"></a> 6.3.  基本路由使用</h2><h3 id="631-效果"><a class="markdownIt-Anchor" href="#631-效果"></a> 6.3.1. 效果</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@9fd1675819d04e5a033feb924c0213e7922d01ec/2020/11/15/09eb414959ca6afb882e3b6256fed2eb.png" alt="react-router demo1"></p><h3 id="632-准备"><a class="markdownIt-Anchor" href="#632-准备"></a> 6.3.2.  准备</h3><ol><li><p>下载 react-router: <code>npm install --save react-router@4</code></p></li><li><p>引入 <code>bootstrap.css: &lt;link rel="stylesheet" href="/css/bootstrap.css"&gt;</code></p></li></ol><p>6.3.3.  路由组件: views/about.jsx</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">About</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>About 组件内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="634-路由组件-viewshomejsx"><a class="markdownIt-Anchor" href="#634-路由组件-viewshomejsx"></a> 6.3.4.  路由组件: views/home.jsx</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">About</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Home 组件内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="635-包装-navlink-组件-componentsmy-nav-linkjsx"><a class="markdownIt-Anchor" href="#635-包装-navlink-组件-componentsmy-nav-linkjsx"></a> 6.3.5.  包装 NavLink  组件: components/my-nav-link.jsx</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> {NavLink} <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">MyNavLink</span>(<span class="params">props</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">NavLink</span> {<span class="attr">...this.props</span>} <span class="attr">activeClassName</span>=<span class="string">'activeClass'</span>/&gt;</span></span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="636-应用组件-componentsappjsx"><a class="markdownIt-Anchor" href="#636-应用组件-componentsappjsx"></a> 6.3.6.  应用组件: components/app.jsx</h3><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> {Route, Switch, Redirect} <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> MyNavLink <span class="keyword">from</span> <span class="string">'./components/my-nav-link'</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'./views/about'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./views/home'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>{</span><br><span class="line">    render () {</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div className=<span class="string">"row"</span>&gt;</span><br><span class="line">                    &lt;div className=<span class="string">"col-xs-offset-2 col-xs-8"</span>&gt;</span><br><span class="line">                        &lt;div className=<span class="string">"page-header"</span>&gt;</span><br><span class="line">                            &lt;h2&gt;React Router Demo&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;/</span>div&gt;</span><br><span class="line">                    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">                &lt;div className=<span class="string">"row"</span>&gt;</span><br><span class="line">                    &lt;div className=<span class="string">"col-xs-2 col-xs-offset-2"</span>&gt;</span><br><span class="line">                        &lt;div className=<span class="string">"list-group"</span>&gt;</span><br><span class="line">                            {<span class="comment">/* 导航路由链接 */</span>}</span><br><span class="line">                            &lt;MyNavLink className=<span class="string">"list-group-item"</span> to=<span class="string">'/about'</span> &gt;About&lt;<span class="regexp">/MyNavLink&gt;</span></span><br><span class="line"><span class="regexp">                            &lt;MyNavLink className="list-group-item" to='/</span>home<span class="string">'&gt;Home&lt;/MyNavLink&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div className="col-xs-6"&gt;</span></span><br><span class="line"><span class="string">                        &lt;div className="panel"&gt;</span></span><br><span class="line"><span class="string">                            &lt;div className="panel-body"&gt;</span></span><br><span class="line"><span class="string">                                {/* 可切换的路由组件 */}</span></span><br><span class="line"><span class="string">                                &lt;Switch&gt;</span></span><br><span class="line"><span class="string">                                    &lt;Route path='</span>/about<span class="string">' component={About} /&gt;</span></span><br><span class="line"><span class="string">                                    &lt;Route path='</span>/home<span class="string">' component={Home} /&gt;</span></span><br><span class="line"><span class="string">                                    &lt;Redirect to='</span>/about<span class="string">' /&gt;</span></span><br><span class="line"><span class="string">                                &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">                            &lt;/div&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="637-自定义样式-indexcss"><a class="markdownIt-Anchor" href="#637-自定义样式-indexcss"></a> 6.3.7.  自定义样式: index.css</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.activeClass</span> {</span><br><span class="line">    <span class="attribute">color</span>: red <span class="meta">!important</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="638-入口-js-indexjs"><a class="markdownIt-Anchor" href="#638-入口-js-indexjs"></a> 6.3.8.  入口 JS: index.js</h3><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> {BrowserRouter, HashRouter} <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/app'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    (</span><br><span class="line">        &lt;BrowserRouter&gt;</span><br><span class="line">            &lt;App /&gt;</span><br><span class="line">        &lt;<span class="regexp">/BrowserRouter&gt;</span></span><br><span class="line"><span class="regexp">        /</span>*<span class="xml"><span class="tag">&lt;<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">HashRouter</span>&gt;</span></span>*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    ),</span></span><br><span class="line"><span class="regexp">    document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></tbody></table></figure><h2 id="64-嵌套路由使用"><a class="markdownIt-Anchor" href="#64-嵌套路由使用"></a> 6.4.  嵌套路由使用</h2><h3 id="641-效果"><a class="markdownIt-Anchor" href="#641-效果"></a> 6.4.1.  效果</h3><h3 id="642-二级路由组件-viewsnewsjsx"><a class="markdownIt-Anchor" href="#642-二级路由组件-viewsnewsjsx"></a> 6.4.2.  二级路由组件: views/news.jsx</h3><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">News</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>{</span><br><span class="line">    state = {</span><br><span class="line">        newsArr: [<span class="string">'news001'</span>, <span class="string">'news002'</span>, <span class="string">'news003'</span>]</span><br><span class="line">    }</span><br><span class="line">render () {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">this</span>.state.newsArr.map(<span class="function">(<span class="params">news, index</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">{index}</span>&gt;</span>{news}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)</span><br><span class="line">                                           }</span><br><span class="line">            &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="643-二级路由组件-viewsmessagejsx"><a class="markdownIt-Anchor" href="#643-二级路由组件-viewsmessagejsx"></a> 6.4.3.  二级路由组件: views/message.jsx</h3><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> {Link, Route} <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>{</span><br><span class="line">    state = {</span><br><span class="line">        messages: []</span><br><span class="line">    }</span><br><span class="line">    componentDidMount () {</span><br><span class="line">        <span class="comment">// 模拟发送 ajax 请求</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">            <span class="keyword">const</span> data = [</span><br><span class="line">                {<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'Message001'</span>},</span><br><span class="line">                {<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'Message003'</span>},</span><br><span class="line">                {<span class="attr">id</span>: <span class="number">6</span>, <span class="attr">title</span>: <span class="string">'Message006'</span>},</span><br><span class="line">            ]</span><br><span class="line">            <span class="keyword">this</span>.setState({</span><br><span class="line">                messages: data</span><br><span class="line">            })</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    }</span><br><span class="line">    render () {</span><br><span class="line">        <span class="keyword">const</span> path = <span class="keyword">this</span>.props.match.path</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    {</span><br><span class="line">                        <span class="keyword">this</span>.state.messages.map(<span class="function">(<span class="params">m, index</span>) =&gt;</span> {</span><br><span class="line">                            <span class="keyword">return</span> (</span><br><span class="line">                                &lt;li key={index}&gt;</span><br><span class="line">                                    &lt;Link to=<span class="string">'???'</span>&gt;{m.title}&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">                                &lt;/</span>li&gt;</span><br><span class="line">                            )</span><br><span class="line">                        })</span><br><span class="line">                    }</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="644-一级路由组件-viewshomejsx"><a class="markdownIt-Anchor" href="#644-一级路由组件-viewshomejsx"></a> 6.4.4.  一级路由组件: views/home.jsx</h3><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> {Switch, Route, Redirect} <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> MyNavLink <span class="keyword">from</span> <span class="string">'./components/my-nav-link'</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">'./views/news'</span></span><br><span class="line"><span class="keyword">import</span> Message <span class="keyword">from</span> <span class="string">'./views/message'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;Home 组件内容&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;ul className="nav nav-tabs"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;li&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;MyNavLink to='/</span>home/news<span class="string">'&gt;News&lt;/MyNavLink&gt;</span></span><br><span class="line"><span class="string">                    &lt;/li&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;</span></span><br><span class="line"><span class="string">                        &lt;MyNavLink to="/home/message"&gt;Message&lt;/MyNavLink&gt;</span></span><br><span class="line"><span class="string">                    &lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                &lt;Switch&gt;</span></span><br><span class="line"><span class="string">                    &lt;Route path='</span>/home/news<span class="string">' component={News} /&gt;</span></span><br><span class="line"><span class="string">                    &lt;Route path='</span>/home/message<span class="string">' component={Message} /&gt;</span></span><br><span class="line"><span class="string">                    &lt;Redirect to='</span>/home/news<span class="string">'/&gt;</span></span><br><span class="line"><span class="string">                &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="65-向路由组件传递参数数据"><a class="markdownIt-Anchor" href="#65-向路由组件传递参数数据"></a> 6.5.  向路由组件传递参数数据</h2><h3 id="651-效果"><a class="markdownIt-Anchor" href="#651-效果"></a> 6.5.1.  效果</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f9a6ec526089041fb95efec359a8dda22e56ffb2/2020/11/15/cedf3eabf10483391106d3aa89ea888a.png" alt="react-router demo3"></p><h3 id="652-三级路由组件-viewsmessage-detailjsx"><a class="markdownIt-Anchor" href="#652-三级路由组件-viewsmessage-detailjsx"></a> 6.5.2.  三级路由组件: views/message-detail.jsx</h3><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">const</span> messageDetails = [</span><br><span class="line">    {<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'Message001'</span>, <span class="attr">content</span>: <span class="string">' 我爱你,  中国'</span>},</span><br><span class="line">    {<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'Message003'</span>, <span class="attr">content</span>: <span class="string">' 我爱你,  老婆'</span>},</span><br><span class="line">    {<span class="attr">id</span>: <span class="number">6</span>, <span class="attr">title</span>: <span class="string">'Message006'</span>, <span class="attr">content</span>: <span class="string">' 我爱你,  孩子'</span>},</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">MessageDetail</span>(<span class="params">props</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> id = props.match.params.id</span><br><span class="line">    <span class="keyword">const</span> md = messageDetails.find(<span class="function"><span class="params">md</span> =&gt;</span> md.id===id*<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;ID: {md.id}&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;TITLE: {md.title}&lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;CONTENT: {md.content}&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="653-二级路由组件-viewsmessagejsx"><a class="markdownIt-Anchor" href="#653-二级路由组件-viewsmessagejsx"></a> 6.5.3.  二级路由组件: views/message.jsx</h3><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> {Link, Route} <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> MessageDetail <span class="keyword">from</span> <span class="string">"./views/message-detail"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>{</span><br><span class="line">    state = {</span><br><span class="line">        messages: []</span><br><span class="line">    }</span><br><span class="line">    componentDidMount () {</span><br><span class="line">        <span class="comment">// 模拟发送 ajax 请求</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">            <span class="keyword">const</span> data = [</span><br><span class="line">                {<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'Message001'</span>},</span><br><span class="line">                {<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'Message003'</span>},</span><br><span class="line">                {<span class="attr">id</span>: <span class="number">6</span>, <span class="attr">title</span>: <span class="string">'Message006'</span>},</span><br><span class="line">            ]</span><br><span class="line">            <span class="keyword">this</span>.setState({</span><br><span class="line">                messages: data</span><br><span class="line">            })</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    }</span><br><span class="line">    render () {</span><br><span class="line">        <span class="keyword">const</span> path = <span class="keyword">this</span>.props.match.path</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    {</span><br><span class="line">                        <span class="keyword">this</span>.state.messages.map(<span class="function">(<span class="params">m, index</span>) =&gt;</span> {</span><br><span class="line">                            <span class="keyword">return</span> (</span><br><span class="line">                                &lt;li key={index}&gt;</span><br><span class="line">                                    &lt;Link to={<span class="string">`<span class="subst">${path}</span>/<span class="subst">${m.id}</span>`</span>}&gt;{m.title}&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">                                &lt;/</span>li&gt;</span><br><span class="line">                            )</span><br><span class="line">                        })</span><br><span class="line">                    }</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">                &lt;hr/</span>&gt;</span><br><span class="line">                &lt;Route path={<span class="string">`<span class="subst">${path}</span>/:id`</span>} component={MessageDetail}&gt;&lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="66-多种路由跳转方式"><a class="markdownIt-Anchor" href="#66-多种路由跳转方式"></a> 6.6.  多种路由跳转方式</h2><h3 id="661-效果"><a class="markdownIt-Anchor" href="#661-效果"></a> 6.6.1.  效果</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f6f3bfa0206e8aece8d0680980a61e614dc817f9/2020/11/15/6a8caf5e9c374f3789fb6518516726f0.png" alt="react-router demo4"></p><h3 id="662-二级路由-viewsmessagejsx"><a class="markdownIt-Anchor" href="#662-二级路由-viewsmessagejsx"></a> 6.6.2.  二级路由: views/message.jsx</h3><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> {Link, Route} <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> MessageDetail <span class="keyword">from</span> <span class="string">"./views/message-detail"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>{</span><br><span class="line">    state = {</span><br><span class="line">        messages: []</span><br><span class="line">    }</span><br><span class="line">    componentDidMount () {</span><br><span class="line">        <span class="comment">// 模拟发送 ajax 请求</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">            <span class="keyword">const</span> data = [</span><br><span class="line">                {<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'Message001'</span>},</span><br><span class="line">                {<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'Message003'</span>},</span><br><span class="line">                {<span class="attr">id</span>: <span class="number">6</span>, <span class="attr">title</span>: <span class="string">'Message006'</span>},</span><br><span class="line">            ]</span><br><span class="line">            <span class="keyword">this</span>.setState({</span><br><span class="line">                messages: data</span><br><span class="line">            })</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    }</span><br><span class="line">    ShowDetail = <span class="function">(<span class="params">id</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">this</span>.props.history.push(<span class="string">`/home/message/<span class="subst">${id}</span>`</span>)</span><br><span class="line">    }</span><br><span class="line">    ShowDetail2 = <span class="function">(<span class="params">id</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">this</span>.props.history.replace(<span class="string">`/home/message/<span class="subst">${id}</span>`</span>)</span><br><span class="line">    }</span><br><span class="line">    back = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">this</span>.props.history.goBack()</span><br><span class="line">    }</span><br><span class="line">    forward = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">this</span>.props.history.goForward()</span><br><span class="line">    }</span><br><span class="line">    render () {</span><br><span class="line">        <span class="keyword">const</span> path = <span class="keyword">this</span>.props.match.path</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    {</span><br><span class="line">                        <span class="keyword">this</span>.state.messages.map(<span class="function">(<span class="params">m, index</span>) =&gt;</span> {</span><br><span class="line">                            <span class="keyword">return</span> (</span><br><span class="line">                                &lt;li key={index}&gt;</span><br><span class="line">                                    &lt;Link to={<span class="string">`<span class="subst">${path}</span>/<span class="subst">${m.id}</span>`</span>}&gt;{m.title}&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">                                    &amp;nbsp;</span></span><br><span class="line"><span class="regexp">                                    &lt;button onClick={() =&gt; this.ShowDetail(m.id)}&gt;查看详情</span></span><br><span class="line"><span class="regexp">                                        (push)&lt;/</span>button&gt;&amp;nbsp;</span><br><span class="line">                                    &lt;button onClick={() =&gt; <span class="keyword">this</span>.ShowDetail2(m.id)}&gt;查看详情</span><br><span class="line">                                        (replace)&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                                &lt;/</span>li&gt;</span><br><span class="line">                            )</span><br><span class="line">                        })</span><br><span class="line">                    }</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;button onClick={this.back}&gt;返回&lt;/</span>button&gt;&amp;nbsp;</span><br><span class="line">                    &lt;button onClick={<span class="keyword">this</span>.forward}&gt;前进&lt;<span class="regexp">/button&gt;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>p&gt;</span><br><span class="line">                &lt;hr/&gt;</span><br><span class="line">                &lt;Route path={<span class="string">`<span class="subst">${path}</span>/:id`</span>} component={MessageDetail}&gt;&lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="React" scheme="https://extheor.club/categories/React/"/>
    
    
      <category term="React" scheme="https://extheor.club/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>第二章：React 面向组件编程</title>
    <link href="https://extheor.club/posts/9b95a057/index.html"/>
    <id>https://extheor.club/posts/9b95a057/index.html</id>
    <published>2020-11-16T11:13:50.498Z</published>
    <updated>2020-11-16T11:17:35.383Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="第二章react-面向组件编程"><a class="markdownIt-Anchor" href="#第二章react-面向组件编程"></a> 第二章：React 面向组件编程</h1><h2 id="21-基本理解和使用"><a class="markdownIt-Anchor" href="#21-基本理解和使用"></a> 2.1.  基本理解和使用</h2><h3 id="211-效果"><a class="markdownIt-Anchor" href="#211-效果"></a> 2.1.1. 效果</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@8777d312d06824c7e9c013b2da3603de89fdc610/2020/11/14/ece1cfc843821721cbbece68112a797c.png" alt="image-20201114145701687"></p><h3 id="212-自定义组件component"><a class="markdownIt-Anchor" href="#212-自定义组件component"></a> 2.1.2.  自定义组件(Component) :</h3><ol><li>定义组件(2 种方式)</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 方式 1:  工厂函数组件( 简单组件)*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>工厂函数组件(简单组件)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 方式 2: ES6  类组件( 复杂组件)*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>{</span><br><span class="line">    render () {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// MyComponent2 的实例对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>ES6 类组件(复杂组件)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>渲染组件标签</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'example1'</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="213-注意"><a class="markdownIt-Anchor" href="#213-注意"></a> 2.1.3.  注意</h3><ol><li><p>组件名必须首字母大写</p></li><li><p>虚拟 DOM 元素只能有一个根元素</p></li><li><p>虚拟 DOM 元素必须有结束标签</p></li></ol><h3 id="214-render-渲染组件标签的基本流程"><a class="markdownIt-Anchor" href="#214-render-渲染组件标签的基本流程"></a> 2.1.4. render() 渲染组件标签的基本流程</h3><ol><li><p>React 内部会创建组件实例对象</p></li><li><p>得到包含的虚拟 DOM 并解析为真实 DOM</p></li><li><p>插入到指定的页面元素内部</p></li></ol><h2 id="22-组件三大属性-1-state"><a class="markdownIt-Anchor" href="#22-组件三大属性-1-state"></a> 2.2.  组件三大属性 1: state</h2><h3 id="221-效果"><a class="markdownIt-Anchor" href="#221-效果"></a> 2.2.1.  效果</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@83d4f61caaf7d8114e802382b85a7ee66d562430/2020/11/14/e0e221e25086ce22567798154c68beae.png" alt="Like组件"></p><h3 id="222-理解"><a class="markdownIt-Anchor" href="#222-理解"></a> 2.2.2.  理解</h3><ol><li><p>state 是组件对象最重要的属性, 值是对象(可以包含多个数据)</p></li><li><p>组件被称为"状态机", 通过更新组件的 state 来更新对应的页面显示(重新渲染组件)</p></li></ol><h3 id="223-编码操作"><a class="markdownIt-Anchor" href="#223-编码操作"></a> 2.2.3.  编码操作</h3><ol><li>初始化状态:</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span> (props) {</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = {</span><br><span class="line">        stateProp1 : value1,</span><br><span class="line">        stateProp2 : value2</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>读取某个状态值</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state.statePropertyName</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>更新状态----&gt;组件界面更新</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState({</span><br><span class="line">    stateProp1 : value1,</span><br><span class="line">    stateProp2 : value2</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="23-组件三大属性-2-props"><a class="markdownIt-Anchor" href="#23-组件三大属性-2-props"></a> 2.3.  组件三大属性 2: props</h2><h3 id="231-效果"><a class="markdownIt-Anchor" href="#231-效果"></a> 2.3.1.  效果</h3><p>需求 : 自定义用来显示一个人员信息的组件</p><p>1). 姓名必须指定</p><p>2). 如果性别没有指定 , 默认为男</p><p>3). 如果年龄没有指定 , 默认为 18</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@4d3ac17f16a795c62c808cd31d032d8b1a7b3f8b/2020/11/14/52a5fb4b2aee38ca7750ca2d53570259.png" alt="image-20201114150301097"></p><h3 id="232-理解"><a class="markdownIt-Anchor" href="#232-理解"></a> 2.3.2.  理解</h3><ol><li><p>每个组件对象都会有 props(properties 的简写)属性</p></li><li><p>组件标签的所有属性都保存在 props 中</p></li></ol><h3 id="233-作用"><a class="markdownIt-Anchor" href="#233-作用"></a> 2.3.3.  作用</h3><ol><li><p>通过标签属性从组件外向组件内传递变化的数据</p></li><li><p>注意: 组件内部不要修改 props 数据</p></li></ol><h3 id="234-编码操作"><a class="markdownIt-Anchor" href="#234-编码操作"></a> 2.3.4.  编码操作</h3><ol><li>内部读取某个属性值</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.propertyName</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>对 props 中的属性值进行类型限制和必要性限制</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person.propTypes = {</span><br><span class="line">    name: React.PropTypes.string.isRequired,</span><br><span class="line">    age: React.PropTypes.number.isRequired</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>扩展属性: 将对象的所有属性通过 props 传递</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Person {...person}/&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>默认属性值</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person.defaultProps = {</span><br><span class="line">    name: <span class="string">'Mary'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>组件类的构造函数</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span> (props) {</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="built_in">console</span>.log(props) <span class="comment">// 查看所有属性</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="235-面试题"><a class="markdownIt-Anchor" href="#235-面试题"></a> 2.3.5.  面试题</h3><p>问题: 请区别一下组件的 props 和 state 属性</p><ol><li><p>state: 组件自身内部可变化的数据</p></li><li><p>props: 从组件外部向组件内部传递数据, 组件内部只读不修改</p></li></ol><h2 id="24-组件三大属性-3-refs-与事件处理"><a class="markdownIt-Anchor" href="#24-组件三大属性-3-refs-与事件处理"></a> 2.4.  组件三大属性 3: refs  与事件处理</h2><h3 id="241-效果"><a class="markdownIt-Anchor" href="#241-效果"></a> 2.4.1.  效果</h3><p>需求 : 自定义组件 , 功能说明如下 :</p><ol start="2"><li>点击按钮 , 提示第一个输入框中的值</li><li>当第 2 个输入框失去焦点时,提示这个输入框中的值</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@a0ab9e2b2fe714b56421298edadb2f472b5efef4/2020/11/14/48fbf6bc1d40af6372c9cd074b78f3d3.png" alt=""></p><h3 id="242-组件的-3-大属性之二-refs-属性"><a class="markdownIt-Anchor" href="#242-组件的-3-大属性之二-refs-属性"></a> 2.4.2.  组件的 3  大属性之二: refs  属性</h3><ol><li>组件内的标签都可以定义 ref 属性来标识自己</li></ol><p>a. <code>&lt;input type="text" ref={input =&gt; this.msgInput = input}/&gt;</code></p><p>b. 回调函数在组件初始化渲染完或卸载时自动调用</p><ol start="2"><li><p>在组件中可以通过 this.msgInput 来得到对应的真实 DOM 元素</p></li><li><p>作用: 通过 ref 获取组件内容特定标签对象, 进行读取其相关数据</p></li></ol><h3 id="243-事件处理"><a class="markdownIt-Anchor" href="#243-事件处理"></a> 2.4.3.  事件处理</h3><ol><li>通过 onXxx 属性指定组件的事件处理函数(注意大小写)</li></ol><p>a. React 使用的是自定义(合成)事件, 而不是使用的原生 DOM 事件</p><p>b. React 中的事件是通过事件委托方式处理的(委托给组件最外层的元素)</p><ol start="2"><li>通过 event.target 得到发生事件的 DOM 元素对象</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onFocus={<span class="keyword">this</span>.handleClick}/&gt;</span><br><span class="line">handleFocus(event) {</span><br><span class="line">    event.target <span class="comment">// 返回 input 对象</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="244-强烈注意"><a class="markdownIt-Anchor" href="#244-强烈注意"></a> 2.4.4.  强烈注意</h3><ol><li><p>组件内置的方法中的 this 为组件对象</p></li><li><p>在组件类中自定义的方法中 this 为 null</p></li></ol><p>a. 强制绑定 this: 通过函数对象的 <code>bind()</code></p><p>b. 箭头函数(ES6 模块化编码时才能使用)</p><h2 id="25-组件的组合"><a class="markdownIt-Anchor" href="#25-组件的组合"></a> 2.5.  组件的组合</h2><h3 id="251-效果"><a class="markdownIt-Anchor" href="#251-效果"></a> 2.5.1.  效果</h3><p>功能: 组件化实现此功能</p><ol><li>显示所有 todo 列表</li><li>输入文本, 点击按钮显示到列表的首位, 并清除输入的文本</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@7d41961a8184eeb5963c61f7f4b5e588ef6d83c3/2020/11/14/fac5efdfa6d616e2dc7ccfad23f687e2.png" alt="component    组合使用"></p><h3 id="252-功能界面的组件化编码流程-无比重要"><a class="markdownIt-Anchor" href="#252-功能界面的组件化编码流程-无比重要"></a> 2.5.2.  功能界面的组件化编码流程( 无比重要)</h3><ol><li><p>拆分组件: 拆分界面,抽取组件</p></li><li><p>实现静态组件: 使用组件实现静态页面效果</p></li><li><p>实现动态组件</p></li></ol><p>a. 动态显示初始化数据</p><p>b. 交互功能(从绑定事件监听开始)</p><h2 id="26-收集表单数据"><a class="markdownIt-Anchor" href="#26-收集表单数据"></a> 2.6.  收集表单数据</h2><h3 id="261-效果"><a class="markdownIt-Anchor" href="#261-效果"></a> 2.6.1.  效果</h3><p>需求: 自定义包含表单的组件</p><ol><li>输入用户名密码后, 点击登陆提示输入信息</li><li>不提交表单</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@7d41961a8184eeb5963c61f7f4b5e588ef6d83c3/2020/11/14/fac5efdfa6d616e2dc7ccfad23f687e2.png" alt=""></p><h3 id="262-理解"><a class="markdownIt-Anchor" href="#262-理解"></a> 2.6.2.  理解</h3><ol><li><p>问题: 在 react 应用中, 如何收集表单输入数据</p></li><li><p>包含表单的组件分类</p></li></ol><p>a. 受控组件: 表单项输入数据能自动收集成状态</p><p>b. 非受控组件: 需要时才手动读取表单输入框中的数据</p><h2 id="27-组件生命周期"><a class="markdownIt-Anchor" href="#27-组件生命周期"></a> 2.7.  组件生命周期</h2><h3 id="271-效果"><a class="markdownIt-Anchor" href="#271-效果"></a> 2.7.1.  效果</h3><p>需求: 自定义组件</p><ol><li>让指定的文本做显示/隐藏的渐变动画</li><li>切换持续时间为 2S</li><li>点击按钮从界面中移除组件界面</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f8998d267bb8fed63397be304932cf40641457cb/2020/11/14/a94be5a649f8f47f0669c7c408915992.png" alt="component    生命周期"></p><h3 id="272-理解"><a class="markdownIt-Anchor" href="#272-理解"></a> 2.7.2.  理解</h3><blockquote><p>render方法，一旦状态改变，就会重新调用</p></blockquote><ol><li><p>组件对象从创建到死亡它会经历特定的生命周期阶段</p></li><li><p>React 组件对象包含一系列的勾子函数(生命周期回调函数), 在生命周期特定时刻回调</p></li><li><p>我们在定义组件时, 可以重写特定的生命周期回调函数, 做特定的工作</p></li></ol><h3 id="273-生命周期流程图"><a class="markdownIt-Anchor" href="#273-生命周期流程图"></a> 2.7.3.  生命周期流程图</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@7920d00863e1433041be193e82c221148220e5f2/2020/11/14/42e4a3e1ae4a66ddeafd11ff195aed1a.png" alt="image-20201114162648669"></p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@decf8879e1ece8b45d4a1dcf594ae6c6f61eadd8/2020/11/15/c0aa5072a10e7c65496d38bd78902ddc.png" alt="image-20201115142403135"></p><h3 id="274-生命周期详述"><a class="markdownIt-Anchor" href="#274-生命周期详述"></a> 2.7.4.  生命周期详述</h3><ol><li>组件的三个生命周期状态:</li></ol><ul><li>Mount：插入真实 DOM</li><li>Update：被重新渲染</li><li>Unmount：被移出真实 DOM</li></ul><ol start="2"><li>React 为每个状态都提供了勾子(hook)函数</li></ol><ul><li>componentWillMount()</li></ul><ul><li>componentDidMount()</li></ul><ul><li>componentWillUpdate()</li><li>componentDidUpdate()</li><li>componentWillUnmount()</li></ul><ol start="3"><li>生命周期流程:</li></ol><p>a. 第一次初始化渲染显示: ReactDOM.render()</p><ul><li>constructor(): 创建对象初始化 state</li><li>componentWillMount() : 将要插入回调</li><li>render() : 用于插入虚拟 DOM 回调</li><li>componentDidMount() : 已经插入回调</li></ul><p>b. 每次更新 state: this.setSate()</p><ul><li>componentWillUpdate() : 将要更新回调</li><li>render() : 更新(重新渲染)</li><li>componentDidUpdate() : 已经更新回调</li></ul><p>c. 移除组件: ReactDOM.unmountComponentAtNode(containerDom)</p><ul><li>componentWillUnmount() : 组件将要被移除回调</li></ul><h3 id="275-重要的勾子"><a class="markdownIt-Anchor" href="#275-重要的勾子"></a> 2.7.5.  重要的勾子</h3><ol><li><p>render(): 初始化渲染或更新渲染调用</p></li><li><p>componentDidMount(): 开启监听, 发送 ajax 请求</p></li><li><p>componentWillUnmount(): 做一些收尾工作, 如: 清理定时器</p></li><li><p>componentWillReceiveProps(): 后面需要时讲</p></li></ol><h2 id="28-虚拟-dom-与-与-dom-diff-算法"><a class="markdownIt-Anchor" href="#28-虚拟-dom-与-与-dom-diff-算法"></a> 2.8.  虚拟 DOM 与 与 DOM Diff  算法</h2><h3 id="281-效果"><a class="markdownIt-Anchor" href="#281-效果"></a> 2.8.1.  效果</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@9e90eb6553d6e813e8e24882e191af0f34798884/2020/11/14/37599a6d1087f17065a557a1deb9975e.png" alt="component    虚拟DOM"></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>{</span><br><span class="line">    <span class="keyword">constructor</span>(props) {</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = {</span><br><span class="line">            date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    componentDidMount () {</span><br><span class="line">        setInterval(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">            <span class="keyword">this</span>.setState({</span><br><span class="line">                date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">            })</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    }</span><br><span class="line">    render () {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'render()'</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">            &lt;p&gt;</span><br><span class="line">            Hello, &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"Your name here"</span>/&gt;!&amp;nbsp;</span><br><span class="line">            It is {<span class="keyword">this</span>.state.date.toTimeString()}</span><br><span class="line">    &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">}</span></span><br><span class="line"><span class="regexp">}</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">    &lt;HelloWorld/</span>&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h3 id="282-基本原理图"><a class="markdownIt-Anchor" href="#282-基本原理图"></a> 2.8.2. 基本原理图</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@2819f7b8d25d9a6cfc51c8f165ba3ff59b85a1a0/2020/11/14/a7b8c92c50d463d1cd7b791f967b0062.png" alt="image-20201114185318484"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="React" scheme="https://extheor.club/categories/React/"/>
    
    
      <category term="React" scheme="https://extheor.club/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>第八章：redux</title>
    <link href="https://extheor.club/posts/607fa29/index.html"/>
    <id>https://extheor.club/posts/607fa29/index.html</id>
    <published>2020-11-16T11:13:50.495Z</published>
    <updated>2020-11-16T11:17:35.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="第八章redux"><a class="markdownIt-Anchor" href="#第八章redux"></a> 第八章：redux</h1><h2 id="81-redux-理解"><a class="markdownIt-Anchor" href="#81-redux-理解"></a> 8.1. redux  理解</h2><h3 id="811-学习文档"><a class="markdownIt-Anchor" href="#811-学习文档"></a> 8.1.1.  学习文档</h3><ol><li><p>英文文档: <a href="https://redux.js.org/" target="_blank" rel="noopener">https://redux.js.org/</a></p></li><li><p>中文文档: <a href="http://www.redux.org.cn/" target="_blank" rel="noopener">http://www.redux.org.cn/</a></p></li><li><p>Github: <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener">https://github.com/reactjs/redux</a></p></li></ol><h3 id="812-redux-是什么"><a class="markdownIt-Anchor" href="#812-redux-是什么"></a> 8.1.2. redux  是什么?</h3><ol><li><p>redux 是一个独立专门用于做状态管理的 JS 库(不是 react 插件库)</p></li><li><p>它可以用在 react, angular,vue 等项目中, 但基本与 react 配合使用</p></li><li><p>作用: 集中式管理 react 应用中多个组件共享的状态</p></li></ol><h3 id="813-redux"><a class="markdownIt-Anchor" href="#813-redux"></a> 8.1.3. redux</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@4cc2a372862907817fb4d1fd0b459084961d3780/2020/11/16/af95e2ade304bdacd6cb2887a5c08a77.png" alt="image-20201116143828824"></p><h3 id="814-什么情况下需要使用-redux"><a class="markdownIt-Anchor" href="#814-什么情况下需要使用-redux"></a> 8.1.4.  什么情况下需要使用 redux</h3><ol><li><p>总体原则: 能不用就不用, 如果不用比较吃力才考虑使用</p></li><li><p>某个组件的状态，需要共享</p></li><li><p>某个状态需要在任何地方都可以拿到</p></li><li><p>一个组件需要改变全局状态</p></li><li><p>一个组件需要改变另一个组件的状态</p></li></ol><h2 id="82-redux-的核心-api"><a class="markdownIt-Anchor" href="#82-redux-的核心-api"></a> 8.2. redux  的核心 API</h2><h3 id="821-createstore"><a class="markdownIt-Anchor" href="#821-createstore"></a> 8.2.1. createStore()</h3><ol><li>作用:</li></ol><p>创建包含指定 reducer 的 store 对象</p><ol start="2"><li>编码:</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {createStore} <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">'./reducers/counter'</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(counter)</span><br></pre></td></tr></tbody></table></figure><h3 id="822-store-对象"><a class="markdownIt-Anchor" href="#822-store-对象"></a> 8.2.2. store  对象</h3><ol><li>作用:</li></ol><p>redux 库最核心的管理对象</p><ol start="2"><li>它内部维护着:</li></ol><p><code>state</code><br><code>reducer</code></p><ol start="3"><li>核心方法:<br><code>getState()</code><br><code>dispatch(action)</code><br><code>subscribe(listener)</code></li><li>编码:</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.getState()</span><br><span class="line">store.dispatch({<span class="attr">type</span>:<span class="string">'INCREMENT'</span>, number})</span><br><span class="line">store.subscribe(render)</span><br></pre></td></tr></tbody></table></figure><h3 id="823-applymiddleware"><a class="markdownIt-Anchor" href="#823-applymiddleware"></a> 8.2.3. applyMiddleware()</h3><ol><li>作用:</li></ol><p>应用上基于 redux 的中间件(插件库)</p><ol start="2"><li>编码:</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {createStore, applyMiddleware} <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span> <span class="comment">// redux 异步中间件</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">    counter,</span><br><span class="line">    applyMiddleware(thunk) <span class="comment">// 应用上异步中间件</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h3 id="824-combinereducers"><a class="markdownIt-Anchor" href="#824-combinereducers"></a> 8.2.4. combineReducers()</h3><ol><li>作用:</li></ol><p>合并多个 reducer 函数</p><ol start="2"><li>编码:</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers({</span><br><span class="line">    user,</span><br><span class="line">    chatUser,</span><br><span class="line">    chat</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="83-redux-的三个核心概念"><a class="markdownIt-Anchor" href="#83-redux-的三个核心概念"></a> 8.3. redux  的三个核心概念</h2><h3 id="831-action"><a class="markdownIt-Anchor" href="#831-action"></a> 8.3.1. action</h3><ol><li><p>标识要执行行为的对象</p></li><li><p>包含 2 个方面的属性</p></li></ol><p>a. type: 标识属性, 值为字符串, 唯一, 必要属性</p><p>b. xxx: 数据属性, 值类型任意, 可选属性</p><ol start="3"><li>例子:</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> action = {</span><br><span class="line">    type: <span class="string">'INCREMENT'</span>,</span><br><span class="line">    data: <span class="number">2</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>Action Creator(创建 Action 的工厂函数)</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> increment = <span class="function">(<span class="params">number</span>) =&gt;</span> ({<span class="attr">type</span>: <span class="string">'INCREMENT'</span>, <span class="attr">data</span>: number})</span><br></pre></td></tr></tbody></table></figure><h3 id="832-reducer"><a class="markdownIt-Anchor" href="#832-reducer"></a> 8.3.2. reducer</h3><ol><li><p>根据老的 state 和 action, 产生新的 state 的纯函数</p></li><li><p>样例</p></li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>{</span><br><span class="line">    <span class="keyword">switch</span> (action.type) {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">            <span class="keyword">return</span> state + action.data</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</span><br><span class="line">            <span class="keyword">return</span> state - action.data</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>注意</li></ol><p>a. 返回一个新的状态</p><p>b. 不要修改原来的状态</p><h3 id="833-store"><a class="markdownIt-Anchor" href="#833-store"></a> 8.3.3. store</h3><ol><li><p>将 state,action 与 reducer 联系在一起的对象</p></li><li><p>如何得到此对象?</p></li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {createStore} <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>此对象的功能?</li></ol><p>getState(): 得到 state</p><p>dispatch(action): 分发 action, 触发 reducer 调用, 产生新的 state</p><p>subscribe(listener): 注册监听, 当产生了新的 state 时, 自动调用</p><h2 id="84-使用-redux-编写应用"><a class="markdownIt-Anchor" href="#84-使用-redux-编写应用"></a> 8.4.  使用 redux  编写应用</h2><h3 id="841-效果"><a class="markdownIt-Anchor" href="#841-效果"></a> 8.4.1.  效果</h3><h3 id="842-下载依赖包"><a class="markdownIt-Anchor" href="#842-下载依赖包"></a> 8.4.2.  下载依赖包</h3><p><code>npm install --save redux</code></p><h3 id="843-reduxaction-typesjs"><a class="markdownIt-Anchor" href="#843-reduxaction-typesjs"></a> 8.4.3. redux/action-types.js</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">action 对象的 type 常量名称模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'increment'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">'decrement'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="844-reduxactionsjs"><a class="markdownIt-Anchor" href="#844-reduxactionsjs"></a> 8.4.4. redux/actions.js</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">action creator 模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> {INCREMENT, DECREMENT} <span class="keyword">from</span> <span class="string">'./action-types'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> increment = <span class="function"><span class="params">number</span> =&gt;</span> ({<span class="attr">type</span>: INCREMENT, number})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> decrement = <span class="function"><span class="params">number</span> =&gt;</span> ({<span class="attr">type</span>: DECREMENT, number})</span><br></pre></td></tr></tbody></table></figure><h3 id="845-reduxreducersjs"><a class="markdownIt-Anchor" href="#845-reduxreducersjs"></a> 8.4.5. redux/reducers.js</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">根据老的 state 和指定 action, 处理返回一个新的 state</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> {INCREMENT, DECREMENT} <span class="keyword">from</span> <span class="string">'../constants/ActionTypes'</span></span><br><span class="line"><span class="keyword">import</span> {INCREMENT, DECREMENT} <span class="keyword">from</span> <span class="string">'./action-types'</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'counter'</span>, state, action)</span><br><span class="line">    <span class="keyword">switch</span> (action.type) {</span><br><span class="line">        <span class="keyword">case</span> INCREMENT:</span><br><span class="line">            <span class="keyword">return</span> state + action.number</span><br><span class="line">        <span class="keyword">case</span> DECREMENT:</span><br><span class="line">            <span class="keyword">return</span> state - action.number</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="846-componentsappjsx"><a class="markdownIt-Anchor" href="#846-componentsappjsx"></a> 8.4.6. components/app.jsx</h3><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">应用组件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> React, {Component} <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'../redux/actions'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> propTypes = {</span><br><span class="line">        store: PropTypes.object.isRequired,</span><br><span class="line">    }</span><br><span class="line">    increment = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> number = <span class="keyword">this</span>.refs.numSelect.value * <span class="number">1</span></span><br><span class="line">        <span class="keyword">this</span>.props.store.dispatch(actions.increment(number))</span><br><span class="line">    }</span><br><span class="line">    decrement = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> number = <span class="keyword">this</span>.refs.numSelect.value * <span class="number">1</span></span><br><span class="line">        <span class="keyword">this</span>.props.store.dispatch(actions.decrement(number))</span><br><span class="line">    }</span><br><span class="line">    incrementIfOdd = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> number = <span class="keyword">this</span>.refs.numSelect.value * <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="keyword">this</span>.props.store.getState()</span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span> === <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">this</span>.props.store.dispatch(actions.increment(number))</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    incrementAsync = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> number = <span class="keyword">this</span>.refs.numSelect.value * <span class="number">1</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">            <span class="keyword">this</span>.props.store.dispatch(actions.increment(number))</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    }</span><br><span class="line">    render() {</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    click {<span class="keyword">this</span>.props.store.getState()} times {<span class="string">' '</span>}</span><br><span class="line">                &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;select ref="numSelect"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;option value="1"&gt;1&lt;/</span>option&gt;</span><br><span class="line">                    &lt;option value=<span class="string">"2"</span>&gt;<span class="number">2</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;option value="3"&gt;3&lt;/</span>option&gt;</span><br><span class="line">                &lt;<span class="regexp">/select&gt;{' '}</span></span><br><span class="line"><span class="regexp">                &lt;button onClick={this.increment}&gt;+&lt;/</span>button&gt;</span><br><span class="line">                {<span class="string">' '</span>}</span><br><span class="line">                &lt;button onClick={<span class="keyword">this</span>.decrement}&gt;-&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                {' '}</span></span><br><span class="line"><span class="regexp">                &lt;button onClick={this.incrementIfOdd}&gt;increment if odd&lt;/</span>button&gt;</span><br><span class="line">                {<span class="string">' '</span>}</span><br><span class="line">                &lt;button onClick={<span class="keyword">this</span>.incrementAsync}&gt;increment <span class="keyword">async</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="847-indexjs"><a class="markdownIt-Anchor" href="#847-indexjs"></a> 8.4.7. index.js</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> {createStore} <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/app'</span></span><br><span class="line"><span class="keyword">import</span> {counter} <span class="keyword">from</span> <span class="string">'./redux/reducers'</span></span><br><span class="line"><span class="comment">// 根据 counter 函数创建 store 对象</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(counter)</span><br><span class="line"><span class="comment">// 定义渲染根组件标签的函数</span></span><br><span class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;App store={store}/&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 初始化渲染</span></span><br><span class="line">render()</span><br><span class="line"><span class="comment">// 注册 ( 订阅 ) 监听 , 一旦状态发生改变 , 自动重新渲染</span></span><br><span class="line">store.subscribe(render)</span><br></pre></td></tr></tbody></table></figure><h3 id="848-问题"><a class="markdownIt-Anchor" href="#848-问题"></a> 8.4.8.  问题</h3><ol><li><p>redux 与 react 组件的代码耦合度太高</p></li><li><p>编码不够简洁</p></li></ol><h2 id="85-react-redux"><a class="markdownIt-Anchor" href="#85-react-redux"></a> 8.5. react-redux</h2><h3 id="851-理解"><a class="markdownIt-Anchor" href="#851-理解"></a> 8.5.1.  理解</h3><ol><li><p>一个 react 插件库</p></li><li><p>专门用来简化 react 应用中使用 redux</p></li></ol><h3 id="852-react-redux-将所有组件分成两大类"><a class="markdownIt-Anchor" href="#852-react-redux-将所有组件分成两大类"></a> 8.5.2. React-Redux  将所有组件分成两大类</h3><ol><li>UI 组件</li></ol><p>a. 只负责 UI 的呈现，不带有任何业务逻辑</p><p>b. 通过 props 接收数据(一般数据和函数)</p><p>c. 不使用任何 Redux 的 API</p><p>d. 一般保存在 components 文件夹下</p><ol start="2"><li>容器组件</li></ol><p>a. 负责管理数据和业务逻辑，不负责 UI 的呈现</p><p>b. 使用 Redux 的 API</p><p>c. 一般保存在 containers 文件夹下</p><h3 id="853-相关-api"><a class="markdownIt-Anchor" href="#853-相关-api"></a> 8.5.3.  相关 API</h3><ol><li>Provider</li></ol><p>让所有组件都可以得到 state 数据</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider store={store}&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">&lt;<span class="regexp">/Provider&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>connect()</li></ol><p>用于包装 UI 组件生成容器组件</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { connect } <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line">connect(</span><br><span class="line">    mapStateToprops,</span><br><span class="line">    mapDispatchToProps</span><br><span class="line">)(Counter)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>mapStateToprops()</li></ol><p>将外部的数据（即 state 对象）转换为 UI 组件的标签属性</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToprops = <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        value: state</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>mapDispatchToProps()</li></ol><p>将分发 action 的函数转换为 UI 组件的标签属性</p><p>简洁语法可以直接指定为 actions 对象或包含多个 action 方法的对象</p><h3 id="854-使用-react-redux"><a class="markdownIt-Anchor" href="#854-使用-react-redux"></a> 8.5.4.  使用 react-redux</h3><ol><li>下载依赖包</li></ol><p><code>npm install --save react-redux</code></p><ol start="2"><li>redux/action-types.js</li></ol><p>不变</p><ol start="3"><li>redux/actions.js</li></ol><p>不变<br>4) redux/reducers.js</p><p>不变</p><ol start="5"><li>components/counter.jsx</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">UI 组件 : 不包含任何 redux API</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> propTypes = {</span><br><span class="line">        count: PropTypes.number.isRequired,</span><br><span class="line">        increment: PropTypes.func.isRequired,</span><br><span class="line">        decrement: PropTypes.func.isRequired</span><br><span class="line">    }</span><br><span class="line">    increment = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> number = <span class="keyword">this</span>.refs.numSelect.value * <span class="number">1</span></span><br><span class="line">        <span class="keyword">this</span>.props.increment(number)</span><br><span class="line">    }</span><br><span class="line">    decrement = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> number = <span class="keyword">this</span>.refs.numSelect.value * <span class="number">1</span></span><br><span class="line">        <span class="keyword">this</span>.props.decrement(number)</span><br><span class="line">    }</span><br><span class="line">    incrementIfOdd = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> number = <span class="keyword">this</span>.refs.numSelect.value * <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="keyword">this</span>.props.count</span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span> === <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">this</span>.props.increment(number)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    incrementAsync = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> number = <span class="keyword">this</span>.refs.numSelect.value * <span class="number">1</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">            <span class="keyword">this</span>.props.increment(number)</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    }</span><br><span class="line">    render() {</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;</span><br><span class="line">                    click {<span class="keyword">this</span>.props.count} times {<span class="string">' '</span>}</span><br><span class="line">                &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;select ref="numSelect"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;option value="1"&gt;1&lt;/</span>option&gt;</span><br><span class="line">                    &lt;option value=<span class="string">"2"</span>&gt;<span class="number">2</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;option value="3"&gt;3&lt;/</span>option&gt;</span><br><span class="line">                &lt;<span class="regexp">/select&gt;{' '}</span></span><br><span class="line"><span class="regexp">                &lt;button onClick={this.increment}&gt;+&lt;/</span>button&gt;</span><br><span class="line">                {<span class="string">' '</span>}</span><br><span class="line">                &lt;button onClick={<span class="keyword">this</span>.decrement}&gt;-&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                {' '}</span></span><br><span class="line"><span class="regexp">                &lt;button onClick={this.incrementIfOdd}&gt;increment if odd&lt;/</span>button&gt;</span><br><span class="line">                {<span class="string">' '</span>}</span><br><span class="line">                &lt;button onClick={<span class="keyword">this</span>.incrementAsync}&gt;increment <span class="keyword">async</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>containters/app.jsx</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">包含 Counter 组件的容器组件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="comment">// 引入连接函数</span></span><br><span class="line"><span class="keyword">import</span> {connect} <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="comment">// 引入 action 函数</span></span><br><span class="line"><span class="keyword">import</span> {increment, decrement} <span class="keyword">from</span> <span class="string">'../redux/actions'</span></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'../components/counter'</span></span><br><span class="line"><span class="comment">// 向外暴露连接 App 组件的包装组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    state =&gt; ({<span class="attr">count</span>: state}),</span><br><span class="line">    {increment, decrement}</span><br><span class="line">)(Counter)</span><br></pre></td></tr></tbody></table></figure><ol start="7"><li>index.js</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> {createStore} <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> {Provider} <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./containers/app'</span></span><br><span class="line"><span class="keyword">import</span> {counter} <span class="keyword">from</span> <span class="string">'./redux/reducers'</span></span><br><span class="line"><span class="comment">// 根据 counter 函数创建 store 对象</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(counter)</span><br><span class="line"><span class="comment">// 定义渲染根组件标签的函数</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    (</span><br><span class="line">        &lt;Provider store={store}&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">),</span></span><br><span class="line"><span class="regexp">    document.getElementById('root')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></tbody></table></figure><h3 id="855-问题"><a class="markdownIt-Anchor" href="#855-问题"></a> 8.5.5.  问题</h3><ol><li><p>redux 默认是不能进行异步处理的,</p></li><li><p>应用中又需要在 redux 中执行异步任务(ajax, 定时器)</p></li></ol><h2 id="86-redux-异步编程"><a class="markdownIt-Anchor" href="#86-redux-异步编程"></a> 8.6. redux  异步编程</h2><h3 id="861-下载-redux-插件-异步中间件"><a class="markdownIt-Anchor" href="#861-下载-redux-插件-异步中间件"></a> 8.6.1.  下载 redux  插件( 异步中间件)</h3><p><code>npm install --save redux-thunk</code></p><h3 id="862-indexjs"><a class="markdownIt-Anchor" href="#862-indexjs"></a> 8.6.2. index.js</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {createStore, applyMiddleware} <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="comment">// 根据 counter 函数创建 store 对象</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">    counter,</span><br><span class="line">    applyMiddleware(thunk) <span class="comment">// 应用上异步中间件</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h3 id="863-reduxactionsjs"><a class="markdownIt-Anchor" href="#863-reduxactionsjs"></a> 8.6.3. redux/actions.js</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步 action creator( 返回一个函数 )</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> incrementAsync = <span class="function"><span class="params">number</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> {</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">            dispatch(increment(number))</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="864-componentscounterjsx"><a class="markdownIt-Anchor" href="#864-componentscounterjsx"></a> 8.6.4. components/counter.jsx</h3><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">incrementAsync = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> number = <span class="keyword">this</span>.refs.numSelect.value*<span class="number">1</span></span><br><span class="line">    <span class="keyword">this</span>.props.incrementAsync(number)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="865-containersappjsx"><a class="markdownIt-Anchor" href="#865-containersappjsx"></a> 8.6.5. containers/app.jsx</h3><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {increment, decrement, incrementAsync} <span class="keyword">from</span> <span class="string">'../redux/actions'</span></span><br><span class="line"><span class="comment">// 向外暴露连接 App 组件的包装组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">    state =&gt; ({<span class="attr">count</span>: state}),</span><br><span class="line">    {increment, decrement, incrementAsync}</span><br><span class="line">)(Counter)</span><br></pre></td></tr></tbody></table></figure><h2 id="87-使用上-redux-调试工具"><a class="markdownIt-Anchor" href="#87-使用上-redux-调试工具"></a> 8.7.  使用上 redux  调试工具</h2><h3 id="871-安装-chrome-浏览器插件"><a class="markdownIt-Anchor" href="#871-安装-chrome-浏览器插件"></a> 8.7.1.  安装 chrome  浏览器插件</h3><p>redux-devtools</p><h3 id="872-下载工具依赖包"><a class="markdownIt-Anchor" href="#872-下载工具依赖包"></a> 8.7.2.  下载工具依赖包</h3><p><code>npm install --save-dev redux-devtools-extension</code></p><h3 id="873-编码"><a class="markdownIt-Anchor" href="#873-编码"></a> 8.7.3.  编码</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { composeWithDevTools } <span class="keyword">from</span> <span class="string">'redux-devtools-extension'</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">    counter,</span><br><span class="line">    composeWithDevTools(applyMiddleware(thunk))</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h2 id="88-相关重要知识-纯函数和高阶函数"><a class="markdownIt-Anchor" href="#88-相关重要知识-纯函数和高阶函数"></a> 8.8.  相关重要知识:  纯函数和高阶函数</h2><h3 id="881-纯函数"><a class="markdownIt-Anchor" href="#881-纯函数"></a> 8.8.1.  纯函数</h3><ol><li><p>一类特别的函数: 只要是同样的输入，必定得到同样的输出</p></li><li><p>必须遵守以下一些约束</p></li></ol><p>a. 不得改写参数</p><p>b. 不能调用系统 I/O 的 API</p><p>c. 能调用 Date.now()或者 Math.random()等不纯的方法</p><ol start="3"><li>reducer 函数必须是一个纯函数</li></ol><h3 id="882-高阶函数"><a class="markdownIt-Anchor" href="#882-高阶函数"></a> 8.8.2.  高阶函数</h3><ol start="4"><li>理解: 一类特别的函数</li></ol><p>a. 情况 1: 参数是函数</p><p>b. 情况 2: 返回是函数</p><ol start="5"><li>常见的高阶函数:</li></ol><p>a. 定时器设置函数</p><p>b. 数组的 map()/filter()/reduce()/find()/bind()</p><p>c. react-redux 中的 connect 函数</p><ol start="6"><li>作用:</li></ol><p>a. 能实现更加动态, 更加可扩展的功能</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="React" scheme="https://extheor.club/categories/React/"/>
    
    
      <category term="React" scheme="https://extheor.club/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>第一章：React入门</title>
    <link href="https://extheor.club/posts/79dfcc1f/index.html"/>
    <id>https://extheor.club/posts/79dfcc1f/index.html</id>
    <published>2020-11-16T11:13:50.493Z</published>
    <updated>2020-11-16T11:17:35.377Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="第一章react入门"><a class="markdownIt-Anchor" href="#第一章react入门"></a> 第一章：React入门</h1><h2 id="11-react"><a class="markdownIt-Anchor" href="#11-react"></a> 1.1. React</h2><h3 id="111-官网"><a class="markdownIt-Anchor" href="#111-官网"></a> 1.1.1. 官网</h3><ol><li><p>英文官网: <a href="https://reactjs.org/" target="_blank" rel="noopener">https://reactjs.org/</a></p></li><li><p>中文官网: <a href="https://doc.react-china.org/" target="_blank" rel="noopener">https://doc.react-china.org/</a></p></li></ol><h3 id="112-介绍描述"><a class="markdownIt-Anchor" href="#112-介绍描述"></a> 1.1.2.  介绍描述</h3><ol><li><p>用于构建用户界面的 JavaScript 库(只关注于 View)</p></li><li><p>由 Facebook 开源</p></li></ol><h3 id="113-react-的特点"><a class="markdownIt-Anchor" href="#113-react-的特点"></a> 1.1.3. React  的特点</h3><ol><li><p>Declarative(声明式编码)</p></li><li><p>Component-Based(组件化编码)</p></li><li><p>Learn Once, Write Anywhere(支持客户端与服务器渲染)</p></li><li><p>高效</p></li><li><p>单向数据流</p></li></ol><h3 id="114-react-高效的原因"><a class="markdownIt-Anchor" href="#114-react-高效的原因"></a> 1.1.4. React  高效的原因</h3><ol><li><p>虚拟(virtual)DOM, 不总是直接操作 DOM</p></li><li><p>DOM Diff 算法, 最小化页面重绘</p></li></ol><h2 id="12-react-的基本使用"><a class="markdownIt-Anchor" href="#12-react-的基本使用"></a> 1.2. React  的基本使用</h2><p>注意: 此时只是测试语法使用, 并不是真实项目开发使用</p><h3 id="121-效果"><a class="markdownIt-Anchor" href="#121-效果"></a> 1.2.1.  效果</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@75b3d33d55db0211fd2672fdef7f72fc44f871f1/2020/11/14/0bb96e8f9a557324a16496b73efa1d53.png" alt="image-20201114144920258"></p><h3 id="122-相关-js-库"><a class="markdownIt-Anchor" href="#122-相关-js-库"></a> 1.2.2.  相关 js 库</h3><ol><li><p>react.js: React 的核心库</p></li><li><p>react-dom.js: 提供操作 DOM 的 react 扩展库</p></li><li><p>babel.min.js: 解析 JSX 语法代码转为纯 JS 语法代码的库</p></li></ol><h3 id="123-在页面中导入-js"><a class="markdownIt-Anchor" href="#123-在页面中导入-js"></a> 1.2.3.  在页面中导入 js</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/react.development.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/react-dom.development.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/babel.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="124-编码"><a class="markdownIt-Anchor" href="#124-编码"></a> 1.2.4.  编码</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="actionscript"> <span class="comment">// 必须声明 babel</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建虚拟 DOM 元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vDom = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> <span class="comment">// 千万不要加引号</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 渲染虚拟 DOM 到页面真实 DOM 容器中</span></span></span><br><span class="line"><span class="javascript">    ReactDOM.render(vDom, <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>))</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="125-使用-react-开发者工具调试"><a class="markdownIt-Anchor" href="#125-使用-react-开发者工具调试"></a> 1.2.5.  使用 React 开发者工具调试</h3><p>谷歌商店搜索 react，第一个就是了</p><h2 id="13-react-jsx"><a class="markdownIt-Anchor" href="#13-react-jsx"></a> 1.3. React JSX</h2><h3 id="131-效果"><a class="markdownIt-Anchor" href="#131-效果"></a> 1.3.1.  效果</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f0f7baa3ec6e746b500f89e5018849ceafd01cb1/2020/11/14/b92344cfdb42d2c26f5b05f55fa6b162.png" alt="image-20201114145209567"></p><h3 id="132-虚拟-dom"><a class="markdownIt-Anchor" href="#132-虚拟-dom"></a> 1.3.2.  虚拟 DOM</h3><ol><li>React 提供了一些 API 来创建一种 <code>特别</code> 的一般 js 对象</li></ol><p>a. var element = React.createElement(‘h1’, {id:‘myTitle’},‘hello’)</p><p>b. 上面创建的就是一个简单的虚拟 DOM 对象</p><ol start="2"><li><p>虚拟 DOM 对象最终都会被 React 转换为真实的 DOM</p></li><li><p>我们编码时基本只需要操作 react 的虚拟 DOM 相关数据, react 会转换为真实 DOM 变化而更新界面</p></li></ol><h3 id="133-jsx"><a class="markdownIt-Anchor" href="#133-jsx"></a> 1.3.3. JSX</h3><ol><li><p>全称: JavaScript XML</p></li><li><p>react 定义的一种类似于 XML 的 JS 扩展语法: XML+JS</p></li><li><p>作用: 用来创建 react 虚拟 DOM(元素)对象</p></li></ol><p>a. <code>var ele = &lt;h1&gt;Hello JSX!&lt;/h1&gt;</code></p><p>b. 注意 1: 它不是字符串, 也不是 HTML/XML 标签</p><p>c. 注意 2: 它最终产生的就是一个 JS 对象</p><ol start="4"><li><p>标签名任意: HTML 标签或其它标签</p></li><li><p>标签属性任意: HTML 标签属性或其它</p></li><li><p>基本语法规则</p></li></ol><p>a. 遇到 &lt;开头的代码, 以标签的语法解析: html 同名标签转换为 html 同名元素, 其它标签需要特别解析</p><p>b. 遇到以 { 开头的代码，以 JS 语法解析: 标签中的 js 代码必须用{ }包含</p><ol start="7"><li>babel.js 的作用</li></ol><p>a. 浏览器不能直接解析 JSX 代码, 需要 babel 转译为纯 JS 的代码才能运行</p><p>b. 只要用了 JSX，都要加上 type=“text/babel”, 声明需要 babel 来处理</p><h3 id="134-渲染虚拟-dom-元素"><a class="markdownIt-Anchor" href="#134-渲染虚拟-dom-元素"></a> 1.3.4.  渲染虚拟 DOM( 元素)</h3><ol><li><p>语法: ReactDOM.render(virtualDOM, containerDOM)</p></li><li><p>作用: 将虚拟 DOM 元素渲染到页面中的真实容器 DOM 中显示</p></li><li><p>参数说明</p></li></ol><p>a. 参数一: 纯 js 或 jsx 创建的虚拟 dom 对象</p><p>b. 参数二: 用来包含虚拟 DOM 元素的真实 dom 元素对象(一般是一个 div)</p><h3 id="135-建虚拟-dom-的-2-种方式"><a class="markdownIt-Anchor" href="#135-建虚拟-dom-的-2-种方式"></a> 1.3.5.  建虚拟 DOM  的 2  种方式</h3><ol><li>纯 JS(一般不用)</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(<span class="string">'h1'</span>, {<span class="attr">id</span>:<span class="string">'myTitle'</span>}, title)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>JSX:</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">'myTitle'</span>&gt;</span>{title}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="136-jsx-练习"><a class="markdownIt-Anchor" href="#136-jsx-练习"></a> 1.3.6. JSX  练习</h3><p>需求: 动态展示列表数据</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@6b4260269a9a75776c68b112513438b2400a450e/2020/11/14/ffb4b47aadf73facdeb442859d1834f6.png" alt="image-20201114145514239"></p><h2 id="14-模块与组件和模块化与组件化的理解"><a class="markdownIt-Anchor" href="#14-模块与组件和模块化与组件化的理解"></a> 1.4.  模块与组件和模块化与组件化的理解</h2><h3 id="141-模块"><a class="markdownIt-Anchor" href="#141-模块"></a> 1.4.1.  模块</h3><ol><li><p>理解: 向外提供特定功能的 js 程序, 一般就是一个 js 文件</p></li><li><p>为什么: js 代码更多更复杂</p></li><li><p>作用: 复用 js, 简化 js 的编写, 提高 js 运行效率</p></li></ol><h3 id="142-组件"><a class="markdownIt-Anchor" href="#142-组件"></a> 1.4.2.  组件</h3><ol><li><p>理解: 用来实现特定(局部)功能效果的代码集合(html/css/js)</p></li><li><p>为什么: 一个界面的功能更复杂</p></li><li><p>作用: 复用编码, 简化项目编码, 提高运行效率</p></li></ol><h3 id="143-模块化"><a class="markdownIt-Anchor" href="#143-模块化"></a> 1.4.3.  模块化</h3><p>当应用的 js 都以模块来编写的, 这个应用就是一个模块化的应用</p><h3 id="144-组件化"><a class="markdownIt-Anchor" href="#144-组件化"></a> 1.4.4.  组件化</h3><p>当应用是以多组件的方式实现, 这个应用就是一个组件化的应用</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@9be5c629e86d7464c0b0062d86fecda878080886/2020/11/14/861f6de8a97907e95c6808a6fb5d84a3.png" alt="image-20201114145537718"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="React" scheme="https://extheor.club/categories/React/"/>
    
    
      <category term="React" scheme="https://extheor.club/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>第五章：几个重要技术总结</title>
    <link href="https://extheor.club/posts/c14b94dd/index.html"/>
    <id>https://extheor.club/posts/c14b94dd/index.html</id>
    <published>2020-11-16T11:13:50.491Z</published>
    <updated>2020-11-16T11:17:35.386Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="第五章几个重要技术总结"><a class="markdownIt-Anchor" href="#第五章几个重要技术总结"></a> 第五章：几个重要技术总结</h1><h2 id="51-组件间通信"><a class="markdownIt-Anchor" href="#51-组件间通信"></a> 5.1.  组件间通信</h2><h3 id="511-方式一-通过-props-传递"><a class="markdownIt-Anchor" href="#511-方式一-通过-props-传递"></a> 5.1.1.  方式一:  通过 props  传递</h3><ol><li><p>共同的数据放在父组件上, 特有的数据放在自己组件内部(state)</p></li><li><p>通过 props 可以传递一般数据和函数数据, 只能一层一层传递</p></li><li><p>一般数据–&gt;父组件传递数据给子组件–&gt;子组件读取数据</p></li><li><p>函数数据–&gt;子组件传递数据给父组件–&gt;子组件调用函数</p></li></ol><h3 id="512-方式二-使用消息订阅subscribe-发布publish-机制"><a class="markdownIt-Anchor" href="#512-方式二-使用消息订阅subscribe-发布publish-机制"></a> 5.1.2.  方式二:  使用消息订阅(subscribe)- 发布(publish) 机制</h3><ol><li><p>工具库: PubSubJS</p></li><li><p>下载: <code>npm install pubsub-js --save</code></p></li><li><p>使用:</p></li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">'pubsub-js'</span> <span class="comment">//引入</span></span><br><span class="line">PubSub.subscribe(<span class="string">'delete'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{ }); <span class="comment">//订阅</span></span><br><span class="line">PubSub.publish(<span class="string">'delete'</span>, data) <span class="comment">//发布消息</span></span><br></pre></td></tr></tbody></table></figure><h3 id="513-方式三-redux"><a class="markdownIt-Anchor" href="#513-方式三-redux"></a> 5.1.3.  方式三: redux</h3><p>后面专门讲解</p><h2 id="52-事件监听理解"><a class="markdownIt-Anchor" href="#52-事件监听理解"></a> 5.2.  事件监听理解</h2><h3 id="521-原生-dom-事件"><a class="markdownIt-Anchor" href="#521-原生-dom-事件"></a> 5.2.1.  原生 DOM  事件</h3><ol><li>绑定事件监听</li></ol><p>a. 事件名(类型): 只有有限的几个, 不能随便写</p><p>b. 回调函数</p><ol start="2"><li>触发事件</li></ol><p>a. 用户操作界面</p><p>b. 事件名(类型)</p><p>c. 数据()</p><h3 id="522-自定义事件-消息机制"><a class="markdownIt-Anchor" href="#522-自定义事件-消息机制"></a> 5.2.2.  自定义事件( 消息机制)</h3><ol><li>绑定事件监听</li></ol><p>a. 事件名(类型): 任意</p><p>b. 回调函数: 通过形参接收数据, 在函数体处理事件</p><ol start="2"><li>触发事件(编码)</li></ol><p>a. 事件名(类型): 与绑定的事件监听的事件名一致</p><p>b. 数据: 会自动传递给回调函数</p><p>5.3. ES6  常用新语法</p><ol><li><p>定义常量/变量: const/let</p></li><li><p>解构赋值: let {a, b} = this.props import {aa} from ‘xxx’</p></li><li><p>对象的简洁表达: {a, b}</p></li><li><p>箭头函数:</p></li></ol><p>a. 常用场景</p><ul><li>组件的自定义方法: xxx = () =&gt; {}</li><li>参数匿名函数</li></ul><p>b. 优点:</p><ul><li>简洁</li><li>没有自己的 this,使用引用 this 查找的是外部 this</li></ul><ol start="5"><li><p>扩展(三点)运算符: 拆解对象(const MyProps = {}, &lt;Xxx {…MyProps}&gt;)</p></li><li><p>类: class/extends/constructor/super</p></li><li><p>ES6 模块化: export default | import</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="React" scheme="https://extheor.club/categories/React/"/>
    
    
      <category term="React" scheme="https://extheor.club/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>第四章：react ajax</title>
    <link href="https://extheor.club/posts/a04e2d29/index.html"/>
    <id>https://extheor.club/posts/a04e2d29/index.html</id>
    <published>2020-11-16T11:13:50.487Z</published>
    <updated>2020-11-16T11:17:35.387Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="第四章react-ajax"><a class="markdownIt-Anchor" href="#第四章react-ajax"></a> 第四章：react ajax</h1><h2 id="41-理解"><a class="markdownIt-Anchor" href="#41-理解"></a> 4.1.  理解</h2><h3 id="411-前置说明"><a class="markdownIt-Anchor" href="#411-前置说明"></a> 4.1.1.  前置说明</h3><ol><li><p>React 本身只关注于界面, 并不包含发送 ajax 请求的代码</p></li><li><p>前端应用需要通过 ajax 请求与后台进行交互(json 数据)</p></li><li><p>react 应用中需要集成第三方 ajax 库(或自己封装)</p></li></ol><h3 id="412-常用的-ajax-请求库"><a class="markdownIt-Anchor" href="#412-常用的-ajax-请求库"></a> 4.1.2.  常用的 ajax  请求库</h3><ol><li><p>jQuery: 比较重, 如果需要另外引入不建议使用</p></li><li><p>axios: 轻量级, 建议使用</p></li></ol><p>a. 封装 XmlHttpRequest 对象的 ajax</p><p>b. promise 风格</p><p>c. 可以用在浏览器端和 node 服务器端</p><ol start="3"><li>fetch: 原生函数, 但老版本浏览器不支持</li></ol><p>a. 不再使用 XmlHttpRequest 对象提交 ajax 请求</p><p>b. 为了兼容低版本的浏览器, 可以引入兼容库 fetch.js</p><h3 id="413-效果"><a class="markdownIt-Anchor" href="#413-效果"></a> 4.1.3.  效果</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/React%E5%9B%BE%E7%89%87/ajax.gif" alt="ajax"></p><p>需求:</p><ol><li>界面效果如下</li><li>根据指定的关键字在 github 上搜索匹配的最受关注的库</li><li>显示库名, 点击链接查看库</li><li>测试接口: <a href="https://api.github.com/search/repositories?q=r&amp;sort=stars" target="_blank" rel="noopener">https://api.github.com/search/repositories?q=r&amp;sort=stars</a></li></ol><h2 id="42-axios"><a class="markdownIt-Anchor" href="#42-axios"></a> 4.2. axios</h2><h3 id="421-文档"><a class="markdownIt-Anchor" href="#421-文档"></a> 4.2.1.  文档</h3><p><a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a></p><h3 id="422-相关-api"><a class="markdownIt-Anchor" href="#422-相关-api"></a> 4.2.2.  相关 API</h3><ol><li>GET 请求</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">})</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">});</span><br><span class="line">axios.get(<span class="string">'/user'</span>, {</span><br><span class="line">    params: {</span><br><span class="line">        ID: <span class="number">12345</span></span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">})</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>POST 请求</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, {</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">})</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">})</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="43-fetch"><a class="markdownIt-Anchor" href="#43-fetch"></a> 4.3. Fetch</h2><h3 id="431-文档"><a class="markdownIt-Anchor" href="#431-文档"></a> 4.3.1.  文档</h3><ol><li><p><a href="https://github.github.io/fetch/" target="_blank" rel="noopener">https://github.github.io/fetch/</a></p></li><li><p><a href="https://segmentfault.com/a/1190000003810652" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003810652</a></p></li></ol><h3 id="432-相关-api"><a class="markdownIt-Anchor" href="#432-相关-api"></a> 4.3.2.  相关 API</h3><ol><li>GET 请求</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line">}).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">}).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>POST 请求</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, {</span><br><span class="line">    method: <span class="string">"POST"</span>,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">}).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">}).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line"><span class="built_in">console</span>.log(e)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="44-demo-github-users"><a class="markdownIt-Anchor" href="#44-demo-github-users"></a> 4.4. demo: github users</h2><h3 id="441-效果"><a class="markdownIt-Anchor" href="#441-效果"></a> 4.4.1.  效果</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/React%E5%9B%BE%E7%89%87/demo_users.gif" alt="demo_users"></p><h3 id="442-拆分组件"><a class="markdownIt-Anchor" href="#442-拆分组件"></a> 4.4.2.  拆分组件</h3><p>App</p><ul><li>state: searchName/string</li></ul><p>Search</p><ul><li>props: setSearchName/func</li></ul><p>List</p><ul><li>props: searchName/string</li><li>state: firstView/bool, loading/bool, users/array, errMsg/string</li></ul><h3 id="443-编写静态组件"><a class="markdownIt-Anchor" href="#443-编写静态组件"></a> 4.4.3.  编写静态组件</h3><h4 id="444-编写动态组件"><a class="markdownIt-Anchor" href="#444-编写动态组件"></a> 4.4.4.  编写动态组件</h4><p>componentWillReceiveProps(nextProps): 监视接收到新的 props, 发送 ajax<br>使用 axios 库发送 ajax 请求</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="React" scheme="https://extheor.club/categories/React/"/>
    
    
      <category term="React" scheme="https://extheor.club/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>第三章：react  应用( 基于 react ）</title>
    <link href="https://extheor.club/posts/9fee4710/index.html"/>
    <id>https://extheor.club/posts/9fee4710/index.html</id>
    <published>2020-11-16T11:13:50.484Z</published>
    <updated>2020-11-16T11:17:35.381Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="第三章react-应用-基于-react"><a class="markdownIt-Anchor" href="#第三章react-应用-基于-react"></a> 第三章：react  应用( 基于 react ）</h1><h2 id="31-使用-create-react-app-创建-react-应用"><a class="markdownIt-Anchor" href="#31-使用-create-react-app-创建-react-应用"></a> 3.1.  使用 create-react-app  创建 react  应用</h2><h3 id="311-react-脚手架"><a class="markdownIt-Anchor" href="#311-react-脚手架"></a> 3.1.1. react  脚手架</h3><ol><li>xxx 脚手架: 用来帮助程序员快速创建一个基于 xxx 库的模板项目</li></ol><p>a. 包含了所有需要的配置</p><p>b. 指定好了所有的依赖</p><p>c. 可以直接安装/编译/运行一个简单效果</p><ol start="2"><li><p>react 提供了一个用于创建 react 项目的脚手架库: create-react-app</p></li><li><p>项目的整体技术架构为: react + webpack + es6 + eslint</p></li><li><p>使用脚手架开发的项目的特点: 模块化, 组件化, 工程化</p></li></ol><h3 id="312-创建项目并启动"><a class="markdownIt-Anchor" href="#312-创建项目并启动"></a> 3.1.2.  创建项目并启动</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app hello-react</span><br><span class="line"><span class="built_in">cd</span> hello-react</span><br><span class="line">npm start</span><br></pre></td></tr></tbody></table></figure><h3 id="313-react-脚手架项目结构"><a class="markdownIt-Anchor" href="#313-react-脚手架项目结构"></a> 3.1.3. react  脚手架项目结构</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ReactNews</span><br><span class="line">|--node_modules---第三方依赖模块文件夹</span><br><span class="line">|--public</span><br><span class="line">|-- index.html----------------- 主页面</span><br><span class="line">|--scripts</span><br><span class="line">|-- build.js-------------------build 打包引用配置</span><br><span class="line">|-- start.js-------------------start 运行引用配置</span><br><span class="line">|--src------------源码文件夹</span><br><span class="line">|--components-----------------react 组件</span><br><span class="line">|--index.js------------------- 应用入口 js</span><br><span class="line">|--.gitignore------git 版本管制忽略的配置</span><br><span class="line">|--package.json----应用包配置文件</span><br><span class="line">|--README.md-------应用描述说明的 readme 文件</span><br></pre></td></tr></tbody></table></figure><h2 id="32-demo-评论管理"><a class="markdownIt-Anchor" href="#32-demo-评论管理"></a> 3.2. demo:  评论管理</h2><h3 id="321-效果"><a class="markdownIt-Anchor" href="#321-效果"></a> 3.2.1. 效果</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@2b5883bab8171d93850b05e5c222534baff8c56b/2020/11/14/7f8a1b5d32492adcd8266dc7af6a7dd3.png" alt="demo_comment"></p><h3 id="322-拆分组件"><a class="markdownIt-Anchor" href="#322-拆分组件"></a> 3.2.2.  拆分组件</h3><p>应用组件: App</p><ul><li>state: comments/array<br>添加评论组件: CommentAdd</li><li>state: username/string, content/string</li><li>props: add/func<br>评论列表组件: CommentList</li><li>props: comment/object, delete/func, index/number<br>评论项组件: CommentItem</li><li>props: comments/array, delete/func</li></ul><h3 id="323-实现静态组件"><a class="markdownIt-Anchor" href="#323-实现静态组件"></a> 3.2.3.  实现静态组件</h3><h3 id="324-实现动态组件"><a class="markdownIt-Anchor" href="#324-实现动态组件"></a> 3.2.4.  实现动态组件</h3><p>动态展示初始化数据</p><ul><li>初始化状态数据</li><li>传递属性数据响应用户操作, 更新组件界面</li><li>绑定事件监听, 并处理</li><li>更新 state</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="React" scheme="https://extheor.club/categories/React/"/>
    
    
      <category term="React" scheme="https://extheor.club/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>第七章：react-ui</title>
    <link href="https://extheor.club/posts/235acbda/index.html"/>
    <id>https://extheor.club/posts/235acbda/index.html</id>
    <published>2020-11-16T11:13:50.480Z</published>
    <updated>2020-11-16T11:17:35.382Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="第七章react-ui"><a class="markdownIt-Anchor" href="#第七章react-ui"></a> 第七章：react-ui</h1><h2 id="71-最流行的开源-react-ui-组件库"><a class="markdownIt-Anchor" href="#71-最流行的开源-react-ui-组件库"></a> 7.1.  最流行的开源 React UI  组件库</h2><h3 id="711-material-ui-国外"><a class="markdownIt-Anchor" href="#711-material-ui-国外"></a> 7.1.1. material-ui( 国外)</h3><ol><li><p>官网: <a href="http://www.material-ui.com/#/" target="_blank" rel="noopener">http://www.material-ui.com/#/</a></p></li><li><p>github: <a href="https://github.com/callemall/material-ui" target="_blank" rel="noopener">https://github.com/callemall/material-ui</a></p></li></ol><h3 id="712-ant-design-国内蚂蚁金服"><a class="markdownIt-Anchor" href="#712-ant-design-国内蚂蚁金服"></a> 7.1.2. ant-design( 国内蚂蚁金服)</h3><ol><li><p>PC 官网: <a href="https://ant.design/index-cn" target="_blank" rel="noopener">https://ant.design/index-cn</a></p></li><li><p>移动官网: <a href="https://mobile.ant.design/index-cn" target="_blank" rel="noopener">https://mobile.ant.design/index-cn</a></p></li><li><p>Github: <a href="https://github.com/ant-design/ant-design/" target="_blank" rel="noopener">https://github.com/ant-design/ant-design/</a></p></li><li><p>Github: <a href="https://github.com/ant-design/ant-design-mobile/" target="_blank" rel="noopener">https://github.com/ant-design/ant-design-mobile/</a></p></li></ol><h2 id="72-ant-design-mobile-使用入门"><a class="markdownIt-Anchor" href="#72-ant-design-mobile-使用入门"></a> 7.2. ant-design-mobile  使用入门</h2><h3 id="721-效果"><a class="markdownIt-Anchor" href="#721-效果"></a> 7.2.1.  效果</h3><h3 id="722-使用-create-react-app-创建-react-应用"><a class="markdownIt-Anchor" href="#722-使用-create-react-app-创建-react-应用"></a> 7.2.2.  使用 create-react-app  创建 react  应用</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install create-react-app -g</span><br><span class="line">create-react-app antm-demo</span><br><span class="line"><span class="built_in">cd</span> antm-demo</span><br><span class="line">npm start</span><br></pre></td></tr></tbody></table></figure><h3 id="723-搭建-antd-mobile-的基本开发环境"><a class="markdownIt-Anchor" href="#723-搭建-antd-mobile-的基本开发环境"></a> 7.2.3.  搭建 antd-mobile  的基本开发环境</h3><ol><li>下载</li></ol><p><code>npm install antd-mobile --save</code></p><ol start="2"><li>src/App.jsx</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, {Component} <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="comment">// 分别引入需要使用的组件</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'antd-mobile/lib/button'</span></span><br><span class="line"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">'antd-mobile/lib/toast'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>{</span><br><span class="line">    handleClick = <span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">        Toast.info(<span class="string">' 提交成功'</span>, <span class="number">2</span>)</span><br><span class="line">    }</span><br><span class="line">    render() {</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Button type=<span class="string">"primary"</span> onClick={<span class="keyword">this</span>.handleClick}&gt;提交&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>src/index.js</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App"</span></span><br><span class="line"><span class="comment">// 引入整体 css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'antd-mobile/dist/antd-mobile.css'</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>index.html</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1,</span></span><br><span class="line"><span class="string">                               minimum-scale=1, user-scalable=no"</span> /&gt;</span><br><span class="line">&lt;script</span><br><span class="line">    src=<span class="string">"https://as.alipayobjects.com/g/component/fastclick/1.0.6/fastclick.js"</span>&gt;&lt;<span class="regexp">/scrip</span></span><br><span class="line"><span class="regexp">    t&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    if ('addEventListener' in document) {</span></span><br><span class="line"><span class="regexp">        document.addEventListener('DOMContentLoaded', function() {</span></span><br><span class="line"><span class="regexp">            FastClick.attach(document.body);</span></span><br><span class="line"><span class="regexp">        }, false);</span></span><br><span class="line"><span class="regexp">    }</span></span><br><span class="line"><span class="regexp">    if(!window.Promise) {</span></span><br><span class="line"><span class="regexp">        document.writeln('&lt;script</span></span><br><span class="line"><span class="regexp">                         src="https:/</span><span class="regexp">/as.alipayobjects.com/g</span><span class="regexp">/component/</span>es6-promise/<span class="number">3.2</span><span class="number">.2</span>/es6-promise.min.js<span class="string">"</span></span><br><span class="line"><span class="string">                         '+'&gt;'+'&lt;'+'/'+'script&gt;');</span></span><br><span class="line"><span class="string">                         }</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="724-实现按需打包-组件-jscss"><a class="markdownIt-Anchor" href="#724-实现按需打包-组件-jscss"></a> 7.2.4.  实现按需打包( 组件 js/css)</h3><ol><li>下载依赖包</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-app-rewired --dev</span><br><span class="line">yarn add babel-plugin-import --dev</span><br><span class="line">npm install react-app-rewired customize-cra --save-dev</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>修改默认配置:</li></ol><ul><li><p>package.json</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": {</span><br><span class="line">    "start": "react-app-rewired start",</span><br><span class="line">    "build": "react-app-rewired build",</span><br><span class="line">    "test": "react-app-rewired test --env=jsdom"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>config-overrides.js</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { override, fixBabelImports } = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line">    fixBabelImports(<span class="string">'import'</span>, {</span><br><span class="line">        libraryName: <span class="string">'antd-mobile'</span>,</span><br><span class="line">        style: <span class="string">'css'</span>,</span><br><span class="line">    }),</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="3"><li>编码</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import 'antd-mobile/dist/antd-mobile.css'</span></span><br><span class="line"><span class="comment">// import Button from 'antd-mobile/lib/button'</span></span><br><span class="line"><span class="comment">// import Toast from 'antd-mobile/lib/toast'</span></span><br><span class="line"><span class="keyword">import</span> {Button, Toast} <span class="keyword">from</span> <span class="string">'antd-mobile'</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="React" scheme="https://extheor.club/categories/React/"/>
    
    
      <category term="React" scheme="https://extheor.club/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>电商PC后台管理</title>
    <link href="https://extheor.club/posts/86cad295/index.html"/>
    <id>https://extheor.club/posts/86cad295/index.html</id>
    <published>2020-11-07T15:39:54.580Z</published>
    <updated>2020-11-07T15:52:21.823Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="电商pc后台管理"><a class="markdownIt-Anchor" href="#电商pc后台管理"></a> 电商PC后台管理</h1><h2 id="1项目概述"><a class="markdownIt-Anchor" href="#1项目概述"></a> 1.项目概述</h2><h3 id="11电商项目基本业务概述"><a class="markdownIt-Anchor" href="#11电商项目基本业务概述"></a> 1.1电商项目基本业务概述</h3><p>根据不同的场景，电商系统一般都提供了PC端、移动 APP、移动 Web、微信小程序等多种终端访问方式。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@351ed53b30aa6b8c2be735c2f8ebb3455987002f/2020/11/05/5d74b2b2b415ed4b001456aab01b8bfa.png" alt="img"></p><h3 id="12电商后台管理系统的功能"><a class="markdownIt-Anchor" href="#12电商后台管理系统的功能"></a> 1.2电商后台管理系统的功能</h3><p>电商后台 管理系统同用于管理用户账号、商品分类、商品信息、订单、数据统计等业务功能。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@ff226b4c2f1141a8b5887c2b2682c034cc14e179/2020/11/05/ab5135deca9c078a7b559e106b07f683.png" alt="img"></p><h3 id="13电商后台管理系统的开发模式前后端分离"><a class="markdownIt-Anchor" href="#13电商后台管理系统的开发模式前后端分离"></a> 1.3电商后台管理系统的开发模式（前后端分离）</h3><p>电商后台管理系统整体采用前后端分离的开发模式，其中前端项目是<strong>基于Vue技术栈的SPA项目</strong>。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@442666bd2fd62dfafde441a9eef1259027539d63/2020/11/05/29e4642257f2f4cc9bee9d20d5d969b0.png" alt=""></p><h3 id="14电商后台管理系统的技术选型"><a class="markdownIt-Anchor" href="#14电商后台管理系统的技术选型"></a> 1.4电商后台管理系统的技术选型</h3><h4 id="1前端项目技术栈"><a class="markdownIt-Anchor" href="#1前端项目技术栈"></a> 1.前端项目技术栈</h4><ul><li>Vue</li><li>Vue-router</li><li>Element-UI</li><li>Axios</li><li>Echarts</li></ul><h4 id="2后端项目技术栈"><a class="markdownIt-Anchor" href="#2后端项目技术栈"></a> 2.后端项目技术栈</h4><ul><li>Node.js</li><li>Express</li><li>Jwt</li><li>Mysql</li><li>Sequelize</li></ul><h2 id="2项目初始化"><a class="markdownIt-Anchor" href="#2项目初始化"></a> 2.项目初始化</h2><h3 id="21前端项目初始化步骤"><a class="markdownIt-Anchor" href="#21前端项目初始化步骤"></a> 2.1前端项目初始化步骤</h3><p>① 安装vue脚手架</p><p>② 通过 vue 脚手架创建项目</p><p>③ 配置 vue 路由</p><p>④ 配置 Element-UI 组件库</p><p>⑤ 配置 axios 库</p><p>⑥ 初始化 git 远程仓库</p><p>⑦ 将本地项目托管到 Github 或码云中</p><h3 id="22后台项目的环境安装配置"><a class="markdownIt-Anchor" href="#22后台项目的环境安装配置"></a> 2.2后台项目的环境安装配置</h3><p>① 安装MySQL数据库</p><p>② 安装Node.js 环境</p><p>③ 配置项目相关信息</p><p>④ 启动项目</p><p>⑤ 使用Postman 测试后台项目接口是否正常</p><h2 id="3登录退出功能"><a class="markdownIt-Anchor" href="#3登录退出功能"></a> 3.登录/退出功能</h2><h3 id="31登录概述"><a class="markdownIt-Anchor" href="#31登录概述"></a> 3.1登录概述</h3><h4 id="1登录业务流程"><a class="markdownIt-Anchor" href="#1登录业务流程"></a> 1.登录业务流程</h4><p>① 在登录页面输入用户名和密码</p><p>② 调用后台接口进行验证</p><p>③ 通过验证之后，根据后台的响应状态跳转到项目主页</p><h4 id="2登录业务的相关技术点"><a class="markdownIt-Anchor" href="#2登录业务的相关技术点"></a> 2.登录业务的相关技术点</h4><ul><li>http是无状态的</li><li>通过cookie在客户端记录状态</li><li>通过session在服务器端记录状态</li><li>通过token方式维持状态</li></ul><h3 id="32登录-token-原理分析"><a class="markdownIt-Anchor" href="#32登录-token-原理分析"></a> 3.2登录 —— token 原理分析</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@9416475db0035ffcf97e4417464c39b68267dc7d/2020/11/05/1065b2672aab1c59f957cb2bf2d2e4aa.png" alt="image-20201105094725505"></p><h3 id="33登录功能实现"><a class="markdownIt-Anchor" href="#33登录功能实现"></a> 3.3登录功能实现</h3><h4 id="1登录页面的布局"><a class="markdownIt-Anchor" href="#1登录页面的布局"></a> 1.登录页面的布局</h4><p>通过Element-UI组件实现布局</p><ul><li>el-form</li><li>el-form-item</li><li>el-input</li><li>el-button</li><li>字体图标</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@a55d193b20ad8c7c0498d62e136eb7f6c4496a36/2020/11/05/353c9ec1d5dcdd14862390903e8180ac.png" alt="image-20201105094947874"></p><blockquote><p>首先打开 vue-shop 项目</p></blockquote><ul><li>查看文件，文件夹在工作区，暂存区的状态</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></tbody></table></figure><ul><li>创建并切换 <code>login</code> 分支</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b login</span><br></pre></td></tr></tbody></table></figure><ul><li>查看所有分支</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></figure><h4 id="2loginvue-文件解读"><a class="markdownIt-Anchor" href="#2loginvue-文件解读"></a> 2.Login.vue 文件解读</h4><blockquote><p>这是一个 Vue 单文件组件</p><p>祖传 Vue 布局如下</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scope&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>我们需要在 <code>&lt;template&gt;</code> 标签中进行布局</p><p>在 <code>&lt;script&gt;</code> 标签中编写用户行为和数据定义</p><p>在 <code>&lt;style&gt;</code> 标签中定义样式</p></blockquote><blockquote><p>我用到了 ElementUI 库，主要是记录一下这个库的用法</p><p>先放上源码，我会对下面的代码进行解读</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class="login_container"&gt;</span><br><span class="line">    &lt;div class="login_box"&gt;</span><br><span class="line">        &lt;!-- 头像区域 --&gt;</span><br><span class="line">        &lt;div class="avatar_box"&gt;</span><br><span class="line">            &lt;img src="../assets/logo.png" alt=""&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">            &lt;!-- 登录表单区域 --&gt;</span><br><span class="line">            &lt;el-form :model="loginForm" :rules="loginFormRules" ref="loginFormRef" label-width="0px" class="login_form"&gt;</span><br><span class="line">                &lt;!-- 用户名 --&gt;</span><br><span class="line">                &lt;el-form-item prop="username"&gt;</span><br><span class="line">                    &lt;el-input v-model="loginForm.username" prefix-icon="iconfont icon-user"&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">                &lt;!-- 密码 --&gt;</span><br><span class="line">                &lt;el-form-item prop="password"&gt;</span><br><span class="line">                    &lt;el-input v-model="loginForm.password" type="password" prefix-icon="iconfont icon-password"&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">                &lt;!-- 按钮区域 --&gt;</span><br><span class="line">                &lt;el-form-item class="btns"&gt;</span><br><span class="line">                    &lt;el-button type="primary" @click="login"&gt;登录&lt;/el-button&gt;</span><br><span class="line">                    &lt;el-button type="info" @click="resetLoginForm"&gt;重置&lt;/el-button&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">            &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;       </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        data() {</span><br><span class="line">            return {</span><br><span class="line">                // 这是登录表单的数据绑定对象</span><br><span class="line">                loginForm: {</span><br><span class="line">                    username: "",</span><br><span class="line">                    password: ""</span><br><span class="line">                },</span><br><span class="line">                // 这是登录表单验证</span><br><span class="line">                loginFormRules: {</span><br><span class="line">                    username: [</span><br><span class="line">                        { required: true, message: '请输入登录名称', trigger: 'blur' },</span><br><span class="line">                        { min: 3, max: 10, message: '长度在 3 到 10 个字符', trigger: 'blur' }</span><br><span class="line">                    ],</span><br><span class="line">                    password: [</span><br><span class="line">                        { required: true, message: '请输入登录密码', trigger: 'blur' },</span><br><span class="line">                        { min: 6, max: 16, message: '长度在 6 到 16 个字符', trigger: 'blur' }</span><br><span class="line">                    ]</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">            resetLoginForm(){</span><br><span class="line">                // 对整个表单进行重置，将所有字段值重置为初始值并移除校验结果</span><br><span class="line">                this.$refs.loginFormRef.resetFields()</span><br><span class="line">            },</span><br><span class="line">            login(){</span><br><span class="line">                this.$refs.loginFormRef.validate((valid)=&gt;{</span><br><span class="line">                    console.log(valid);</span><br><span class="line">                })</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scope&gt;</span><br><span class="line">    .login_container {</span><br><span class="line">        background: #2b4b6b;</span><br><span class="line">        height: 100%;</span><br><span class="line">        position: relative;</span><br><span class="line">    }</span><br><span class="line">    .login_box {</span><br><span class="line">        width: 450px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background: #ffffff;</span><br><span class="line">        border-radius: 3px;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 50%;</span><br><span class="line">        top: 50%;</span><br><span class="line">        transform: translate(-50%, -50%);</span><br><span class="line">    }</span><br><span class="line">    .avatar_box {</span><br><span class="line">        width: 130px;</span><br><span class="line">        height: 130px;</span><br><span class="line">        border: solid 1px #eee;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        background: #ffffff;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        box-shadow: 0 0 10px #ddd;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 50%;</span><br><span class="line">        transform: translate(-50%, -50%);</span><br><span class="line">        img {</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            background: #eee;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    .login_form {</span><br><span class="line">        position: absolute;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        padding: 0 10px;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">    }</span><br><span class="line">    .btns {</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: flex-end;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在 <code>&lt;el-form&gt;</code> 标签中添加 <code>:model</code> 属性，这是登录表单的数据绑定对象，Ta需要和 <code>&lt;el-input&gt;</code> 标签中的 <code>v-module</code> 配合使用</p><p><code>:rules</code> 是登录表单验证，Ta需要在 JS 区域的 data 中返回一个登录表单验证对象，其中的属性为需要验证的内容，如何使用？在 <code>el-form-item</code> 标签中新增 <code>prop</code> 属性，使它的值为刚刚在 data 中定义的属性值</p><p><code>&lt;el-input&gt;</code> 标签中的 <code>prefix-icon</code> 属性是用来设置前置字体图标的，我引用的阿里矢量图库，也可以通过 <code>suffix-icon</code> 属性在 input 组件的尾部增加显示图标。</p><p><code>&lt;el-form&gt;</code> 表单中的 <code>ref</code> 属性是为当前表单注册一个实例对象，Ta的属性名就是这个实例对象的名称，比如说我自定义的名称为 <code>loginFormRef</code> ，那我就可以通过 <code>this.$refs.loginFormRef</code> 来访问到这个实例对象。</p><p><code>resetFields</code> 可以通过 <code>this.$refs.loginFormRef.resetFields()</code> 调用此方法，此方法的作用是：对整个表单进行重置，将所有字段值重置为初始值并移除校验结果。</p><p><code>validate</code> 可以通过 <code>this.$refs.loginFormRef.validate()</code> 调用此方法，此方法的作用是：对整个表单进行校验的方法，参数为一个回调函数。该回调函数会在校验结束后被调用，并传入两个参数：是否校验成功和未通过校验的字段。若不传入回调函数，则会返回一个 promise。Function(callback: Function(boolean, object))</p></blockquote><h4 id="3路由导航守卫控制访问权限"><a class="markdownIt-Anchor" href="#3路由导航守卫控制访问权限"></a> 3.路由导航守卫控制访问权限</h4><p>如果用户没有登录，但是直接通过URL访问特定页面，需要重新导航到登录页面</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为路由对象，添加 beforeEach 导航守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// 如果用户访问的登录页，直接放行</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">"/login"</span>) <span class="keyword">return</span> next()</span><br><span class="line">    <span class="comment">// 从 sessionStorage 中获取到保存的 token 值</span></span><br><span class="line">    <span class="keyword">const</span> tokenStr = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">"token"</span>)</span><br><span class="line">    <span class="comment">// 没有 token ，强制跳转到登录页</span></span><br><span class="line">    <span class="keyword">if</span> (!tokenStr) <span class="keyword">return</span> next(<span class="string">"/login"</span>)</span><br><span class="line">    next()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="34退出"><a class="markdownIt-Anchor" href="#34退出"></a> 3.4退出</h3><h4 id="退出功能实现原理"><a class="markdownIt-Anchor" href="#退出功能实现原理"></a> 退出功能实现原理</h4><p>基于token 的方式实现退出比较简单，只需要销毁本地的token即可。这样，后续的请求就不会携带token，必须重新登录生成一个新的token之后才可以访问页面。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清空token</span></span><br><span class="line"><span class="built_in">window</span>.sessionStorage.clear()</span><br><span class="line"><span class="comment">// 跳转到登录页</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">'/login'</span>)</span><br></pre></td></tr></tbody></table></figure><p>解决 eslintrc 格式化报错问题</p><p>在项目中新建 <code>.prettierrc</code> 文件，文件内容如下</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="attr">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"singleQuote"</span>: <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>“semi”: false    表示移除分号(😉</p><p>“singleQuote”: true    表示用单引号(’’)来表示字符串</p></blockquote><blockquote><p>最后在每个需要修改的文件中使用快捷键 <code>Ctrl+Alt+\</code> 进行格式化文档</p></blockquote><p>在 <code>.eslintrc.js</code> --&gt; rules 下新建一条命令</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"space-before-function-paren"</span>: <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="35将本地代码提交到码云上"><a class="markdownIt-Anchor" href="#35将本地代码提交到码云上"></a> 3.5将本地代码提交到码云上</h3><ul><li>查看文件，文件夹在工作区，暂存区的状态</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></tbody></table></figure><blockquote><p>此时提示你的是红色信息</p><p>它会提示你 <code>Changes not staged for commit:</code> 尚未提交</p></blockquote><ul><li>把所有的文件都添加到暂存区</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></tbody></table></figure><blockquote><p>把所有的文件都添加到暂存区之后继续使用 <code>git status</code> ，提示信息就变成绿色了</p></blockquote><ul><li>把暂存区的所有代码提交到本地仓库中</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"完成了登录功能"</span></span><br></pre></td></tr></tbody></table></figure><ul><li>查看当前所在分支</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当前分支是 login ，我们需要把 login 中的所有代码合并到 master 主分支中</p><p>注意：你需要先切换到 master 分支之后再合并 login</p></blockquote><ul><li>切换到 master 分支</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></tbody></table></figure><blockquote><p>出现以下提示说明成功</p><p>Switched to branch ‘master’<br>Your branch is up to date with ‘origin/master’.</p><ul><li>如果没有成功删除 <code>.gitignore</code> 暂存文件，重新从第一步开始</li></ul><p>再使用 <code>git branch</code> 可以看到已经切换到了 master 主分支</p></blockquote><p>我的 <code>.gitignore</code> 文件内容如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br></pre></td></tr></tbody></table></figure><ul><li>基于 master 合并 login 中的所有文件</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge login</span><br></pre></td></tr></tbody></table></figure><ul><li>把本地仓库推送到远程仓库</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></tbody></table></figure><blockquote><p>但是我们发现码云中只要 master 一个分支，并没有 login 分支</p><p>所有我们需要将 login 也推送到码云中</p></blockquote><ul><li>首先切换到 login 分支</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout login</span><br></pre></td></tr></tbody></table></figure><ul><li>把 login 分支推送到码云</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin login</span><br></pre></td></tr></tbody></table></figure><blockquote><p>-u 是指定推送 login 到码云</p></blockquote><h2 id="4主页布局"><a class="markdownIt-Anchor" href="#4主页布局"></a> 4.主页布局</h2><h3 id="41整体布局"><a class="markdownIt-Anchor" href="#41整体布局"></a> 4.1整体布局</h3><p>先上下划分，再左右划分</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-container class="home-container"&gt;</span><br><span class="line">    &lt;!-- 头部区域 --&gt;</span><br><span class="line">    &lt;el-header&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;img src="https://cdn.jsdelivr.net/gh/extheor/images/%E7%A0%81%E5%B0%8F%E4%BD%99.jpg" alt=""&gt;</span><br><span class="line">            &lt;span&gt;码小余后台管理&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-button type="info" @click="goBack"&gt;退出&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-header&gt;</span><br><span class="line">    &lt;!-- 页面主题区域 --&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">        &lt;!-- 侧边栏 --&gt;</span><br><span class="line">        &lt;el-aside width="200px"&gt;Aside&lt;/el-aside&gt;</span><br><span class="line">        &lt;!-- 右侧内容主体 --&gt;</span><br><span class="line">        &lt;el-main&gt;Main&lt;/el-main&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">&lt;/el-container&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="42左侧菜单布局"><a class="markdownIt-Anchor" href="#42左侧菜单布局"></a> 4.2左侧菜单布局</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-menu background-color="#333744" text-color="#fff" active-text-color="#ffd04b"&gt;</span><br><span class="line">    &lt;!-- 一级菜单 --&gt;</span><br><span class="line">    &lt;el-submenu index="1"&gt;</span><br><span class="line">        &lt;!-- 一级菜单的模板区域 --&gt;</span><br><span class="line">        &lt;template slot="title"&gt;</span><br><span class="line">&lt;!-- 图标 --&gt;</span><br><span class="line">&lt;i class="el-icon-location"&gt;&lt;/i&gt;</span><br><span class="line">&lt;!-- 文本 --&gt;</span><br><span class="line">&lt;span&gt;导航一&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;!-- 二级菜单 --&gt;</span><br><span class="line">        &lt;el-menu-item index="1-4-1"&gt;</span><br><span class="line">            &lt;!-- 图标 --&gt;</span><br><span class="line">            &lt;i class="el-icon-location"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;!-- 文本 --&gt;</span><br><span class="line">            &lt;span&gt;导航一&lt;/span&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/el-submenu&gt;  </span><br><span class="line">&lt;/el-menu&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@2ddd23c473e0dbd0b78b5d13ba9fefabdeeebce8/2020/11/05/a7264bebaf4a859f823b72d4508f41a4.png" alt="image-20201105222133588"></p><h3 id="43通过接口获取菜单数据"><a class="markdownIt-Anchor" href="#43通过接口获取菜单数据"></a> 4.3通过接口获取菜单数据</h3><p>通过 axios 请求拦截器添加 token，保证拥有获取数据的权限。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios请求拦截</span></span><br><span class="line">axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> {</span><br><span class="line">  <span class="comment">// console.log(config);</span></span><br><span class="line">  config.headers.Authorization = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="homevue-文件解读"><a class="markdownIt-Anchor" href="#homevue-文件解读"></a> Home.vue 文件解读</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-container class="home-container"&gt;</span><br><span class="line">        &lt;!-- 头部区域 --&gt;</span><br><span class="line">        &lt;el-header&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;img src="https://cdn.jsdelivr.net/gh/extheor/images/%E7%A0%81%E5%B0%8F%E4%BD%99.jpg" alt=""&gt;</span><br><span class="line">                &lt;span&gt;码小余后台管理&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">            &lt;el-button type="info" @click="goBack"&gt;退出&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-header&gt;</span><br><span class="line">        &lt;!-- 页面主体区域 --&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">            &lt;!-- 侧边栏 --&gt;</span><br><span class="line">            &lt;el-aside :width="isCollapse ? '64px' : '200px'"&gt;</span><br><span class="line">                &lt;div class="toggle-button" @click="toggleCollapse"&gt;&lt;span&gt;|||&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">                &lt;!-- </span><br><span class="line">                    :unique-opened - 表示是否只显示一个一级菜单</span><br><span class="line">                    :collapse - 表示是否折叠左侧菜单</span><br><span class="line">                    :collapse-transition - 是否开启默认折叠动画效果</span><br><span class="line">                    :router - 是否开启前端路由</span><br><span class="line">                    :default-active - 对当前点击的菜单高亮显示</span><br><span class="line">                --&gt;</span><br><span class="line">                &lt;el-menu background-color="#333744" text-color="#fff" active-text-color="#409EFF" :unique-opened="true" :collapse="isCollapse" :collapse-transition="false" :router="true" :default-active="activePath"&gt;</span><br><span class="line">                    &lt;!-- 一级菜单 --&gt;</span><br><span class="line">                    &lt;el-submenu :index="item.id + ''" v-for="item in menuList" :key="item.id"&gt;</span><br><span class="line">                        &lt;!-- 一级菜单的模板区域 --&gt;</span><br><span class="line">                        &lt;template slot="title"&gt;</span><br><span class="line">                            &lt;!-- 图标 --&gt;</span><br><span class="line">                            &lt;i :class="iconObj[item.id]"&gt;&lt;/i&gt;</span><br><span class="line">                            &lt;!-- 文本 --&gt;</span><br><span class="line">                            &lt;span&gt;{{ item.authName }}&lt;/span&gt;</span><br><span class="line">                        &lt;/template&gt;</span><br><span class="line">                        &lt;!-- 二级菜单 --&gt;</span><br><span class="line">                        &lt;el-menu-item :index="subItem.path" v-for="subItem in item.children" :key="subItem.id" @click="saveNavState(subItem.path)"&gt;</span><br><span class="line">                            &lt;!-- 图标 --&gt;</span><br><span class="line">                            &lt;i class="el-icon-menu"&gt;&lt;/i&gt;</span><br><span class="line">                            &lt;!-- 文本 --&gt;</span><br><span class="line">                            &lt;span&gt;{{ subItem.authName }}&lt;/span&gt;</span><br><span class="line">                        &lt;/el-menu-item&gt;</span><br><span class="line">                    &lt;/el-submenu&gt;  </span><br><span class="line">                &lt;/el-menu&gt;</span><br><span class="line">            &lt;/el-aside&gt;</span><br><span class="line">            &lt;!-- 右侧内容主体 --&gt;</span><br><span class="line">            &lt;el-main&gt;</span><br><span class="line">                &lt;!-- 路由占位符 --&gt;</span><br><span class="line">                &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">            &lt;/el-main&gt;</span><br><span class="line">        &lt;/el-container&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default {</span><br><span class="line">        data(){</span><br><span class="line">            return {</span><br><span class="line">                menuList: [],</span><br><span class="line">                iconObj: {</span><br><span class="line">                    "125": "iconfont icon-yonghuguanli",</span><br><span class="line">                    "103": "iconfont icon-quanxianguanli",</span><br><span class="line">                    "101": "iconfont icon-shangpinguanli",</span><br><span class="line">                    "102": "iconfont icon-dingdanguanli",</span><br><span class="line">                    "145": "iconfont icon-shujutongji"</span><br><span class="line">                },</span><br><span class="line">                // 是否折叠</span><br><span class="line">                isCollapse: false,</span><br><span class="line">                // 点击二级菜单高亮</span><br><span class="line">                activePath: ""</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        // 页面刷新的操作</span><br><span class="line">        created(){</span><br><span class="line">            this.getMenuList()</span><br><span class="line">            this.activePath = window.sessionStorage.getItem("activePath")</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">            goBack(){</span><br><span class="line">                window.sessionStorage.clear()</span><br><span class="line">                this.$router.push("/login")</span><br><span class="line">            },</span><br><span class="line">            // 获取所有的菜单</span><br><span class="line">            async getMenuList(){</span><br><span class="line">                const { data: res } = await this.$http.get("menus")</span><br><span class="line">                if(res.meta.status !== 200) return this.$message.error(res.meta.msg)</span><br><span class="line">                this.menuList = res.data</span><br><span class="line">                console.log(this.menuList);</span><br><span class="line">            },</span><br><span class="line">            toggleCollapse(){</span><br><span class="line">                this.isCollapse = !this.isCollapse</span><br><span class="line">            },</span><br><span class="line">            saveNavState(activePath){</span><br><span class="line">                window.sessionStorage.setItem("activePath", activePath)</span><br><span class="line">                this.activePath = activePath</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scope&gt;</span><br><span class="line">    .home-container {</span><br><span class="line">        height: 100%;</span><br><span class="line">    }</span><br><span class="line">    .el-header {</span><br><span class="line">        background-color: #373d41;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">        align-items: center;</span><br><span class="line">        padding: 0 !important;</span><br><span class="line"></span><br><span class="line">        &gt; div {</span><br><span class="line">            height: 100%;</span><br><span class="line">            color: #fff;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            // padding: 0;</span><br><span class="line"></span><br><span class="line">            img {</span><br><span class="line">                height: 100%;</span><br><span class="line">                border-radius: 50%;</span><br><span class="line">                margin-right: 10px;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    .el-aside {</span><br><span class="line">        background-color: #333744;</span><br><span class="line">        .el-menu {</span><br><span class="line">            border: 0;</span><br><span class="line">        }</span><br><span class="line">        .toggle-button {</span><br><span class="line">            color: #ffffff;</span><br><span class="line">            height: 50px;</span><br><span class="line">            &gt; span {</span><br><span class="line">                display: block;</span><br><span class="line">                position: absolute;</span><br><span class="line">                transform: rotate(-90deg) translateY(9px);</span><br><span class="line">                transform-origin: 150%;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            &amp;:hover {</span><br><span class="line">                background-color: #292C36;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    .el-main {</span><br><span class="line">        background-color: #eaedf1;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    .iconfont {</span><br><span class="line">        font-weight: 800;</span><br><span class="line">        margin-right: 10px;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="uservue-文件解读"><a class="markdownIt-Anchor" href="#uservue-文件解读"></a> User.vue 文件解读</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 面包屑导航 --&gt;</span><br><span class="line">        &lt;el-breadcrumb separator-class="el-icon-arrow-right"&gt;</span><br><span class="line">            &lt;el-breadcrumb-item :to="{ path: '/home' }"&gt;首页&lt;/el-breadcrumb-item&gt;</span><br><span class="line">            &lt;el-breadcrumb-item&gt;用户管理&lt;/el-breadcrumb-item&gt;</span><br><span class="line">            &lt;el-breadcrumb-item&gt;用户列表&lt;/el-breadcrumb-item&gt;</span><br><span class="line">        &lt;/el-breadcrumb&gt;</span><br><span class="line">        &lt;!-- Card卡片视图区域 --&gt;</span><br><span class="line">        &lt;el-card class="box-card"&gt;</span><br><span class="line">            &lt;!-- 搜索与添加区域 --&gt;</span><br><span class="line">            &lt;el-row :gutter="20"&gt;</span><br><span class="line">                &lt;el-col :span="8"&gt;</span><br><span class="line">                    &lt;!-- </span><br><span class="line">                        :clearable - 是否可清空</span><br><span class="line">                        @clear - 在点击由 clearable 属性生成的清空按钮时触发</span><br><span class="line">                     --&gt;</span><br><span class="line">                    &lt;el-input placeholder="请输入内容" v-model="queryInfo.query" :clearable="true" @clear="getUserList"&gt;</span><br><span class="line">                        &lt;el-button slot="append" icon="el-icon-search" @click="getUserList"&gt;&lt;/el-button&gt;</span><br><span class="line">                    &lt;/el-input&gt;</span><br><span class="line">                &lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span="4"&gt;</span><br><span class="line">                    &lt;el-button type="primary" @click="addDialogVisible = true"&gt;添加用户&lt;/el-button&gt;</span><br><span class="line">                &lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- </span><br><span class="line">                用户列表区域</span><br><span class="line">                border - 表格样式</span><br><span class="line">                stripe - 表格条纹</span><br><span class="line">             --&gt;</span><br><span class="line">            &lt;el-table :data="userList" border stripe&gt;</span><br><span class="line">                &lt;el-table-column type="index"&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop="username" label="姓名"&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop="email" label="邮箱"&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop="mobile" label="电话"&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop="role_name" label="角色"&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column label="状态"&gt;</span><br><span class="line">                    &lt;template v-slot="scope"&gt;</span><br><span class="line">                        &lt;!-- {{ scope.row }} --&gt;</span><br><span class="line">                        &lt;el-switch v-model="scope.row.mg_state" @change="userStateChanged(scope.row)"&gt;&lt;/el-switch&gt;</span><br><span class="line">                    &lt;/template&gt;</span><br><span class="line">                &lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column label="操作" width="180px"&gt;</span><br><span class="line">                    &lt;template&gt;</span><br><span class="line">                        &lt;!-- 修改按钮 --&gt;</span><br><span class="line">                        &lt;el-tooltip class="item" effect="dark" content="修改角色" placement="top" :enterable="false"&gt;</span><br><span class="line">                            &lt;el-button type="primary" icon="el-icon-edit" size="mini"&gt;&lt;/el-button&gt;</span><br><span class="line">                        &lt;/el-tooltip&gt;</span><br><span class="line">                        &lt;!-- 删除按钮 --&gt;</span><br><span class="line">                        &lt;el-tooltip class="item" effect="dark" content="删除角色" placement="top" :enterable="false"&gt;</span><br><span class="line">                            &lt;el-button type="danger" icon="el-icon-delete" size="mini"&gt;&lt;/el-button&gt;</span><br><span class="line">                        &lt;/el-tooltip&gt;</span><br><span class="line">                        &lt;!-- 分配角色按钮 --&gt;</span><br><span class="line">                        &lt;el-tooltip class="item" effect="dark" content="分配角色" placement="top" :enterable="false"&gt;</span><br><span class="line">                            &lt;el-button type="warning" icon="el-icon-setting" size="mini"&gt;&lt;/el-button&gt;</span><br><span class="line">                        &lt;/el-tooltip&gt;  </span><br><span class="line">                    &lt;/template&gt;</span><br><span class="line">                &lt;/el-table-column&gt;</span><br><span class="line">            &lt;/el-table&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- </span><br><span class="line">                分页区域</span><br><span class="line">                @size-change - 选择页数的列表发生切换，返回最新的一页显示多少条</span><br><span class="line">                @current-change - 页码值发生切换，返回最新的页数</span><br><span class="line">                :current-page - 当前显示的是第几页的数据</span><br><span class="line">                :page-sizes - 选择页数的下拉列表</span><br><span class="line">                :page-size - 每页显示多少条数据</span><br><span class="line">                layout - 需要展示的功能组件</span><br><span class="line">                :total - 总条数(目前有 bug ,只能写成固定的数字才能正常显示)</span><br><span class="line">             --&gt;</span><br><span class="line">            &lt;el-pagination</span><br><span class="line">                @size-change="handleSizeChange"</span><br><span class="line">                @current-change="handleCurrentChange"</span><br><span class="line">                :current-page="queryInfo.pagenum"</span><br><span class="line">                :page-sizes="[1, 2, 5, 10]"</span><br><span class="line">                :page-size="queryInfo.pagesize"</span><br><span class="line">                layout="total, sizes, prev, pager, next, jumper"</span><br><span class="line">                :total="4"&gt;</span><br><span class="line">            &lt;/el-pagination&gt;</span><br><span class="line">        &lt;/el-card&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- </span><br><span class="line">            添加用户Dialog对话框</span><br><span class="line">            :visible.sync - 控制添加对话框的显示与隐藏</span><br><span class="line">            --&gt;</span><br><span class="line">        &lt;el-dialog</span><br><span class="line">            title="提示"</span><br><span class="line">            :visible.sync="addDialogVisible"</span><br><span class="line">            width="50%"</span><br><span class="line">            @close="addDialogClosed"</span><br><span class="line">            &gt;</span><br><span class="line">            &lt;!-- 内容主体区域 --&gt;</span><br><span class="line">            &lt;el-form ref="addFormRef" :model="addForm" :rules="addFormRules" label-width="70px"&gt;</span><br><span class="line">                &lt;el-form-item label="用户名" prop="username"&gt;</span><br><span class="line">                    &lt;el-input v-model="addForm.username"&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">                &lt;el-form-item label="密码" prop="password"&gt;</span><br><span class="line">                    &lt;el-input type="password" v-model="addForm.password"&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">                &lt;el-form-item label="邮箱" prop="email"&gt;</span><br><span class="line">                    &lt;el-input type="email" v-model="addForm.email"&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">                &lt;el-form-item label="手机" prop="mobile"&gt;</span><br><span class="line">                    &lt;el-input v-model="addForm.mobile"&gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">            &lt;/el-form&gt;</span><br><span class="line">            &lt;!-- 底部区域 --&gt;</span><br><span class="line">            &lt;span slot="footer" class="dialog-footer"&gt;</span><br><span class="line">                &lt;el-button @click="addDialogVisible = false"&gt;取 消&lt;/el-button&gt;</span><br><span class="line">                &lt;el-button type="primary" @click="addDialogVisible = false"&gt;确 定&lt;/el-button&gt;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">        &lt;/el-dialog&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">    data(){</span><br><span class="line">        // 验证邮箱的规则</span><br><span class="line">        var checkEmail = (rule, value, cb) =&gt; {</span><br><span class="line">            // 验证邮箱的正则表达式</span><br><span class="line">            const regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-])+/</span><br><span class="line"></span><br><span class="line">            if(regEmail.test(value)){</span><br><span class="line">                // 合法的邮箱</span><br><span class="line">                return cb()</span><br><span class="line">            }</span><br><span class="line">            cb(new Error("请输入合法的邮箱"))</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        // 验证手机号的规则</span><br><span class="line">        var checkMobile = (rule, value, cb) =&gt; {</span><br><span class="line">            // 验证手机号的正则表达式</span><br><span class="line">            const regMobile = /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/</span><br><span class="line"></span><br><span class="line">            if(regMobile.test(value)){</span><br><span class="line">                // 合法的邮箱</span><br><span class="line">                return cb()</span><br><span class="line">            }</span><br><span class="line">            cb(new Error("请输入合法的手机号"))</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        return {</span><br><span class="line">            // 获取用户列表的参数对象</span><br><span class="line">            queryInfo: {</span><br><span class="line">                query: "",</span><br><span class="line">                // 当前的页数</span><br><span class="line">                pagenum: 1,</span><br><span class="line">                // 当前每页显示多少条数据</span><br><span class="line">                pagesize: 2</span><br><span class="line">            },</span><br><span class="line">            userList: [],</span><br><span class="line">            total: 0,</span><br><span class="line">            // 控制添加用户对话框的显示与隐藏</span><br><span class="line">            addDialogVisible: false,</span><br><span class="line">            // 添加用户的表单数据</span><br><span class="line">            addForm: {</span><br><span class="line">                username: "",</span><br><span class="line">                password: "",</span><br><span class="line">                email: "",</span><br><span class="line">                mobile: ""</span><br><span class="line">            },</span><br><span class="line">            // 添加表单的验证规则对象</span><br><span class="line">            addFormRules: {</span><br><span class="line">                username: [</span><br><span class="line">                    { required: true, message: '请输入用户名', trigger: 'blur' },</span><br><span class="line">                    { min: 3, max: 10, message: '长度在 3 到 10 个字符', trigger: 'blur' }</span><br><span class="line">                ],</span><br><span class="line">                password: [</span><br><span class="line">                    { required: true, message: '请输入密码', trigger: 'blur' },</span><br><span class="line">                    { min: 3, max: 15, message: '长度在 3 到 15 个字符', trigger: 'blur' }</span><br><span class="line">                ],</span><br><span class="line">                email: [</span><br><span class="line">                    { required: true, message: '请输入邮箱', trigger: 'blur' },</span><br><span class="line">                    { validator: checkEmail, trigger: 'blur' }</span><br><span class="line">                ],</span><br><span class="line">                mobile: [</span><br><span class="line">                    { required: true, message: '请输入手机号', trigger: 'blur' },</span><br><span class="line">                    { validator: checkMobile, trigger: 'blur' }</span><br><span class="line">                ]</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    created(){</span><br><span class="line">        this.getUserList()</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        async getUserList(){</span><br><span class="line">            const {data: res} = await this.$http.get("users", {params: this.queryInfo})</span><br><span class="line">            // console.log(res);</span><br><span class="line">            if(res.meta.status !== 200) return this.$message.error(res.meta.msg)</span><br><span class="line">            this.userList = res.data.users</span><br><span class="line">            this.total = res.total</span><br><span class="line">        },</span><br><span class="line">        // 监听 pagesize 改变的事件</span><br><span class="line">        handleSizeChange(newSize){</span><br><span class="line">            console.log(newSize);</span><br><span class="line">            this.queryInfo.pagesize = newSize</span><br><span class="line">            // pagesize 发生变化需要重新发起 axios 请求来展示数据</span><br><span class="line">            this.getUserList()</span><br><span class="line">        },</span><br><span class="line">        // 监听 页码值 改变的事件</span><br><span class="line">        handleCurrentChange(newPage){</span><br><span class="line">            console.log(newPage);</span><br><span class="line">            this.queryInfo.pagenum = newPage</span><br><span class="line">            this.getUserList()</span><br><span class="line">        },</span><br><span class="line">        async userStateChanged(userinfo){</span><br><span class="line">            // console.log("userinfo:",userinfo);</span><br><span class="line">            const {data: res} = await this.$http.put(`users/${userinfo.id}/state/${userinfo.mg_state}`)</span><br><span class="line">            console.log(res);</span><br><span class="line">            if(res.meta.status !== 200){</span><br><span class="line">                userinfo.mg_state = !userinfo.mg_state</span><br><span class="line">                return this.$message.error("更新用户状态失败！")</span><br><span class="line">            }</span><br><span class="line">            this.$message.success("更新用户状态成功！")</span><br><span class="line">        },</span><br><span class="line">        addDialogClosed(){</span><br><span class="line">            this.$refs.addFormRef.resetFields()</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="less" scope&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="权限管理"><a class="markdownIt-Anchor" href="#权限管理"></a> 权限管理</h2><h3 id="权限管理业务分析"><a class="markdownIt-Anchor" href="#权限管理业务分析"></a> 权限管理业务分析</h3><p>通过权限管理模块控制不同的用户可以进行哪些操作，具体可以通过角色的方式进行控制，即每个用户分配一个特定的角色，角色包括不同的功能权限。</p><p>比如说：王者荣耀，你充钱的玩家有皮肤，不充钱的玩家没有皮肤…</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@a887dba8ce159d03e5cd8dc38e782653a1e34ab8/2020/11/07/bb034df527e82853a8b3236b1d33f565.png" alt="image-20201107102843577"></p><h3 id="如何实现一个好看的3级-ui-结构"><a class="markdownIt-Anchor" href="#如何实现一个好看的3级-ui-结构"></a> 如何实现一个好看的3级 UI 结构</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 角色列表区域 --&gt;</span><br><span class="line">&lt;el-table</span><br><span class="line">   :data="rolesList"</span><br><span class="line">   width="100%"</span><br><span class="line">   border</span><br><span class="line">   stripe</span><br><span class="line">   &gt;</span><br><span class="line">   &lt;!-- </span><br><span class="line">       展开列</span><br><span class="line">       type="expand" - 开启展开列功能</span><br><span class="line">   --&gt;</span><br><span class="line">   &lt;el-table-column type="expand"&gt;</span><br><span class="line">       &lt;template v-slot="scope"&gt;</span><br><span class="line">           &lt;el-row v-for="(item1, i1) in scope.row.children" :key="item1.id" :class="['bdbottom', i1 === 0 ? 'bdtop' : 'bdbottom', 'vcenter']"&gt;</span><br><span class="line">               &lt;!-- 渲染一级权限 --&gt;</span><br><span class="line">               &lt;el-col :span="5"&gt;</span><br><span class="line">                   &lt;el-tag&gt;{{ item1.authName }}&lt;/el-tag&gt;</span><br><span class="line">                   &lt;i class="el-icon-caret-right"&gt;&lt;/i&gt;</span><br><span class="line">               &lt;/el-col&gt;</span><br><span class="line">               &lt;!-- 渲染二级权限 --&gt;</span><br><span class="line">               &lt;el-col :span="19"&gt;</span><br><span class="line">                   &lt;el-row v-for="(item2, i2) in item1.children" :key="item2.id" :class="[i2 === 0 ? '' : 'bdtop', 'vcenter']"&gt;</span><br><span class="line">                       &lt;el-col :span="6"&gt;</span><br><span class="line">                           &lt;el-tag type="success"&gt;{{ item2.authName }}&lt;/el-tag&gt;</span><br><span class="line">                           &lt;i class="el-icon-caret-right"&gt;&lt;/i&gt;</span><br><span class="line">                       &lt;/el-col&gt;</span><br><span class="line">                       &lt;!-- 渲染三级权限 --&gt;</span><br><span class="line">                       &lt;el-col :span="18"&gt;</span><br><span class="line">                           &lt;el-tag type="warning" v-for="(item3, i3) in item2.children" :key="item3.id"&gt;{{ item3.authName }}&lt;/el-tag&gt;</span><br><span class="line">                       &lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">               &lt;/el-col&gt;</span><br><span class="line">           &lt;/el-row&gt;</span><br><span class="line">       &lt;/template&gt;</span><br><span class="line">   &lt;/el-table-column&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="../upload/image-20201107144025650.png" alt="image-20201107144025650"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack使用文档</title>
    <link href="https://extheor.club/posts/ebe408b3/index.html"/>
    <id>https://extheor.club/posts/ebe408b3/index.html</id>
    <published>2020-11-07T15:39:54.566Z</published>
    <updated>2020-11-07T15:52:21.822Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="webpack使用文档"><a class="markdownIt-Anchor" href="#webpack使用文档"></a> webpack使用文档</h1><h2 id="当前-web-开发面临的困境"><a class="markdownIt-Anchor" href="#当前-web-开发面临的困境"></a> 当前 Web 开发面临的困境</h2><ul><li>文件依赖关系错综复杂</li><li>静态资源请求效率低</li><li>模块化支持不友好</li><li>浏览器对高级 Javascript 特性兼容程度较低</li><li>etc…</li></ul><h2 id="webpack-概述"><a class="markdownIt-Anchor" href="#webpack-概述"></a> webpack 概述</h2><p><strong>webpack</strong>是一个流行的<strong>前端项目构建工具(打包工具)</strong>，可以解决当前web开发中所面临的困境。<br>webpack提供了<strong>友好的模块化支持</strong>，以及<strong>代码压缩混淆</strong>、<strong>处理js兼容问题</strong>、<strong>性能优化</strong>等强大的功能，从而让程序员把工作的重心放到具体的功能实现上，提高了开发效率和项目的可维护性。</p><p>目前绝大多数企业中的前端项目，都是基于webpack进行打包构建的。</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@82a9429a32374d4775d7364af3dc674e50a16440/2020/11/04/5588dc39ae1443d18d673be1a869f80c.png" alt="image-20201104160313773"></p><h2 id="webpack的基本使用"><a class="markdownIt-Anchor" href="#webpack的基本使用"></a> webpack的基本使用</h2><h3 id="1创建列表隔行变色项目"><a class="markdownIt-Anchor" href="#1创建列表隔行变色项目"></a> 1.创建列表隔行变色项目</h3><p>① 新建项目空白目录，并运行 <code>npm init -y</code> 命令，初始化包管理配置文件 package.json</p><p>② 新建 <code>src</code> 源代码目录</p><p>③ 新建src -&gt; <code>index.html</code> 首页</p><p>④ 初始化首页基本的结构</p><p>⑤ 运行 <code>npm install jquery -s</code> 命令，安装 jQuery</p><p>⑥ 通过模块化的形式，实现列表隔行变色效果</p><h3 id="2在项目中安装和配置-webpack"><a class="markdownIt-Anchor" href="#2在项目中安装和配置-webpack"></a> 2.在项目中安装和配置 webpack</h3><p>① 运行 <code>npm install webpack webpack-cli -D</code> 命令，安装 webpack 相关的包</p><p>② 在项目根目录中，创建名为 <code>webpack.config.js</code> 的 webpack配置文件</p><p>③ 在 webpack 的配置文件中，初始化如下基本配置:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports ={</span><br><span class="line">mode : <span class="string">'development'</span> <span class="comment">// mode用来指定构建模式</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>④ 在 package.json 配置文件中的 scripts 节点下，新增dev脚本如下:</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts" : {</span><br><span class="line">"dev" : "webpack" // script节点下的脚本，可以通过 npm run 执行</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>⑤ 在终端中运行 <code>npm run dev</code> 命令，启动 webpack 进行项目打包。</p><h3 id="3配置打包的入口与出口"><a class="markdownIt-Anchor" href="#3配置打包的入口与出口"></a> 3.配置打包的入口与出口</h3><p>webpack 的4.x版本中默认约定:</p><ul><li><p>打包的入口文件为 src -&gt; index.js</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@02955c3a3fe2200668fd23dbcb34147f619d97d3/2020/11/04/09bc28c2d16b1f011358115aceefc2d4.png" alt="image-20201104185937743"></p></li><li><p>打包的输出文件为 dist -&gt; main.js</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f194aeb1c615d5451ff37a3e49df676aef37af7a/2020/11/04/73e6ebfb97f0fd77266976ea3f97e3f9.png" alt="image-20201104190005025"></p></li></ul><p>如果要修改打包的入口与出口，可以在webpack.config.js中新增如下配置信息:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span> ( <span class="string">'path'</span>) <span class="comment">//导入node.js 中专门操作路径的模块module.exports = {</span></span><br><span class="line">    entry: path.join(__dirname, <span class="string">'./src/index.js'</span>), <span class="comment">//打包入口文件的路径</span></span><br><span class="line">    output : {</span><br><span class="line">        path: path.join(__dirname, <span class="string">'./dist'</span>), <span class="comment">//输出文件的存放路径</span></span><br><span class="line">        filename: <span class="string">'bundle.js'</span> <span class="comment">//输出文件的名称</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4配置webpack的自动打包功能"><a class="markdownIt-Anchor" href="#4配置webpack的自动打包功能"></a> 4.配置webpack的自动打包功能</h3><p>① 运行 <code>npm install webpack-dev-server -D</code> 命令，安装支持项目自动打包的工具</p><p>② 修改package.json -&gt; scripts 中的dev命令如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span> : {</span><br><span class="line"><span class="string">"dev"</span> : <span class="string">"webpack-dev-server"</span> <span class="comment">// script 节点下的脚本，可以通过npm run 执行</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>③ 将src -&gt; index.html中，script脚本的引用路径，修改为"/bundle.js"</p><p>④ 运行 <code>npm run dev</code> 命令，重新进行打包</p><blockquote><p>到这一步你可能会报错，可能是 webpack 与 webpack-dev-server 的版本不兼容所导致的，你需要在 package.json 文件中配置以下信息</p></blockquote><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"webpack": "^5.3.2",</span><br><span class="line">"webpack-cli": "^3.3.12",</span><br><span class="line">"webpack-dev-server": "^3.11.0"</span><br></pre></td></tr></tbody></table></figure><blockquote><p>把你的 node_modules 和 package-lock.json 删除，然后运行 <code>npm install</code></p><p>即可正常运行 <code>npm run dev</code></p><p>解决思路：</p><p>可以去你的 node_modules 中找到 webpack-dev-server 目录</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@a4c83f12850a0f427cb104f39096203a548c622f/2020/11/04/95e2d1e21ae4e2d39960fec8a9a884c6.png" alt="image-20201104190233307"></p><p>搜索你的错误信息，找到如下信息，看看兼容 webpack-cli 的什么版本，就改成什么版本，重新安装即可</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@e2158edbcef1f4f40529aad197d3796e90c1171a/2020/11/04/2fe91ba2b0111512cc3cbd350bcfe8f3.png" alt="image-20201104190428662"></p></blockquote><p>⑤ 在浏览器中访问http:// localhost:8080地址，查看自动打包效果</p><h3 id="5配置html-webpack-plugin生成预览页面"><a class="markdownIt-Anchor" href="#5配置html-webpack-plugin生成预览页面"></a> 5.配置html-webpack-plugin生成预览页面</h3><p>① 运行 <code>npm install html-webpack-plugin -D</code> 命令，安装生成预览页面的插件</p><p>②修改 webpack.config.js 文件头部区域，添加如下配置信息:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入生成预览页面的插件，得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> HtmlwebpackPlugin = <span class="built_in">require</span> (<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> HtmlwebpackPlugin ({ <span class="comment">//创建插件的实例对象</span></span><br><span class="line">    template: <span class="string">'./src/index.html'</span>, <span class="comment">//指定要用到的模板文件</span></span><br><span class="line">filename: <span class="string">'index.html'</span> <span class="comment">//指定生成的文件的名称，该文件存在于内存中，在目录中不显示</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>③ 修改 webpack.config.js 文件中向外暴露的配置对象，新增如下配置节点:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">plugins: [ htmlPlugin ] <span class="comment">// plugins 数组是 webpack 打包期间会用到的一些插件列表</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6配置自动打包相关的参数"><a class="markdownIt-Anchor" href="#6配置自动打包相关的参数"></a> 6.配置自动打包相关的参数</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json中的配置</span></span><br><span class="line"><span class="comment">// --open 打包完成后自动打开浏览器页面</span></span><br><span class="line"><span class="comment">// --host 配置工P地址</span></span><br><span class="line"><span class="comment">// --port 配置端口</span></span><br><span class="line">"scripts" : {</span><br><span class="line">"dev" : "webpack-dev-server --open --host 127.0.0.1 --port 8888"</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><h2 id="webpack-中的加载器"><a class="markdownIt-Anchor" href="#webpack-中的加载器"></a> webpack 中的加载器</h2><h3 id="1通过-loader-打包非-js-模块"><a class="markdownIt-Anchor" href="#1通过-loader-打包非-js-模块"></a> 1.通过 loader 打包非 js 模块</h3><p>在实际开发过程中，webpack 默认只能打包处理以 .js 后缀名结尾的模块，其他<strong>非 .js 后缀名结尾</strong>的模块，webpack 默认处理不了，<strong>需要调用loader加载器才可以正常打包</strong>，否则会报错!</p><p>loader加载器可以协助webpack 打包处理特定的文件模块，比如:</p><ul><li>less-loader 可以打包处理 .less 相关的文件</li><li>sass-loader 可以打包处理 .scss 相关的文件</li><li>url-loader 可以打包处理 css 中与 url 路径相关的文件</li></ul><h3 id="2loader-的调用过程"><a class="markdownIt-Anchor" href="#2loader-的调用过程"></a> 2.loader 的调用过程</h3><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@9598b788e2b4986f323bbb905048a57ca5854bc0/2020/11/04/ed79d6e5a7cc7ec07c162989e0e1fe3a.png" alt="image-20201104173916879"></p><h2 id="webpack-中加载器的基本使用"><a class="markdownIt-Anchor" href="#webpack-中加载器的基本使用"></a> webpack 中加载器的基本使用</h2><h3 id="1打包处理-css-文件"><a class="markdownIt-Anchor" href="#1打包处理-css-文件"></a> 1.打包处理 css 文件</h3><p>① 运行 <code>npm i style-loader css-loader -D</code> 命令，安装处理 css 文件的 loader</p><p>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有第三方文件模块的匹配规则</span></span><br><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">    { <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>] }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中, test 表示匹配的文件类型，use 表示对应要调用的 loader</p><h3 id="2打包处理-less-文件"><a class="markdownIt-Anchor" href="#2打包处理-less-文件"></a> 2.打包处理 less 文件</h3><p>① 运行 <code>npm i less-loader less -D</code> 命令</p><p>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有第三方文件模块的匹配规则</span></span><br><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">    { <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader/'</span>] }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3打包处理-scss-文件"><a class="markdownIt-Anchor" href="#3打包处理-scss-文件"></a> 3.打包处理 scss 文件</h3><p>① 运行 <code>npm i sass-loader node-sass -D</code> 命令</p><p>② 在 webpack.config.js 的module -&gt; rules 数组中，添加 loader 规则如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有第三方文件模块的匹配规则</span></span><br><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">        { <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,<span class="attr">use</span>: [<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'sass-loader'</span>] }</span><br><span class="line">    ] </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4配置postcss自动添加css的兼容前缀"><a class="markdownIt-Anchor" href="#4配置postcss自动添加css的兼容前缀"></a> 4.配置postCSS自动添加css的兼容前缀</h3><p>① 运行 <code>npm i postcss-loader autoprefixer -D</code> 命令</p><p>② 在项目根目录中创建 postcss 的配置文件 <code>postcss.config.js</code> ，并初始化如下配置;</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span> (<span class="string">'autoprefixer'</span>) <span class="comment">// 导入自动添加前缀的插件</span></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">plugins: [ autoprefixer ] <span class="comment">//挂载插件</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在 webpack.config.js 的module -&gt; rules 数组中，修改css的 loader规则如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">    { <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>,<span class="string">'postcss-loader'</span>] }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5打包样式表中的图片和字体文件"><a class="markdownIt-Anchor" href="#5打包样式表中的图片和字体文件"></a> 5.打包样式表中的图片和字体文件</h3><p>① 运行 <code>npm i url-loader file-loader -D</code> 命令</p><p>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加loader规则如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">    rules: [</span><br><span class="line">    {</span><br><span class="line">            test: <span class="regexp">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span> ,</span><br><span class="line">        use: <span class="string">'url-loader?limit=16940'</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中 ? 之后的是 loader 的参数项。</p><p>limit 用来指定图片的大小，单位是字节（byte），只要小余 limit 大小的图片，才会被转为 base64 图片</p><h3 id="6打包处理js-文件中的高级语法"><a class="markdownIt-Anchor" href="#6打包处理js-文件中的高级语法"></a> 6.打包处理js 文件中的高级语法</h3><p>① 安装babel 转换器相关的包: <code>npm i babel-loader @babel/core @babel/runtime -D</code></p><p>② 安装babel语法插件相关的包: <code>npm i @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties -D</code></p><p>③ 在项目根目录中，创建 babel 配置文件 <code>babel.config.js</code> 并初始化基本配置如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    presets: [ <span class="string">"@babel/preset-env"</span> ],</span><br><span class="line">    plugins: [ <span class="string">'@babel/plugin-transform-runtime'</span>,<span class="string">'@babel/plugin-proposal-class-properties'</span> ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>④ 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// exclude 为排除项，表示 babel-loader不需要处理 node_modules 中的 js 文件</span></span><br><span class="line">{ <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: <span class="string">"babel-loader"</span>,<span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> }</span><br></pre></td></tr></tbody></table></figure><h2 id="vue单文件组件"><a class="markdownIt-Anchor" href="#vue单文件组件"></a> Vue单文件组件</h2><h3 id="传统组件的问题和解决方案"><a class="markdownIt-Anchor" href="#传统组件的问题和解决方案"></a> 传统组件的问题和解决方案</h3><h4 id="1问题"><a class="markdownIt-Anchor" href="#1问题"></a> 1.问题</h4><ol><li>全局定义的组件必须保证组件的名称不重复</li><li>字符串模板缺乏语法高亮，在HTML有多行的时候，需要用到丑陋的 \</li><li>不支持CSS意味着当HTML和JavaScript组件化时，CSS明显被遗漏</li><li>没有构建步骤限制，只能使用HTML和ES5 JavaScript,而不能使用预处理器(如:Babel)</li></ol><h4 id="2解决方案"><a class="markdownIt-Anchor" href="#2解决方案"></a> 2.解决方案</h4><p>针对传统组件的问题，Vue提供了一个解决方案 —— 使用 Vue 单文件组件。</p><h3 id="vue单文件组件的基本用法"><a class="markdownIt-Anchor" href="#vue单文件组件的基本用法"></a> Vue单文件组件的基本用法</h3><h4 id="单文件组件的组成结构"><a class="markdownIt-Anchor" href="#单文件组件的组成结构"></a> 单文件组件的组成结构</h4><ul><li>template组件的模板区域</li><li>script业务逻辑区域</li><li>style样式区域</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--这里用于定义vue组件的模板内容--&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 这里用于定义vue组件的业务逻辑</span><br><span class="line">    export default {</span><br><span class="line">    data(){ return {} },//私有数据</span><br><span class="line">        methods: {} // 处理函数</span><br><span class="line">    // ...其它业务逻辑</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* 这里用于定义组件的样式 */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="webpack-中配置-vue-组件的加载器"><a class="markdownIt-Anchor" href="#webpack-中配置-vue-组件的加载器"></a> webpack 中配置 vue 组件的加载器</h3><p>① 运行 <code>npm i vue-loader vue-template-compiler -D</code> 命令</p><p>② 在 webpack.config.js 配置文件中，添加 vue-loader 的配置项如下:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">rules: [</span><br><span class="line"><span class="comment">// ..．其它规则</span></span><br><span class="line">{ <span class="attr">test</span>: <span class="regexp">/\.vue$/</span> , <span class="attr">loader</span>: <span class="string">'vue-loader'</span>}</span><br><span class="line">        ]</span><br><span class="line">},</span><br><span class="line">plugins: [</span><br><span class="line"><span class="comment">// ..．其它插件</span></span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin() <span class="comment">//请确保引入这个插件!</span></span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="在-webpack-项目中使用-vue"><a class="markdownIt-Anchor" href="#在-webpack-项目中使用-vue"></a> 在 webpack 项目中使用 vue</h3><p>① 运行 <code>npm i vue -S</code> 安装 vue</p><p>② 在src -&gt; index.js 入口文件中，通过 <code>import Vue from 'vue'</code> 来导入 vue 构造函数</p><p>③ 创建 vue 的实例对象，并指定要控制的el区域</p><p>④ 通过 render 函数渲染 App 根组件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1．导入vue构造函数</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">// 2．导入App根组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/App.vue'</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line"><span class="comment">// 3．指定vm实例要控制的页面区域</span></span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line"><span class="comment">// 4．通过render函数,把指定的组件渲染到 el 区域中</span></span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件传值</title>
    <link href="https://extheor.club/posts/45fe8d36/index.html"/>
    <id>https://extheor.club/posts/45fe8d36/index.html</id>
    <published>2020-11-07T15:39:54.557Z</published>
    <updated>2020-11-07T15:52:21.814Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue组件传值"><a class="markdownIt-Anchor" href="#vue组件传值"></a> Vue组件传值</h1><h2 id="什么是组件"><a class="markdownIt-Anchor" href="#什么是组件"></a> 什么是组件？</h2><p>这里有一个 Vue 组件的示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line">Vue.component(<span class="string">'button-counter'</span>, {</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="count++"&gt;You clicked me {{ count }} times.&lt;/button&gt;'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 <code>button-counter</code>。我们可以在一个通过 <code>new Vue</code> 创建的 Vue 根实例中，把这个组件作为自定义元素来使用：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({ </span><br><span class="line">el: <span class="string">'#app'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>因为组件是可复用的 Vue 实例，所以它们与 <code>new Vue</code> 接收相同的选项，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p><h2 id="通过-prop-向子组件传递数据"><a class="markdownIt-Anchor" href="#通过-prop-向子组件传递数据"></a> 通过 Prop 向子组件传递数据</h2><p>Prop 是你可以在组件上注册的一些自定义 attribute。当一个值传递给一个 prop attribute 的时候，它就变成了那个组件实例的一个 property。为了给博文组件传递一个标题，我们可以用一个 <code>props</code> 选项将其包含在该组件可接受的 prop 列表中：</p><p>示例：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 把item的值赋值给product变量(props中的值),向子组件传递数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">product-com</span> <span class="attr">v-for</span>=<span class="string">"item,index in productList"</span> <span class="attr">:product</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">product-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"product-com"</span>,{</span><br><span class="line">    <span class="comment">// 通过 Prop 向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"product"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;产品名称：{{ product.title }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;h4&gt;产品描述：{{ product.brief }}&lt;/h4&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;产品价格：{{ product.prize }}&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        productList: [</span><br><span class="line">            {</span><br><span class="line">                title: <span class="string">"产品1"</span>,</span><br><span class="line">                brief: <span class="string">"产品描述1"</span>,</span><br><span class="line">                prize: <span class="string">"价格1"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                title: <span class="string">"产品2"</span>,</span><br><span class="line">                brief: <span class="string">"产品描述2"</span>,</span><br><span class="line">                prize: <span class="string">"价格2"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                title: <span class="string">"产品3"</span>,</span><br><span class="line">                brief: <span class="string">"产品描述3"</span>,</span><br><span class="line">                prize: <span class="string">"价格3"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                title: <span class="string">"产品4"</span>,</span><br><span class="line">                brief: <span class="string">"产品描述4"</span>,</span><br><span class="line">                prize: <span class="string">"价格4"</span></span><br><span class="line">            },</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>效果图：</p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/组件传值.png"><h2 id="通过-emit-向父组件传递数据"><a class="markdownIt-Anchor" href="#通过-emit-向父组件传递数据"></a> 通过 $emit 向父组件传递数据</h2><p>语法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$emit( eventName, […args] )</span><br></pre></td></tr></tbody></table></figure><ul><li><p>vm – Vue的实例化对象</p></li><li><p>$emit –  Vue实例化对象中的一个方法</p></li><li><p>eventName – 传递给父组件的事件名称</p></li><li><p>args – 需要传递给父组件的数据内容</p></li></ul><p>示例：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span> <span class="attr">v-for</span>=<span class="string">"item,index in schoolList"</span> @<span class="attr">cschool</span>=<span class="string">"changeEvent"</span> <span class="attr">:index</span>=<span class="string">"index"</span> <span class="attr">:schoolname</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>选中的学校是：{{ chooseSchool }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"school"</span>,{</span><br><span class="line">    <span class="comment">// 通过prop父组件向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"index"</span>,<span class="string">"schoolname"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;{{ index }}--学校名称：{{ schoolname }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;button @click="chooseEvent(schoolname)"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    methods: {</span><br><span class="line">        chooseEvent: <span class="function"><span class="keyword">function</span>(<span class="params">schoolname</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(schoolname);</span></span><br><span class="line">            <span class="comment">// 通过$emit给父组件传递数据</span></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"cschool"</span>,schoolname);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        schoolList: [<span class="string">"清华"</span>,<span class="string">"北大"</span>,<span class="string">"浙大"</span>],</span><br><span class="line">        chooseSchool: <span class="string">""</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        changeEvent: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(data);</span></span><br><span class="line">            <span class="keyword">this</span>.chooseSchool = data;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>子组件会先接收到父组件传递过来的数据，进行页面挂载(渲染)，当点击子组件中的button按钮时，会触发 <code>chooseEvent</code> 事件，这个事件会通过 <code>$emit</code> 实例方法把数据传递给父组件，父组件使用 <code>$emit</code> 自定义的事件名，所以当我点击子组件的button按钮时，父组件的 <code>$emit</code> 自定义的事件会触发，然后就可以直接更新数据了</p></blockquote><h3 id="组件传值的奇技淫巧"><a class="markdownIt-Anchor" href="#组件传值的奇技淫巧"></a> 组件传值的奇技淫巧</h3><blockquote><p>父元素方法传值给子元素</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">因为父元素的方法可以直接修改父元素的数据</span></span><br><span class="line"><span class="comment">所以将父元素的方法传递给子元素</span></span><br><span class="line"><span class="comment">然后由子元素进行调用，从而修改父元素的数据</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span> <span class="attr">v-for</span>=<span class="string">"item,index in schoolList"</span> <span class="attr">:action</span>=<span class="string">"changeEvent"</span> <span class="attr">:index</span>=<span class="string">"index"</span> <span class="attr">:schoolname</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>选中的学校是：{{ chooseSchool }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"school"</span>,{</span><br><span class="line">    <span class="comment">// 通过prop父组件向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"index"</span>,<span class="string">"schoolname"</span>,<span class="string">"action"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;{{ index }}--学校名称：{{ schoolname }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;button @click="chooseEvent(schoolname)"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    methods: {</span><br><span class="line">        chooseEvent: <span class="function"><span class="keyword">function</span>(<span class="params">schoolname</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(schoolname);</span></span><br><span class="line">            <span class="comment">// 这里只是使用父组件的changeEvent方法而已，并没有改变changeEvent方法的this指向</span></span><br><span class="line">            <span class="keyword">this</span>.action(schoolname)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        schoolList: [<span class="string">"清华"</span>,<span class="string">"北大"</span>,<span class="string">"浙大"</span>],</span><br><span class="line">        chooseSchool: <span class="string">""</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        changeEvent: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(data);</span></span><br><span class="line">            <span class="keyword">this</span>.chooseSchool = data;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>通过父元素数据直接修改</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"school"</span>,{</span><br><span class="line">    <span class="comment">// 通过prop父组件向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"index"</span>,<span class="string">"schoolname"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;{{ index }}--学校名称：{{ schoolname }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;button @click="chooseEvent(schoolname)"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    methods: {</span><br><span class="line">        chooseEvent: <span class="function"><span class="keyword">function</span>(<span class="params">schoolname</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(schoolname);</span></span><br><span class="line">            <span class="comment">// console.log(this);</span></span><br><span class="line">            <span class="comment">// 组件可以通过$parent属性找到父元素的Vue对象</span></span><br><span class="line">            <span class="keyword">this</span>.$parent.changeEvent(schoolname)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>子元素通过调用$parent的方法修改父元素的内容</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"school"</span>,{</span><br><span class="line">    <span class="comment">// 通过prop父组件向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"index"</span>,<span class="string">"schoolname"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;{{ index }}--学校名称：{{ schoolname }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click="$parent.changeEvent(schoolname)"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>子元素传值父元素</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"school"</span>,{</span><br><span class="line">    <span class="comment">// 通过prop父组件向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"index"</span>,<span class="string">"schoolname"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;{{ index }}--学校名称：{{ schoolname }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;button @click="$parent.chooseSchool = schoolname"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>$root</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"school"</span>,{</span><br><span class="line">    <span class="comment">// 通过prop父组件向子组件传递数据</span></span><br><span class="line">    props: [<span class="string">"index"</span>,<span class="string">"schoolname"</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;{{ index }}--学校名称：{{ schoolname }}&lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;button @click="$root.changeEvent(schoolname)"&gt;选择学校&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue自定义指令</title>
    <link href="https://extheor.club/posts/8833154b/index.html"/>
    <id>https://extheor.club/posts/8833154b/index.html</id>
    <published>2020-11-07T15:39:54.543Z</published>
    <updated>2020-11-07T15:52:21.814Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue自定义指令"><a class="markdownIt-Anchor" href="#vue自定义指令"></a> Vue自定义指令</h1><h2 id="不带参数的自定义指令"><a class="markdownIt-Anchor" href="#不带参数的自定义指令"></a> 不带参数的自定义指令</h2><ul><li><p>为何需要自定义指令？</p><p>内置指令不满足需求</p></li><li><p>自定义指令的语法规则（获取元素焦点）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'focus'</span>, {</span><br><span class="line">    inserted: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>{</span><br><span class="line">        <span class="comment">// el 表示指令所绑定的元素</span></span><br><span class="line">        <span class="comment">// 获取元素的焦点</span></span><br><span class="line">        el.focus();</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {},</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：Vue实例对象必须写在自定义指令之后，否则会报错</p></blockquote></li><li><p>自定义指令用法</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-focus</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="带参数的自定义指令"><a class="markdownIt-Anchor" href="#带参数的自定义指令"></a> 带参数的自定义指令</h2><ul><li><p>改变元素背景颜色</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'color'</span>, {</span><br><span class="line">    inserted: <span class="function"><span class="keyword">function</span>(<span class="params">el, binding</span>)</span>{</span><br><span class="line">        <span class="comment">// el 表示指令所绑定的元素</span></span><br><span class="line">        <span class="comment">// console.log(binding.value.color);</span></span><br><span class="line">        el.style.backgroundColor = binding.value.color;</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        msg: {</span><br><span class="line">            color: <span class="string">"yellow"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li><li><p>指令的用法</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-color</span>=<span class="string">"msg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="局部指令"><a class="markdownIt-Anchor" href="#局部指令"></a> 局部指令</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">directives: {</span><br><span class="line">    <span class="string">"color"</span>: {</span><br><span class="line">        inserted: <span class="function"><span class="keyword">function</span>(<span class="params">el, binding</span>)</span>{</span><br><span class="line">            <span class="comment">// el 表示指令所绑定的元素</span></span><br><span class="line">            <span class="comment">// console.log(binding.value.color);</span></span><br><span class="line">            el.style.backgroundColor = binding.value.color;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue在组件上使用v-model</title>
    <link href="https://extheor.club/posts/585ba415/index.html"/>
    <id>https://extheor.club/posts/585ba415/index.html</id>
    <published>2020-11-07T15:39:54.530Z</published>
    <updated>2020-11-07T15:52:21.805Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue在组件上使用v-model"><a class="markdownIt-Anchor" href="#vue在组件上使用v-model"></a> Vue在组件上使用v-model</h1><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。记住：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>等价于：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">input</span>=<span class="string">"searchText = $event.target.value"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当用在组件上时，<code>v-model</code> 则会这样：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">input</span>=<span class="string">"searchText = $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>上面用 <code>$event</code> 接收子组件用 <code>$emit()</code> 向上传递过来的数据</p></blockquote><p>为了让它正常工作，这个组件内的 <code>&lt;input&gt;</code> 必须：</p><ul><li>将其 <code>value</code> attribute 绑定到一个名叫 <code>value</code> 的 prop 上</li><li>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>input</code> 事件抛出</li></ul><p>写成代码之后是这样的：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'custom-input'</span>, {</span><br><span class="line">  props: [<span class="string">'value'</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      :value="value"</span></span><br><span class="line"><span class="string">      @input="$emit('input', $event.target.value)"</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>现在 <code>v-model</code> 就应该可以在这个组件上完美地工作起来了：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>以下是更简化代码，我发现不用写 :value这个属性也能正常的实现数据的双向绑定</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input-com</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">input-com</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ username }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"input-com"</span>,{</span><br><span class="line">    <span class="comment">// 当用户输入数据的时候把value值传递给父组件</span></span><br><span class="line">    template: <span class="string">`&lt;input @input="$emit('input',$event.target.value)" /&gt;`</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        username: <span class="string">""</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue -- 指令【学习笔记】（持续更新）</title>
    <link href="https://extheor.club/posts/54fbed4a/index.html"/>
    <id>https://extheor.club/posts/54fbed4a/index.html</id>
    <published>2020-11-07T15:39:54.483Z</published>
    <updated>2020-11-07T15:52:21.806Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h2 id="vue-指令学习笔记持续更新"><a class="markdownIt-Anchor" href="#vue-指令学习笔记持续更新"></a> Vue – 指令【学习笔记】（持续更新）</h2><h2 id="v-show"><a class="markdownIt-Anchor" href="#v-show"></a> v-show</h2><blockquote><p>注意，<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持  <code>v-else</code>。</p><p>带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS property <code>display</code>。</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"shouye"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"dongman"</span>&gt;</span>动漫<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"yinyue"</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        shouye: <span class="literal">true</span>,</span><br><span class="line">        dongman: <span class="literal">false</span>,</span><br><span class="line">        yinyue: <span class="literal">false</span>,</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>上面的执行结果只会展示首页</p></blockquote><h2 id="v-onclick-简写-click"><a class="markdownIt-Anchor" href="#v-onclick-简写-click"></a> v-on:click 简写 @click</h2><blockquote><p>用法一：直接在双引号中写函数名</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"shouye"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"dongman"</span>&gt;</span>动漫<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"yinyue"</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意函数名不能和变量名重名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"shouYe"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"dongMan"</span>&gt;</span>动漫<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"yinYue"</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        shouye: <span class="literal">true</span>,</span><br><span class="line">        dongman: <span class="literal">false</span>,</span><br><span class="line">        yinyue: <span class="literal">false</span>,</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        shouYe: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(e);</span></span><br><span class="line">            <span class="keyword">this</span>.shouye = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.dongman = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.yinyue = <span class="literal">false</span>;</span><br><span class="line">        },</span><br><span class="line">        dongMan: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">            <span class="keyword">this</span>.dongman = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.shouye = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.yinyue = <span class="literal">false</span>;</span><br><span class="line">        },</span><br><span class="line">        yinYue: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{</span><br><span class="line">            <span class="keyword">this</span>.yinyue = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.shouye = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.dongman = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>按钮点击页面跳转</p></blockquote><blockquote><p>用法二：在双引号中写表达式</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>点击次数：{{ count }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以使用表达式完成事件操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"count++"</span>&gt;</span>点击加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>用法三：事件传参</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"start,index in starts"</span> @<span class="attr">click</span>=<span class="string">"clickEvent(index,start,$event)"</span>&gt;</span>索引值：{{ index }}---内容：{{ start }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        starts: [<span class="string">"蔡徐坤"</span>,<span class="string">"范冰冰"</span>,<span class="string">"李晨"</span>]</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        clickEvent: <span class="function"><span class="keyword">function</span>(<span class="params">index,start,event</span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(index,start);</span><br><span class="line">            <span class="built_in">console</span>.log(event);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：要想既在函数中传参又想要得到 event, 则可以在传参时使用 <code>$evnet</code></p></blockquote><blockquote><p>用法四：事件修饰符</p></blockquote><ul><li>stop修饰符，阻止冒泡事件向上传递</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- stop修饰符，阻止冒泡事件向上传递 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btnParent"</span> @<span class="attr">click</span>=<span class="string">"clickParent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"clickEvent"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        clickEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"clickEvent"</span>);</span><br><span class="line">        },</span><br><span class="line">        clickParent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"clickParent"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>clickEvent</p></blockquote><ul><li>prevent修饰符，阻止默认事件</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 阻止默认事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> @<span class="attr">click.prevent</span>=<span class="string">"searchWeather"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"weather"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ tmp }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>{{ brief }}<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">city: <span class="string">"北京"</span>,</span><br><span class="line">        tmp: <span class="string">""</span>,</span><br><span class="line">        brief: <span class="string">""</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        searchWeather: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"查询天气"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.city);</span><br><span class="line">            <span class="keyword">let</span> httpUrl = <span class="string">`https://free-api.heweather.net/s6/weather/now?location=<span class="subst">${<span class="keyword">this</span>.city}</span>&amp;key=3c497450d8e44c5280421ceaba1db581`</span></span><br><span class="line">            <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(httpUrl)</span><br><span class="line">            <span class="keyword">let</span> result = <span class="keyword">await</span> res.json();</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">            <span class="keyword">let</span> now = result.HeWeather6[<span class="number">0</span>].now;</span><br><span class="line">            <span class="keyword">this</span>.tmp = now.tmp;</span><br><span class="line">            <span class="keyword">this</span>.brief = now.cond_txt;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li>once修饰符，只触发一次</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click.once</span>=<span class="string">"onceEvent"</span>&gt;</span>只触发一次的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">onceEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"只触发一次"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>只触发一次</p></blockquote><ul><li>keydown修饰符，指定按键</li></ul><blockquote><p>注意：表单默认为回车提交</p></blockquote><p>keydown下有以下按键</p><p><code>.enter</code></p><p><code>.tab</code></p><p><code>.delete</code> (捕获"删除"和"退格"键)</p><p><code>.esc</code></p><p><code>.space</code></p><p><code>.up</code></p><p><code>.down</code></p><p><code>.left</code></p><p><code>.right</code></p><p>还可以配置按键的自定义修饰符</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes.f1 = 112</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> @keydown.enter=<span class="string">"searchWeather"</span> name=<span class="string">"username"</span> v-model=<span class="string">"city"</span> id=<span class="string">""</span> value=<span class="string">""</span> /&gt;</span><br><span class="line">        &lt;!-- 阻止默认事件 --&gt;</span><br><span class="line">        &lt;input @click.prevent=<span class="string">"searchWeather"</span> type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">            &lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        city: <span class="string">"北京"</span>,</span><br><span class="line">        tmp: <span class="string">""</span>,</span><br><span class="line">        brief: <span class="string">""</span></span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        searchWeather: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"查询天气"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.city);</span><br><span class="line">            <span class="keyword">let</span> httpUrl = <span class="string">`https://free-api.heweather.net/s6/weather/now?location=<span class="subst">${<span class="keyword">this</span>.city}</span>&amp;key=3c497450d8e44c5280421ceaba1db581`</span></span><br><span class="line">            <span class="keyword">let</span> res = <span class="keyword">await</span> fetch(httpUrl)</span><br><span class="line">            <span class="keyword">let</span> result = <span class="keyword">await</span> res.json();</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">            <span class="keyword">let</span> now = result.HeWeather6[<span class="number">0</span>].now;</span><br><span class="line">            <span class="keyword">this</span>.tmp = now.tmp;</span><br><span class="line">            <span class="keyword">this</span>.brief = now.cond_txt;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li>exact修饰符，精确触发</li></ul><blockquote><p>只有在只按ctrl后再点击触发，如果多按了其他键再点击则不会触发</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">"ctrlEvent"</span>&gt;</span>按住ctrl点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctrlEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"按住ctrl点击"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="v-for"><a class="markdownIt-Anchor" href="#v-for"></a> v-for</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>循环列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"student in students"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>姓名：{{ student.studentName }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：{{ student.age }}---学校：{{ student.school }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>条件+循环渲染（将偶数年龄的学生渲染出来）,先循环再判断<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"student,index in students"</span> <span class="attr">v-if</span>=<span class="string">"student.age%2==0"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>索引：{{ index }}---姓名：{{ student.studentName }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：{{ student.age }}---学校：{{ student.school }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        students: [</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小明"</span>,</span><br><span class="line">                age: <span class="number">16</span>,</span><br><span class="line">                school: <span class="string">"清华"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小黑"</span>,</span><br><span class="line">                age: <span class="number">17</span>,</span><br><span class="line">                school: <span class="string">"北大"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小红"</span>,</span><br><span class="line">                age: <span class="number">18</span>,</span><br><span class="line">                school: <span class="string">"浙大"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小樱"</span>,</span><br><span class="line">                age: <span class="number">19</span>,</span><br><span class="line">                school: <span class="string">"河软"</span></span><br><span class="line">            },</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="computed计算属性"><a class="markdownIt-Anchor" href="#computed计算属性"></a> computed（计算属性）</h2><blockquote><p>会将计算结果进行缓存，只要this.firstname和this.lastname变量的内容不改变，就不会重新计算</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 计算属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ fullname }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 逆序显示1个单词 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ reverseWord }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>循环偶数年龄<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"student in oddStudents"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>{{ student.studentName }}<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>{{ student.age }}<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        firstname: <span class="string">"张"</span>,</span><br><span class="line">        lastname: <span class="string">"三"</span>,</span><br><span class="line">        word: <span class="string">"music"</span>,</span><br><span class="line">        students: [</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小明"</span>,</span><br><span class="line">                age: <span class="number">16</span>,</span><br><span class="line">                school: <span class="string">"清华"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小黑"</span>,</span><br><span class="line">                age: <span class="number">17</span>,</span><br><span class="line">                school: <span class="string">"北大"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小红"</span>,</span><br><span class="line">                age: <span class="number">18</span>,</span><br><span class="line">                school: <span class="string">"浙大"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                studentName: <span class="string">"小樱"</span>,</span><br><span class="line">                age: <span class="number">19</span>,</span><br><span class="line">                school: <span class="string">"河软"</span></span><br><span class="line">            },</span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    computed: {</span><br><span class="line">        fullname: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="comment">// 会将计算结果进行缓存，只要this.firstname和lastname变量的内容不改变，就不会重新计算</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="keyword">this</span>.lastname</span><br><span class="line">        },</span><br><span class="line">        reverseWord: {</span><br><span class="line">            <span class="keyword">get</span>: function(){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.word.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span><br><span class="line">            },</span><br><span class="line">            <span class="keyword">set</span>: function(val){</span><br><span class="line">                <span class="keyword">this</span>.word = val.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        oddStudents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">let</span> results = <span class="keyword">this</span>.students.filter(<span class="function">(<span class="params">student,index</span>)=&gt;</span>{</span><br><span class="line">                <span class="keyword">return</span> student.age%<span class="number">2</span> == <span class="number">0</span></span><br><span class="line">            })</span><br><span class="line">            <span class="keyword">return</span> results</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="v-once"><a class="markdownIt-Anchor" href="#v-once"></a> v-once</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一次性插值，不再修改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-once</span>&gt;</span>{{ msg }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        msg: <span class="string">"hello vue"</span>,</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">app.msg = <span class="string">"hello 前端"</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>结果还是 hello vue</p></blockquote><h2 id="v-html"><a class="markdownIt-Anchor" href="#v-html"></a> v-html</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插入HTML内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">"htmlText"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        htmlText: <span class="string">"&lt;span&gt;hello&lt;/span&gt;"</span>,</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>hello</p></blockquote><h2 id="v-bindid-简写-id"><a class="markdownIt-Anchor" href="#v-bindid-简写-id"></a> v-bind:id 简写 :id</h2><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#login</span>{</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#register</span>{</span><br><span class="line">    <span class="attribute">color</span>: aqua;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 修改属性内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">"idname"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        idname: <span class="string">"login"</span>,</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>设置 idname 的值就是设置 div里的 id 的值</p><p>例如，设置 idname: “login”，其登录的颜色就会去CSS样式中寻找 #login 的属性，然后把字体渲染为红色，如果改为 “register”，则会把字体颜色修改为aqua</p></blockquote><h2 id="模板语言的表达式应用"><a class="markdownIt-Anchor" href="#模板语言的表达式应用"></a> 模板语言的表达式应用</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模板语言的表达式应用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        {{ firstname + lastname }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        firstname: <span class="string">"张"</span>,</span><br><span class="line">        lastname: <span class="string">"三"</span>,</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>张三</p></blockquote><h2 id="watch侦听器"><a class="markdownIt-Anchor" href="#watch侦听器"></a> watch（侦听器）</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    {{ msg }}</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in arr"</span>&gt;</span>{{ item }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        msg: <span class="string">"hello Vue"</span>,</span><br><span class="line">        arr: [<span class="string">"小明"</span>,<span class="string">"小红"</span>,<span class="string">"小黑"</span>]</span><br><span class="line">    },</span><br><span class="line">    watch: {</span><br><span class="line">        <span class="comment">// val为修改的值</span></span><br><span class="line">        msg: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"监听事件------msg"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(val);</span><br><span class="line">        },</span><br><span class="line">        arr: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"监听事件------arr"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(val);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>修改 data 中属性的值会触发 watch，例如</p><p>app.msg = “hello”，watch会去监听msg</p></blockquote><h1 id="v-bindclass-简写-class"><a class="markdownIt-Anchor" href="#v-bindclass-简写-class"></a> v-bind:class 简写 :class</h1><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: skyblue;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.active</span> {</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.col-xs-12</span> {</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.red-bg</span> {</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#FF0000</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.abc</span> {</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过对象的方式决定是否存在某个类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">:class</span>=<span class="string">"{active:isTrue}"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 直接放置对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">:class</span>=<span class="string">"styleObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 放置数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">:class</span>=<span class="string">"styleArr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 放置字符串 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">:class</span>=<span class="string">"styleStr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组和对象混合使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span> <span class="attr">:class</span>=<span class="string">"styleArrObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        isTrue: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 放置对象</span></span><br><span class="line">        styleObj: {</span><br><span class="line">            <span class="string">"active"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"laochen"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"col-lg-6"</span>: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// 可直接用数组的方式进行添加和删除</span></span><br><span class="line">        styleArr: [</span><br><span class="line">            <span class="string">"col-xs-12"</span>,</span><br><span class="line">            <span class="string">"red-bg"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 放置字符串</span></span><br><span class="line">        styleStr: <span class="string">"page abc def"</span>,</span><br><span class="line">        <span class="comment">// 数组和对象混合使用</span></span><br><span class="line">        styleArrObj: [</span><br><span class="line">            <span class="string">"abcd"</span>,</span><br><span class="line">            {</span><br><span class="line">                active: <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="v-bindstyle-简写-style"><a class="markdownIt-Anchor" href="#v-bindstyle-简写-style"></a> v-bind:style 简写 :style</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background: skyblue;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CSS内联样式变量拼接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background: skyblue;"</span> <span class="attr">:style</span>=<span class="string">"{ border: borderWidth+'px solid '+borderColor }"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CSS内联样式放置对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styleObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CSS数组的方式拼接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styleArr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        borderWidth: <span class="number">50</span>,</span><br><span class="line">        borderColor: <span class="string">"red"</span>,</span><br><span class="line">        styleObj: {</span><br><span class="line">            width: <span class="string">"200px"</span>,</span><br><span class="line">            height: <span class="string">"300px"</span>,</span><br><span class="line">            padding: <span class="string">"50px"</span>,</span><br><span class="line">            <span class="string">"background-color"</span>: <span class="string">"skyblue"</span></span><br><span class="line">        },</span><br><span class="line">        styleArr: [</span><br><span class="line">            {</span><br><span class="line">                width: <span class="string">"200px"</span>,</span><br><span class="line">                height: <span class="string">"300px"</span>,</span><br><span class="line">                padding: <span class="string">"50px"</span>,</span><br><span class="line">                <span class="string">"background-color"</span>: <span class="string">"skyblue"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                border: <span class="string">"30px solid yellow"</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>例如：CSS内联样式变量拼接 — 会将第二个div的边框设置为50px的红色边框</p></blockquote><h2 id="v-model"><a class="markdownIt-Anchor" href="#v-model"></a> v-model</h2><blockquote><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code> <code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它<strong>负责监听用户的输入事件以更新数据</strong>，并对一些极端场景进行一些特殊处理。</p></blockquote><ul><li>单行文本输入框</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ username }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        username: <span class="string">"张三"</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>v-model把 value值和username变量的值绑定在一起，实现了修改value的值就会自动修改username变量的值，这就是<strong>数据的双向绑定</strong></p></blockquote><ul><li>多行文本输入框</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        username: <span class="string">"张三"</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li>复选框：选择喜欢的水果</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"fruit in fruits"</span>&gt;</span></span><br><span class="line">    {{ fruit }}</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"checkFruits"</span> <span class="attr">:value</span>=<span class="string">"fruit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{ checkFruits }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        fruits: [<span class="string">"苹果"</span>,<span class="string">"香蕉"</span>,<span class="string">"雪梨"</span>,<span class="string">"葡萄"</span>],</span><br><span class="line">        checkFruits: []</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当选择内容时，会依次添加到 v-model绑定的checkFruits数组中去</p></blockquote><ul><li>单选框：选择你最喜欢的水果</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"fruit in fruits"</span>&gt;</span></span><br><span class="line">    {{ fruit }}</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"zfruit"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"radioFruit"</span> <span class="attr">:value</span>=<span class="string">"fruit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{ radioFruit }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        fruits: [<span class="string">"苹果"</span>,<span class="string">"香蕉"</span>,<span class="string">"雪梨"</span>,<span class="string">"葡萄"</span>],</span><br><span class="line">        radioFruit: <span class="string">""</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当选择内容时，会将 你最后一次点击的内容添加到radioFruit字符串中去</p></blockquote><ul><li>选项框：选择你居住的城市</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"chooseCity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"city in citys"</span> <span class="attr">:value</span>=<span class="string">"city"</span>&gt;</span>{{ city }}<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>{{ chooseCity }}<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        citys: [<span class="string">"北京"</span>,<span class="string">"上海"</span>,<span class="string">"深圳"</span>,<span class="string">"广州"</span>],</span><br><span class="line">        chooseCity: <span class="string">""</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>把选中的值和chooseCity空字符串绑定在一起，实现数据的双向绑定</p></blockquote><ul><li>选项框：选择你喜欢的城市</li></ul><blockquote><p>multiple属性实现选项框多选</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"moreCity"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"city in citys"</span> <span class="attr">:value</span>=<span class="string">"city"</span>&gt;</span>{{ city }}<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>{{ moreCity }}<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        citys: [<span class="string">"北京"</span>,<span class="string">"上海"</span>,<span class="string">"深圳"</span>,<span class="string">"广州"</span>],</span><br><span class="line">        moreCity: []</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>按住CTRL键，选择你喜欢的城市，把value的值和moreCity数组的值绑定到一起，实现数据的双向绑定</p></blockquote><ul><li>将字符串变为数字获取</li></ul><p><code>.number</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        age: <span class="number">16</span></span><br><span class="line">    },</span><br><span class="line">    watch: {</span><br><span class="line">        <span class="comment">// 监听age变量的值的变化</span></span><br><span class="line">        age: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(val);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>加上.number后，value的值只能为数字时才能与 age数据双向绑定</p></blockquote><ul><li>lazy修饰符</li></ul><blockquote><p>在输入文字结束后，输入框的值才会与数据进行同步，节省性能</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model.lazy</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        username: <span class="string">"张三"</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ul><li>trim修饰符</li></ul><blockquote><p>去除输入内容两边的空格</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model.lazy.trim</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        username: <span class="string">"张三"</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="v-bindis-简写-is"><a class="markdownIt-Anchor" href="#v-bindis-简写-is"></a> v-bind:is 简写 :is</h2><blockquote><p>:is 里面写需要显示的动态组件</p></blockquote><p>例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(1)"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(2)"</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(3)"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"chooseContent(4)"</span>&gt;</span>个人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> com1 = Vue.component(<span class="string">"index-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;首页内容&lt;/h1&gt;"</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">let</span> com2 = Vue.component(<span class="string">"index-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;列表内容&lt;/h1&gt;"</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">let</span> com3 = Vue.component(<span class="string">"index-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;新闻内容&lt;/h1&gt;"</span>,</span><br><span class="line">})</span><br><span class="line"><span class="keyword">let</span> com4 = Vue.component(<span class="string">"index-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;h1&gt;个人内容&lt;/h1&gt;"</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        com: com1</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        chooseContent: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">            <span class="comment">// console.log(id);</span></span><br><span class="line">            <span class="comment">// console.log(this);</span></span><br><span class="line">            <span class="comment">// 通过获取id,选择注册好的组件</span></span><br><span class="line">            <span class="keyword">this</span>.com = <span class="keyword">this</span>.$options.components[<span class="string">"com"</span>+id]</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    components: {</span><br><span class="line">        com1,com2,com3,com4</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当com的值为 com1 时，会显示首页的内容</p><p>当com的值为 com2 时，会显示列表的内容</p><p>当com的值为 com3 时，会显示新闻的内容</p><p>当com的值为 com4 时，会显示个人的内容</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue图书管理案例</title>
    <link href="https://extheor.club/posts/7a228db4/index.html"/>
    <id>https://extheor.club/posts/7a228db4/index.html</id>
    <published>2020-11-07T15:39:54.464Z</published>
    <updated>2020-11-07T15:52:21.803Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue图书管理案例"><a class="markdownIt-Anchor" href="#vue图书管理案例"></a> Vue图书管理案例</h1><h2 id="1图书列表"><a class="markdownIt-Anchor" href="#1图书列表"></a> 1.图书列表</h2><ul><li>实现静态列表效果</li><li>基于数据实现模板效果</li><li>处理每行的操作按钮</li></ul><table><thead><tr><th>编号</th><th>名称</th><th>时间</th><th>操作</th></tr></thead><tbody><tr><td>1</td><td>三国演义</td><td>2020-11-02</td><td>修改 | 删除</td></tr><tr><td>2</td><td>水浒传</td><td>2020-11-02</td><td>修改 | 删除</td></tr><tr><td>3</td><td>红楼梦</td><td>2020-11-02</td><td>修改 | 删除</td></tr><tr><td>4</td><td>西游记</td><td>2020-11-02</td><td>修改 | 删除</td></tr></tbody></table><blockquote><p>代码实现</p><p>@click.prevent - 禁止 a 标签的默认事件</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">:key</span>=<span class="string">'item.id'</span> <span class="attr">v-for</span>=<span class="string">'item in books'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>{{item.id}}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>{{item.name}}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>{{item.date}}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        books: [</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">1</span>,</span><br><span class="line">                name: <span class="string">"三国演义"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">2</span>,</span><br><span class="line">                name: <span class="string">"水浒传"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">3</span>,</span><br><span class="line">                name: <span class="string">"红楼梦"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">4</span>,</span><br><span class="line">                name: <span class="string">"西游记"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f14344e46ca05545ecc3f727b83160e3f5be4053/2020/11/02/9f97a98ec2b028e7a01d3eabb19d05e0.png" alt="image-20201102145336967"></p><h2 id="2添加图书"><a class="markdownIt-Anchor" href="#2添加图书"></a> 2.添加图书</h2><ul><li>实现表单的静态效果</li><li>添加图书表单域数据绑定</li><li>添加按钮事件绑定</li><li>实现添加业务逻辑</li></ul><blockquote><p>代码实现</p><p>v-model 双向绑定 输入框对应的 value 值</p><p>定义一个 handle 点击事件（点击提交，把填写的编号和名称添加到列表中）</p><p>在 Vue 实例对象的data中定义 id 和 name 属性</p><p>在 methods 中实现 handle 事件</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        编号：</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">v-model</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">        名称：</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handle"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        id: <span class="string">""</span>,</span><br><span class="line">        name: <span class="string">""</span>,</span><br><span class="line">        books: [</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">1</span>,</span><br><span class="line">                name: <span class="string">"三国演义"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">2</span>,</span><br><span class="line">                name: <span class="string">"水浒传"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">3</span>,</span><br><span class="line">                name: <span class="string">"红楼梦"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                id: <span class="number">4</span>,</span><br><span class="line">                name: <span class="string">"西游记"</span>,</span><br><span class="line">                date: <span class="string">""</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        handle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">var</span> book = {}</span><br><span class="line">            book.id = <span class="keyword">this</span>.id</span><br><span class="line">            book.name = <span class="keyword">this</span>.name</span><br><span class="line">            book.date = <span class="string">""</span></span><br><span class="line">            <span class="keyword">this</span>.books.push(book)</span><br><span class="line">            <span class="keyword">this</span>.id = <span class="string">""</span></span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">""</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@c7f08e265afb23f125d320d3c6fbdf4d95b02022/2020/11/02/10856a351cf60fc2d544f75865148d77.png" alt=""></p><h2 id="3修改图书"><a class="markdownIt-Anchor" href="#3修改图书"></a> 3.修改图书</h2><ul><li>修改信息填充到表单</li><li>修改后重新提交表单</li><li>重用添加和修改的方法</li></ul><blockquote><p>代码实现</p><p>为修改按钮添加 toEdit 事件，把 tr 的 id 传入</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"toEdit(item.id)"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">toEdit: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">    <span class="comment">// 先通过 id 找到对应的这一行数据</span></span><br><span class="line">    <span class="keyword">var</span> book = <span class="keyword">this</span>.books.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> item.id === id</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// console.log(book);</span></span><br><span class="line">    <span class="keyword">this</span>.id = book[<span class="number">0</span>].id</span><br><span class="line">    <span class="keyword">this</span>.name = book[<span class="number">0</span>].name</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f2c9a30080b37d983751ed87b08cff981e3a8abe/2020/11/02/0d63d66a4925ea08bfd4a7be301d2b25.png" alt=""></p><blockquote><p>在修改的时候我们不希望能够修改 书籍的编号 ，所以就需要在修改时添加 <code>disabled</code> 属性，如下写法</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">v-model</span>=<span class="string">"id"</span> <span class="attr">:disabled</span>=<span class="string">"flag"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>可以看到，这是一个 vue 属性，flag是一个变量，Ta 需要在 Vue 实例对象 data中定义，默认为 <code>flag: false</code></p></blockquote><blockquote><p>在修改是禁止修改编号，使 <code>flag: true</code> 即可，如下</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">toEdit: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">    <span class="comment">// 禁止修改编号</span></span><br><span class="line">    <span class="keyword">this</span>.flag = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// console.log(id);</span></span><br><span class="line">    <span class="comment">// 先通过 id 找到对应的这一行数据</span></span><br><span class="line">    <span class="keyword">var</span> book = <span class="keyword">this</span>.books.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> item.id === id</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// console.log(book);</span></span><br><span class="line">    <span class="keyword">this</span>.id = book[<span class="number">0</span>].id</span><br><span class="line">    <span class="keyword">this</span>.name = book[<span class="number">0</span>].name</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>另外，提交(handle)事件现在有两件事要做，一是编辑图书，二是添加图书，当 flag 为 true 时去编辑图书，当 flag 为 false 时去添加图书，如下</p><p>使用 filter 得到 books 中的所有元素，如果输入框中的 id 等于 要编辑的图书的id，则把输入框中的 name 重新赋值给 书籍的 name</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">handle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.flag){</span><br><span class="line">        <span class="comment">// 编辑</span></span><br><span class="line">        <span class="keyword">this</span>.books.filter(<span class="function">(<span class="params">item</span>)=&gt;</span>{</span><br><span class="line">            <span class="comment">// console.log(item);</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.id == item.id){</span><br><span class="line">                item.name = <span class="keyword">this</span>.name</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="literal">false</span></span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">        <span class="keyword">var</span> book = {}</span><br><span class="line">        book.id = <span class="keyword">this</span>.id</span><br><span class="line">        book.name = <span class="keyword">this</span>.name</span><br><span class="line">        book.date = <span class="string">""</span></span><br><span class="line">        <span class="keyword">this</span>.books.push(book)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">this</span>.id = <span class="string">""</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>效果如下</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@bbc42ae18fcc61904814e027143c474f896abcf1/2020/11/02/aab6fab5d5b8da5e385b0d00978a59cd.png" alt=""></p><h2 id="4删除图书"><a class="markdownIt-Anchor" href="#4删除图书"></a> 4.删除图书</h2><ul><li>删除按钮绑定事件处理方法</li><li>实现删除业务逻辑</li></ul><blockquote><p>代码实现</p><p>三种方法</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"deleteBook(item.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">deleteBook: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>{</span><br><span class="line">    <span class="comment">// -----------------方法一(filter)---------------------</span></span><br><span class="line">    <span class="keyword">var</span> book = <span class="keyword">this</span>.books.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> item.id === id</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// console.log(book);</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="keyword">this</span>.books.indexOf(book[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// console.log(index);</span></span><br><span class="line">    <span class="keyword">this</span>.books.splice(index, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------------方法二(findIndex)---------------------</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="keyword">this</span>.books.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> item.id === id</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// console.log(index);</span></span><br><span class="line">    <span class="keyword">this</span>.books.splice(index, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// -----------------方法三(filter的重新赋值)---------------</span></span><br><span class="line">        <span class="keyword">this</span>.books = <span class="keyword">this</span>.books.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> item.id != id</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@ee5ad5f3876432ff411fc8f6f2fbbebec442914e/2020/11/02/05f00d0133032bdb50c8f684edd15088.png" alt=""></p><h2 id="5常用特性应用场景"><a class="markdownIt-Anchor" href="#5常用特性应用场景"></a> 5.常用特性应用场景</h2><ul><li>过滤器（格式化日期）</li><li>自定义指令（获取表单焦点）</li><li>计算属性（统计图书数量）</li><li>侦听器（验证图书存在性）</li><li>生命周期（图书数据处理）</li></ul><blockquote><p>代码实现</p><p>首先 Ctrl+C、Ctrl+V 祖传过滤器</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'format'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, arg</span>) </span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dateFormat</span>(<span class="params">date, format</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> date === <span class="string">"string"</span>) {</span><br><span class="line">            <span class="keyword">var</span> mts = date.match(<span class="regexp">/(\/Date\((\d+)\)\/)/</span>);</span><br><span class="line">            <span class="keyword">if</span> (mts &amp;&amp; mts.length &gt;= <span class="number">3</span>) {</span><br><span class="line">                date = <span class="built_in">parseInt</span>(mts[<span class="number">2</span>]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        date = <span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">        <span class="keyword">if</span> (!date || date.toUTCString() == <span class="string">"Invalid Date"</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">var</span> map = {</span><br><span class="line">            <span class="string">"M"</span>: date.getMonth() + <span class="number">1</span>, <span class="comment">//月份 </span></span><br><span class="line">            <span class="string">"d"</span>: date.getDate(), <span class="comment">//日 </span></span><br><span class="line">            <span class="string">"h"</span>: date.getHours(), <span class="comment">//小时 </span></span><br><span class="line">            <span class="string">"m"</span>: date.getMinutes(), <span class="comment">//分 </span></span><br><span class="line">            <span class="string">"s"</span>: date.getSeconds(), <span class="comment">//秒 </span></span><br><span class="line">            <span class="string">"q"</span>: <span class="built_in">Math</span>.floor((date.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度 </span></span><br><span class="line">            <span class="string">"S"</span>: date.getMilliseconds() <span class="comment">//毫秒 </span></span><br><span class="line">        };</span><br><span class="line">        format = format.replace(<span class="regexp">/([yMdhmsqS])+/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">all, t</span>) </span>{</span><br><span class="line">            <span class="keyword">var</span> v = map[t];</span><br><span class="line">            <span class="keyword">if</span> (v !== <span class="literal">undefined</span>) {</span><br><span class="line">                <span class="keyword">if</span> (all.length &gt; <span class="number">1</span>) {</span><br><span class="line">                    v = <span class="string">'0'</span> + v;</span><br><span class="line">                    v = v.substr(v.length - <span class="number">2</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> v;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (t === <span class="string">'y'</span>) {</span><br><span class="line">                <span class="keyword">return</span> (date.getFullYear() + <span class="string">''</span>).substr(<span class="number">4</span> - all.length);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> all;</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">return</span> format;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dateFormat(value, arg);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>然后在需要显示时间的那一格进行使用</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>{{item.date | format('yyyy-MM-dd hh:mm:ss')}}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>注意</strong>：books内不能直接用 this 获取Dao Vue的实例对象，而是获取的 Window 全局对象</p></blockquote><blockquote><p>直接在添加书籍时添加时间即可，如下</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加</span></span><br><span class="line"><span class="keyword">var</span> book = {}</span><br><span class="line">book.id = <span class="keyword">this</span>.id</span><br><span class="line">book.name = <span class="keyword">this</span>.name</span><br><span class="line">book.date = <span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">// 时间</span></span><br><span class="line"><span class="keyword">this</span>.books.push(book)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>刷新页面获取焦点也是直接写一个全局 directive ，自定义指令即可，我命名为 <code>focus</code> ，名字可以随便写，el 为需要获取焦点的元素</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'focus'</span>, {</span><br><span class="line">    inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>{</span><br><span class="line">        el.focus();</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><blockquote><p>实现效果如下</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@acc2acd9951ef2fd8e6feca47097a13442d9bf13/2020/11/02/e861f1a769ab32e150a392e95d61ea4e.png" alt=""></p><blockquote><p>当图书名已经存在则禁用提交按钮</p><p>通过 watch 实时验证图书名称是否已经存在</p></blockquote><blockquote><p>代码实现</p><p>在提交按钮定义一个 flag，同样是设置一个变量，默认值设置为 false</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handle"</span> <span class="attr">:disabled</span>=<span class="string">"submitFlag"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用 some 来检测 books 数组中是否有 输入的书籍的 name，如果有则禁止提交，如果没有则可以提交</p><p>some() 方法会依次执行数组的每个元素：</p><ul><li>如果有一个元素满足条件，则表达式返回<em>true</em> , 剩余的元素不会再执行检测。</li><li>如果没有满足条件的元素，则返回false。</li></ul></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">watch: {</span><br><span class="line">    name: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">        <span class="keyword">var</span> flag = <span class="keyword">this</span>.books.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> item.name == val</span><br><span class="line">        })</span><br><span class="line">        <span class="built_in">console</span>.log(flag);</span><br><span class="line">        <span class="keyword">if</span>(flag){</span><br><span class="line">            <span class="keyword">this</span>.submitFlag = <span class="literal">true</span></span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">this</span>.submitFlag = <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@7267d9c40dcb377142abb3575ba22cc6af9b8df1/2020/11/02/8a3227aba0fc3ebc314f223364f0b08c.png" alt=""></p><blockquote><p>最后我们需要在 Vue 实例的生命周期的 mounted 阶段（<em>渲染之后，可以获取数据生成的DOM对象</em>）来获取图书数据</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">// 该生命周期钩子函数被触发的时候，模板已经可以使用</span></span><br><span class="line">    <span class="comment">// 一般此时用于获取后台数据，然后把数据填充到模板</span></span><br><span class="line">    <span class="keyword">var</span> data = [</span><br><span class="line">        {</span><br><span class="line">            id: <span class="number">1</span>,</span><br><span class="line">            name: <span class="string">'三国演义'</span>,</span><br><span class="line">            date: <span class="number">2525609975000</span></span><br><span class="line">        },{</span><br><span class="line">            id: <span class="number">2</span>,</span><br><span class="line">            name: <span class="string">'水浒传'</span>,</span><br><span class="line">            date: <span class="number">2525609975000</span></span><br><span class="line">        },{</span><br><span class="line">            id: <span class="number">3</span>,</span><br><span class="line">            name: <span class="string">'红楼梦'</span>,</span><br><span class="line">            date: <span class="number">2525609975000</span></span><br><span class="line">        },{</span><br><span class="line">            id: <span class="number">4</span>,</span><br><span class="line">            name: <span class="string">'西游记'</span>,</span><br><span class="line">            date: <span class="number">2525609975000</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">this</span>.books = data</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>最后的实现效果是一样的</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue生命周期</title>
    <link href="https://extheor.club/posts/83f13096/index.html"/>
    <id>https://extheor.club/posts/83f13096/index.html</id>
    <published>2020-11-07T15:39:54.457Z</published>
    <updated>2020-11-07T15:52:21.811Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue生命周期"><a class="markdownIt-Anchor" href="#vue生命周期"></a> Vue生命周期</h1><p>下图展示了实例的生命周期。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高。</p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/生命周期.png"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ msg }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        msg: <span class="string">"helloVue"</span>,</span><br><span class="line">        className: <span class="string">"redBg"</span></span><br><span class="line">    },</span><br><span class="line">    beforeCreate(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeCreate"</span>);</span><br><span class="line">        <span class="comment">// 此时数据data和事件方法methods还未绑定到app对象上</span></span><br><span class="line">        <span class="comment">// console.log(this);</span></span><br><span class="line">        <span class="comment">// console.log(this.msg);</span></span><br><span class="line">        <span class="comment">// console.log(this.clickEvent);</span></span><br><span class="line">    },</span><br><span class="line">    created(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"created"</span>);</span><br><span class="line">        <span class="comment">// 数据data和方法methods绑定到应用对象app上</span></span><br><span class="line">        <span class="comment">// console.log(this);</span></span><br><span class="line">        <span class="comment">// console.log(this.msg);</span></span><br><span class="line">        <span class="comment">// console.log(this.clickEvent);</span></span><br><span class="line">    },</span><br><span class="line">    beforeMount(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeMount"</span>);</span><br><span class="line">        <span class="comment">// 渲染之前,根据数据生成的DOM对象是获取不到的</span></span><br><span class="line">        <span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">".redBg"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(dom);</span><br><span class="line">    },</span><br><span class="line">    mounted(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"mounted"</span>);</span><br><span class="line">        <span class="comment">// 渲染之后，可以获取数据生成的DOM对象</span></span><br><span class="line">        <span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">".redBg"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(dom);</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        clickEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    beforeUpdate() {</span><br><span class="line">        <span class="comment">// 数据更改，但内容未更改之前</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeUpdate"</span>);</span><br><span class="line">        <span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">".redBg"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(dom);</span><br><span class="line">    },</span><br><span class="line">    updated() {</span><br><span class="line">        <span class="comment">// 内容已更新完毕</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"update"</span>);</span><br><span class="line">        <span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">".redBg"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(dom);</span><br><span class="line">    },</span><br><span class="line">    beforeDestroy() {</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    destroyed() {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在刷新页面后，依次触发四个事件：</p><ul><li><p>beforeCreate事件</p><blockquote><p>Vue {_uid: 0, _isVue: true, $options: {…}, _renderProxy: Proxy, _self: Vue, …}<br>undefined</p><p>undefined</p></blockquote><p>说明在beforeCreate事件触发时，Vue刚刚实例化，而此时数据data和事件方法methods还未绑定到app对象上。</p></li><li><p>created事件</p><blockquote><p>Vue {_uid: 0, _isVue: true, $options: {…}, _renderProxy: Proxy, _self: Vue, …}<br>helloVue<br>ƒ (){}</p></blockquote><p>说明在create事件触发时，数据data和方法methods绑定到应用对象app上。</p></li><li><p>beforeMount事件</p><blockquote><p>null</p></blockquote><p>在渲染页面之前，数据是没有挂载的，根据数据生成的DOM对象是获取不到的</p></li><li><p>mount事件</p><blockquote><p><code>&lt;h1 class="redBg"&gt;helloVue&lt;/h1&gt;</code></p></blockquote><p>在渲染页面之后，数据是已经挂载的，可以获取数据生成的DOM对象</p></li></ul><p>在修改数据之后，依次再触发两个事件：</p><ul><li><p>beforeUpdate事件</p><blockquote><p><code>&lt;h1 class="redBg"&gt;123&lt;/h1&gt;</code></p></blockquote><p>我这里是在修改数据之前能获取到数据</p></li><li><p>update事件</p><blockquote><p><code>&lt;h1 class="redBg"&gt;123&lt;/h1&gt;</code></p></blockquote><p>在修改数据之后也能获取到数据</p></li></ul><p>在数据销毁之后，依次再触发两个事件：</p><ul><li>beforeDestory事件</li><li>destoryed事件</li></ul><blockquote><p>想要看到销毁事件触发的效果需要先事先写好一个自定义组件</p><p>这个 <code>&lt;hello-com&gt;&lt;/hello-com&gt;</code> 就是自定义组件</p><p>然后当销毁这个自定义组件的时候就会触发这两个销毁事件</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-com</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> helloCom = Vue.component(<span class="string">"hello-com"</span>,{</span><br><span class="line">    template: <span class="string">"&lt;div&gt;&lt;h1&gt;{{ maxiaoyu }}&lt;/h1&gt;&lt;button @click='changeData'&gt;修改数据&lt;/button&gt;&lt;/div&gt;"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            maxiaoyu: <span class="string">"hello maxiaoyu"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    methods: {</span><br><span class="line">        changeData: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="keyword">this</span>.maxiaoyu = <span class="string">"hello 小明"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    beforeCreate(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeCreate"</span>);</span><br><span class="line">        <span class="comment">// 此时数据data和事件方法methods还未绑定到app对象上</span></span><br><span class="line">    },</span><br><span class="line">    created(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"created"</span>);</span><br><span class="line">        <span class="comment">// 数据data和方法methods绑定到应用对象app上</span></span><br><span class="line">    },</span><br><span class="line">    beforeMount(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeMount"</span>);</span><br><span class="line">        <span class="comment">// 渲染之前,根据数据生成的DOM对象是获取不到的</span></span><br><span class="line">    },</span><br><span class="line">    mounted(){</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"mounted"</span>);</span><br><span class="line">        <span class="comment">// 渲染之后，可以获取数据生成的DOM对象</span></span><br><span class="line">    },</span><br><span class="line">    beforeUpdate() {</span><br><span class="line">        <span class="comment">// 数据更改，但内容未更改之前</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeUpdate"</span>);</span><br><span class="line">    },</span><br><span class="line">    updated() {</span><br><span class="line">        <span class="comment">// 内容已更新完毕</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"update"</span>);</span><br><span class="line">    },</span><br><span class="line">    beforeDestroy() {</span><br><span class="line">        <span class="comment">// 应用销毁之前</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeDestroy"</span>);</span><br><span class="line">    },</span><br><span class="line">    destroyed() {</span><br><span class="line">        <span class="comment">// 应用销毁之后</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"destroyed"</span>);</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        isShow: <span class="literal">true</span></span><br><span class="line">    },</span><br><span class="line">    components: {</span><br><span class="line">        <span class="string">"hello-com"</span>: helloCom</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>提示：可以在控制台输入 app.isShow = false 来销毁这个自定义组件</p><p>只有v-if 可以销毁，v-show 不能销毁，v-show 只是修改了组件的属性值为display: none</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 前端路由</title>
    <link href="https://extheor.club/posts/664423f6/index.html"/>
    <id>https://extheor.club/posts/664423f6/index.html</id>
    <published>2020-11-07T15:39:54.445Z</published>
    <updated>2020-11-07T15:52:21.799Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue-前端路由"><a class="markdownIt-Anchor" href="#vue-前端路由"></a> Vue 前端路由</h1><h2 id="1路由的基本概念与原理"><a class="markdownIt-Anchor" href="#1路由的基本概念与原理"></a> 1.路由的基本概念与原理</h2><h3 id="11路由"><a class="markdownIt-Anchor" href="#11路由"></a> 1.1路由</h3><p>路由是一个比较广义和抽象的概念，<strong>路由的本质就是对应关系</strong>。<br>在开发中，路由分为:</p><ul><li>后端路由</li><li>前端路由</li></ul><h4 id="1后端路由"><a class="markdownIt-Anchor" href="#1后端路由"></a> 1.后端路由</h4><ul><li>概念: 根据不同的<strong>用户URL请求</strong>，返回不同的内容</li><li>本质: <strong>URL请求地址</strong>与<strong>服务器资源</strong>之间的对应关系</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@bf8a3aac41097ba14054a81cdf0eab1f163a2372/2020/11/04/4b5ddd8b2ae9c6cf952f81f23312b87a.png" alt="image-20201104112226019"></p><h4 id="2前端路由spa"><a class="markdownIt-Anchor" href="#2前端路由spa"></a> 2.前端路由（SPA）</h4><h5 id="1spa"><a class="markdownIt-Anchor" href="#1spa"></a> 1.SPA</h5><ul><li>后端渲染(存在性能问题)</li><li>Ajax前端渲染（前端渲染提高性能，但是不支持浏览器的前进后退操作)</li><li>SPA (Single Page Application)单页面应用程序: 整个网站只有一个页面，内容的变化通过Ajax局部更新实现、同时支持浏览器地址栏的前进和后退操作</li><li>SPA实现原理之一: 基于URL地址的hash (hash的变化会导致浏览器记录访问历史的变化、但是hash的变化不会触发新的URL请求)</li><li>在实现SPA过程中，最核心的技术点就是前端路由</li></ul><h5 id="2前端路由"><a class="markdownIt-Anchor" href="#2前端路由"></a> 2.前端路由</h5><ul><li>概念: 根据不同的<strong>用户事件</strong>，显示不同的页面内容</li><li>本质: <strong>用户事件</strong>与<strong>事件处理函数</strong>之间的对应关系</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@d1dc85fdb545af81183dd86d73647ab8970a27a6/2020/11/04/6dbfbe30b78a17bf8ddd71bb070130f3.png" alt="image-20201104112831829"></p><h4 id="3实现简易的前端路由"><a class="markdownIt-Anchor" href="#3实现简易的前端路由"></a> 3.实现简易的前端路由</h4><ul><li><p>基于URL中的hash实现(点击菜单的时候改变URL的hash，根据hash的变化控制组件的切换)</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@950c3293abe862c6fc84521c8045dfb62b1811d7/2020/11/04/1272714cb46628ad938fc94ce8bcf31b.png" alt="image-20201104113244384"></p></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听window的onhashchange 事件，根据获取到的最新的hash值，切换要显示的组件的名称</span></span><br><span class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line"><span class="comment">// 通过location.hash获取到最新的hash值</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="12vue-router"><a class="markdownIt-Anchor" href="#12vue-router"></a> 1.2Vue Router</h2><p>vue Router(官网: [https: <a href="//router.vuejs.org/zh/" target="_blank" rel="noopener">//router.vuejs.org/zh/</a>](https: <a href="//router.vuejs.org/zh/" target="_blank" rel="noopener">//router.vuejs.org/zh/</a>))是Vue.js 官方的路由管理器。它和vue.js 的核心深度集成，可以非常方便的用于SPA应用程序的开发。</p><p>vue Router包含的功能有:</p><ul><li>支持HTML5历史模式或hash模式</li><li>支持嵌套路由</li><li>支持路由参数</li><li>支持编程式路由</li><li>支持命名路由</li></ul><h2 id="2vue-router的基本使用"><a class="markdownIt-Anchor" href="#2vue-router的基本使用"></a> 2.vue-router的基本使用</h2><h3 id="21基本使用步骤"><a class="markdownIt-Anchor" href="#21基本使用步骤"></a> 2.1基本使用步骤</h3><ol><li>引入相关的库文件</li><li>添加路由链接</li><li>添加路由填充位</li><li>定义路由组件</li><li>配置路由规则并创建路由实例</li><li>把路由挂载到 Vue 根实例中</li></ol><h3 id="22路由重定向"><a class="markdownIt-Anchor" href="#22路由重定向"></a> 2.2路由重定向</h3><p>路由重定向指的是: 用户在访问地址 a的时候，强制用户跳转到地址c，从而展示特定的组件页面;</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> vueRouter ({</span><br><span class="line">    routes: [</span><br><span class="line">    <span class="comment">//其中，path表示需要被重定向的原地址，redirect表示将要被重定向到的新地址{path : '稔’, redirect: '/user'},</span></span><br><span class="line">    {<span class="attr">path</span>: <span class="string">'/user '</span> , <span class="attr">component</span>: User} ,</span><br><span class="line">    {<span class="attr">path</span>: <span class="string">'/register'</span> , <span class="attr">component</span>: Register}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="3vue-router嵌套路由"><a class="markdownIt-Anchor" href="#3vue-router嵌套路由"></a> 3.vue-router嵌套路由</h2><h3 id="31嵌套路由用法"><a class="markdownIt-Anchor" href="#31嵌套路由用法"></a> 3.1.嵌套路由用法</h3><h4 id="1嵌套路由功能分析"><a class="markdownIt-Anchor" href="#1嵌套路由功能分析"></a> 1.嵌套路由功能分析</h4><ul><li>点击父级路由链接显示模板内容</li><li>模板内容中又有子级路由链接</li><li>点击子级路由链接显示子级模板内容</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@718084b6c86dbaa8703bb3525fb3c4bcf9de5fb7/2020/11/04/f0f1731315e425c7e7580839447584d6.png" alt="image-20201104114134912"></p><h4 id="2父路由组件模板"><a class="markdownIt-Anchor" href="#2父路由组件模板"></a> 2.父路由组件模板</h4><ul><li>父级路由链接</li><li>父组件路由填充位</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制组件的显示位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/ <span class="attr">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3子级路由模板"><a class="markdownIt-Anchor" href="#3子级路由模板"></a> 3.子级路由模板</h4><ul><li>子级路由链接</li><li>子级路由填充位</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Register = {</span><br><span class="line">    template: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Register组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;hr/&gt;</span></span><br><span class="line"><span class="string">        &lt;router-link to="/register/tab1"&gt;Tab1&lt;/router-link&gt;    &lt;router-link to="/register/tab2"&gt;Tab2&lt;/router-link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;!--子路由填充位置--&gt;</span></span><br><span class="line"><span class="string">        &lt;router-view/</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="4嵌套路由用法"><a class="markdownIt-Anchor" href="#4嵌套路由用法"></a> 4.嵌套路由用法</h4><ul><li>父级路由通过children属性配置子级路由</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> vueRouter({</span><br><span class="line">routes: [</span><br><span class="line">{ <span class="attr">path</span>: <span class="string">' /user'</span>, <span class="attr">component</span>: User },</span><br><span class="line">    {</span><br><span class="line">            path: <span class="string">' /register'</span>,</span><br><span class="line">            component: Register</span><br><span class="line">        <span class="comment">//通过children属性，为/register 添加子路由规则</span></span><br><span class="line">        children: [</span><br><span class="line">                { <span class="attr">path</span> : <span class="string">' /register/tab1'</span> , <span class="attr">component</span>: Tab1 },</span><br><span class="line">                { <span class="attr">path</span>: <span class="string">' / register/tab2'</span> , <span class="attr">component</span>: Tab2 }</span><br><span class="line">        ]</span><br><span class="line">        },</span><br><span class="line">]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="4vue-router动态路由匹配"><a class="markdownIt-Anchor" href="#4vue-router动态路由匹配"></a> 4.vue-router动态路由匹配</h2><h3 id="41动态匹配路由的基本用法"><a class="markdownIt-Anchor" href="#41动态匹配路由的基本用法"></a> 4.1动态匹配路由的基本用法</h3><p>应用场景:通过动态路由参数的模式进行路由匹配</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> vueRouter ({</span><br><span class="line">    routes: [</span><br><span class="line">        <span class="comment">//动态路径参数以冒号开头</span></span><br><span class="line">    { <span class="attr">path</span> : <span class="string">'/user/:id'</span>, <span class="attr">component</span> : User }</span><br><span class="line">]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = {</span><br><span class="line"><span class="comment">//路由组件中通过$route.params获取路由参数</span></span><br><span class="line">    template: <span class="string">'&lt;div&gt;user {{ $route.params.id }}&lt;/div&gt;'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="42路由组件传递参数"><a class="markdownIt-Anchor" href="#42路由组件传递参数"></a> 4.2路由组件传递参数</h3><p>$route与对应路由形成高度耦合，不够灵活，所以可以使用props将组件和路由解耦</p><h4 id="1props的值为布尔类型"><a class="markdownIt-Anchor" href="#1props的值为布尔类型"></a> 1.props的值为布尔类型</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter({</span><br><span class="line">routes: [</span><br><span class="line">    <span class="comment">//如果props被设置为true，route.params将会被设置为组件属性</span></span><br><span class="line">    { <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User, <span class="attr">props</span>: <span class="literal">true</span> }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">const</span> User = {</span><br><span class="line">props: [<span class="string">'id'</span>], <span class="comment">//使用props接收路由参数</span></span><br><span class="line">template: <span class="string">'&lt;div&gt;用户ID:{{ id }&lt;/div&gt;'</span> <span class="comment">//使用路由参数</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5vue-router编程式导航"><a class="markdownIt-Anchor" href="#5vue-router编程式导航"></a> 5.vue-router编程式导航</h2><h3 id="51页面导航的两种方式"><a class="markdownIt-Anchor" href="#51页面导航的两种方式"></a> 5.1页面导航的两种方式</h3><ul><li><strong>声明式导航</strong>:通过<strong>点击链接</strong>实现导航的方式，叫做声明式导航<br>例如:普通网页中的 <code>&lt;a&gt;&lt;/a&gt;</code> 链接或 vue 中的 <code>&lt;router-link&gt;&lt;/router-link&gt;</code></li><li><strong>编程式导航</strong>:<strong>通过调用JavaScript</strong>形式的API实现导航的方式，叫做编程式导航例如:普通网页中的 <code>location.href</code></li></ul><p>常用的编程式导航API如下:</p><ul><li>this.$router.push (‘hash地址’)</li><li>this.$router.go(n)</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = {</span><br><span class="line">    template: <span class="string">'&lt;div&gt;&lt;button @click="goRegister"&gt;跳转到注册页面&lt;/button&gt;&lt;/div&gt;'</span>,</span><br><span class="line">    methods:{</span><br><span class="line">        goRegister: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="comment">// 用编程的方式控制路由跳转</span></span><br><span class="line">            <span class="keyword">this</span>.$router.push(<span class="string">'/register'</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="52编程式导航参数规则"><a class="markdownIt-Anchor" href="#52编程式导航参数规则"></a> 5.2编程式导航参数规则</h3><h4 id="routerpush-方法的参数规则"><a class="markdownIt-Anchor" href="#routerpush-方法的参数规则"></a> router.push() 方法的参数规则</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串(路径名称)</span></span><br><span class="line">router.push (<span class="string">'/home'</span>)</span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line">router.push({<span class="attr">path</span>: <span class="string">'/ home'</span>})<span class="comment">//命名的路由（传递参数)</span></span><br><span class="line">router.push({<span class="attr">name</span>: <span class="string">'/user'</span>, <span class="attr">params</span>: { <span class="attr">userId</span>: <span class="number">123</span> }})</span><br><span class="line"><span class="comment">//带查询参数，变成/register?uname=lisi</span></span><br><span class="line">router.push({ <span class="attr">path</span>: <span class="string">'/register'</span>, <span class="attr">query</span>: { <span class="attr">uname</span>: <span class="string">'lisi'</span> }})</span><br></pre></td></tr></tbody></table></figure><h2 id="6vue-router命名路由"><a class="markdownIt-Anchor" href="#6vue-router命名路由"></a> 6.vue-router命名路由</h2><h3 id="61命名路由的匹配规则"><a class="markdownIt-Anchor" href="#61命名路由的匹配规则"></a> 6.1命名路由的匹配规则</h3><p>为了更加方便的表示路由的路径，可以给路由规则起一个别名，即为“命名路由”。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter ({</span><br><span class="line">    routes: [</span><br><span class="line">        path: <span class="string">'/user/:id'</span> ,</span><br><span class="line">        name: <span class="string">'user" ,</span></span><br><span class="line"><span class="string">        component: User</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">})</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"{ name : 'user', params : { id: 123 } }"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.push ({ <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: { <span class="attr">id</span>: <span class="number">123</span> }})</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue局部组件注册</title>
    <link href="https://extheor.club/posts/b9325cf5/index.html"/>
    <id>https://extheor.club/posts/b9325cf5/index.html</id>
    <published>2020-11-07T15:39:54.433Z</published>
    <updated>2020-11-07T15:52:21.810Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue局部组件注册"><a class="markdownIt-Anchor" href="#vue局部组件注册"></a> Vue局部组件注册</h1><blockquote><p>直接写代码怎么用吧</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"test-com"</span>,{</span><br><span class="line">template: <span class="string">"&lt;div&gt;TestCom&lt;/div&gt;"</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test-com</span>&gt;</span><span class="tag">&lt;/<span class="name">test-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>这就是自定义组件</p></blockquote><blockquote><p>如果组件名使用大写会报错</p><p>那怎么办呢？这时就需要用到一个 Vue 实例中的 components 了，比如我自定义了 <code>&lt;HelloWorld&gt;&lt;/HelloWorld&gt;</code> 组件</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloWorld = {</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            msg: <span class="string">"HelloWorld"</span></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    template: <span class="string">"&lt;div&gt;{{msg}}&lt;/div&gt;"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    components:{</span><br><span class="line">        <span class="string">"hello-world"</span>: HelloWorld,</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>这样就能在 body 中使用 <code>&lt;hello-world&gt;&lt;/hello-world&gt;</code> 组件了</p></blockquote><blockquote><p>局部组件只能在注册他的父组件中使用</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 错误演示 - 以下代码会报错 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;hello-world&gt;&lt;test-com&gt;&lt;/test-com&gt;&lt;/hello-world&gt; --&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue介绍</title>
    <link href="https://extheor.club/posts/3270cf84/index.html"/>
    <id>https://extheor.club/posts/3270cf84/index.html</id>
    <published>2020-11-07T15:39:54.410Z</published>
    <updated>2020-11-07T15:52:21.800Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue介绍"><a class="markdownIt-Anchor" href="#vue介绍"></a> Vue介绍</h1><blockquote><p>可以从<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue官方文档</a>中学习，也可以从B站中去学习，我是看了两个</p></blockquote><h2 id="课程大纲"><a class="markdownIt-Anchor" href="#课程大纲"></a> 课程大纲</h2><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/Vuejs知识量化.svg"><h2 id="vue是什么"><a class="markdownIt-Anchor" href="#vue是什么"></a> Vue是什么</h2><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以<a href="%5Bhttps://baike.baidu.com/item/%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E8%AE%BE%E8%AE%A1/1257574?fr=aladdin%5D(https://baike.baidu.com/item/%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A%E8%AE%BE%E8%AE%A1/1257574?fr=aladdin)">自底向上逐层应用</a>。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="noopener">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="起步"><a class="markdownIt-Anchor" href="#起步"></a> 起步</h2><p>尝试 Vue.js 最简单的方法是使用 <a href="https://codesandbox.io/s/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-hello-world" target="_blank" rel="noopener">Hello World 例子</a>。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以<a href="https://github.com/vuejs/vuejs.org/blob/master/src/v2/examples/vue-20-hello-world/index.html" target="_blank" rel="noopener">创建一个 <code>.html</code> 文件</a>，然后通过如下方式引入 Vue：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>或者：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://cn.vuejs.org/guide/installation.html" target="_blank" rel="noopener">安装教程</a>给出了更多安装 Vue 的方式。请注意我们<strong>不推荐</strong>新手直接使用 <code>vue-cli</code>，尤其是在你还不熟悉基于 Node.js 的构建工具时。</p><p>如果你喜欢交互式的东西，你也可以查阅<a href="https://scrimba.com/g/gvuedocs" target="_blank" rel="noopener">这个 Scrimba 上的系列教程</a>，它揉合了录屏和代码试验田，并允许你随时暂停和播放。</p><h2 id="声明式渲染"><a class="markdownIt-Anchor" href="#声明式渲染"></a> 声明式渲染</h2><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  {{ message }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Hello Vue!</p></blockquote><p>我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是<strong>响应式的</strong>。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 <code>app.message</code> 的值，你将看到上例相应地更新。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    {{ message }} {{name}} {{age}}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = {</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span>,</span><br><span class="line">    name: <span class="string">"Vue"</span>,</span><br><span class="line">    age: <span class="string">"18"</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: data,</span><br><span class="line">});</span><br><span class="line">data.message = <span class="string">"Hello World!"</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>Hello World!</p></blockquote><p>然而我们发现使用app仍然能够获得到message的值，就像下面这样</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(app.message); <span class="comment">// =&gt; Hello World!</span></span><br></pre></td></tr></tbody></table></figure><p>通过 <code>app.$data</code> 可以获取到app中的data对象</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(app.$data); <span class="comment">// =&gt; {__ob__: Observer}</span></span><br></pre></td></tr></tbody></table></figure><p>注意我们不再和 HTML 直接交互了。一个 Vue 应用会将其挂载到一个 DOM 元素上 (对于这个例子是 <code>#app</code>) 然后对其进行完全控制。那个 HTML 是我们的入口，但其余都会发生在新创建的 Vue 实例内部。</p><p>除了文本插值，我们还可以像这样来绑定元素 attribute：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app-2'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="string">'页面加载于 '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>鼠标悬停几秒钟查看此处动态绑定的提示信息！</p></blockquote><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/v-bind.gif"><p>这里我们遇到了一点新东西。你看到的 <code>v-bind</code> attribute 被称为<strong>指令</strong>。指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊 attribute。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。在这里，该指令的意思是：“将这个元素节点的 <code>title</code> attribute 和 Vue 实例的 <code>message</code> property 保持一致”。</p><p>如果你再次打开浏览器的 JavaScript 控制台，输入 <code>app2.message = '新消息'</code>，就会再一次看到这个绑定了 <code>title</code> attribute 的 HTML 已经进行了更新。</p><h2 id="条件与循环"><a class="markdownIt-Anchor" href="#条件与循环"></a> 条件与循环</h2><p>控制切换一个元素是否显示也相当简单：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app-3'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    seen: <span class="literal">true</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>现在你看到我了</p></blockquote><p>继续在控制台输入 <code>app3.seen = false</code>，你会发现之前显示的消息消失了。</p><p>这个例子演示了我们不仅可以把数据绑定到 DOM 文本或 attribute，还可以绑定到 DOM <strong>结构</strong>。此外，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/移除元素时自动应用<a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">过渡效果</a>。</p><p>还有其它很多指令，每个都有特殊的功能。例如，<code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span>&gt;</span></span><br><span class="line">      {{ todo.text }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var app4 = new Vue({</span><br><span class="line">  el: '#app-4',</span><br><span class="line">  data: {</span><br><span class="line">    todos: [</span><br><span class="line">      { text: '学习 JavaScript' },</span><br><span class="line">      { text: '学习 Vue' },</span><br><span class="line">      { text: '整个牛项目' }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li>学习 JavaScript</li><li>学习 Vue</li><li>整个牛项目</li></ol></blockquote><p>在控制台里，输入 <code>app4.todos.push({ text: '新项目' })</code>，你会发现列表最后添加了一个新项目。</p><h2 id="处理用户输入"><a class="markdownIt-Anchor" href="#处理用户输入"></a> 处理用户输入</h2><p>为了让用户和你的应用进行交互，我们可以用 <code>v-on</code> 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ message }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"reverseMessage"</span>&gt;</span>反转消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app5 = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app-5'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="string">'Hello Vue.js!'</span></span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    reverseMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.message);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/消息反转.gif"><p>注意在 <code>reverseMessage</code> 方法中，我们更新了应用的状态，但没有触碰 DOM——所有的 DOM 操作都由 Vue 来处理，你编写的代码只需要关注逻辑层面即可。</p><p>Vue 还提供了 <code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-6"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ message }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app6 = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app-6'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/images/vue图片/表单双向绑定.gif"><h2 id="组件化应用构建"><a class="markdownIt-Anchor" href="#组件化应用构建"></a> 组件化应用构建</h2><p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cn.vuejs.org/images/components.png" alt="Component Tree"></p><p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。在 Vue 中注册组件很简单：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义名为 todo-item 的新组件</span></span><br><span class="line">Vue.component(<span class="string">'todo-item'</span>, {</span><br><span class="line">  template: <span class="string">'&lt;li&gt;这是个待办项&lt;/li&gt;'</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(...)</span><br></pre></td></tr></tbody></table></figure><p>现在你可以用它构建另一个组件模板：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">todo-item</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>但是这样会为每个待办项渲染同样的文本，这看起来并不炫酷。我们应该能从父作用域将数据传到子组件才对。让我们来修改一下组件的定义，使之能够接受一个 <a href="https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87-Prop-%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener">prop</a>：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-item'</span>, {</span><br><span class="line">  <span class="comment">// todo-item 组件现在接受一个</span></span><br><span class="line">  <span class="comment">// "prop"，类似于一个自定义 attribute。</span></span><br><span class="line">  <span class="comment">// 这个 prop 名为 todo。</span></span><br><span class="line">  props: [<span class="string">'todo'</span>],</span><br><span class="line">  template: <span class="string">'&lt;li&gt;{{ todo.text }}&lt;/li&gt;'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>现在，我们可以使用 <code>v-bind</code> 指令将待办项传到循环输出的每个组件中：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-7"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      现在我们为每个 todo-item 提供 todo 对象</span></span><br><span class="line"><span class="comment">      todo 对象是变量，即其内容可以是动态的。</span></span><br><span class="line"><span class="comment">      我们也需要为每个组件提供一个“key”，稍后再</span></span><br><span class="line"><span class="comment">      作详细解释。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"item in groceryList"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:todo</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:key</span>=<span class="string">"item.id"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-item'</span>, {</span><br><span class="line">  props: [<span class="string">'todo'</span>],</span><br><span class="line">  template: <span class="string">'&lt;li&gt;{{ todo.text }}&lt;/li&gt;'</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app7 = <span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app-7'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    groceryList: [</span><br><span class="line">      { <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">'蔬菜'</span> },</span><br><span class="line">      { <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'奶酪'</span> },</span><br><span class="line">      { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'随便其它什么人吃的东西'</span> }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li>蔬菜</li><li>奶酪</li><li>随便其它什么人吃的东西</li></ol></blockquote><h3 id="与自定义元素的区别"><a class="markdownIt-Anchor" href="#与自定义元素的区别"></a> # 与自定义元素的区别</h3><p>你可能已经注意到 Vue 组件非常类似于<strong>自定义元素</strong>——它是 <a href="https://www.w3.org/wiki/WebComponents/" target="_blank" rel="noopener">Web 组件规范</a>的一部分，这是因为 Vue 的组件语法部分参考了该规范。例如 Vue 组件实现了 <a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md" target="_blank" rel="noopener">Slot API</a> 与 <code>is</code> attribute。但是，还是有几个关键差别：</p><ol><li>Web Components 规范已经完成并通过，但未被所有浏览器原生实现。目前 Safari 10.1+、Chrome 54+ 和 Firefox 63+ 原生支持 Web Components。相比之下，Vue 组件不需要任何 polyfill，并且在所有支持的浏览器 (IE9 及更高版本) 之下表现一致。必要时，Vue 组件也可以包装于原生自定义元素之内。</li><li>Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。</li></ol><p>虽然 Vue 内部没有使用自定义元素，不过在应用使用自定义元素、或以自定义元素形式发布时，<a href="https://custom-elements-everywhere.com/#vue" target="_blank" rel="noopener">依然有很好的互操作性</a>。Vue CLI 也支持将 Vue 组件构建成为原生的自定义元素。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue过滤器</title>
    <link href="https://extheor.club/posts/61057c88/index.html"/>
    <id>https://extheor.club/posts/61057c88/index.html</id>
    <published>2020-11-07T15:39:54.398Z</published>
    <updated>2020-11-07T15:52:21.816Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/APlayer.min.css"><script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/js/Meting.min.js"></script><h1 id="vue过滤器"><a class="markdownIt-Anchor" href="#vue过滤器"></a> Vue过滤器</h1><h2 id="自定义过滤器"><a class="markdownIt-Anchor" href="#自定义过滤器"></a> 自定义过滤器</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首字母大写</span></span><br><span class="line">Vue.filter(<span class="string">"upper"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> val.charAt(<span class="number">0</span>).toUpperCase() + val.slice(<span class="number">1</span>)</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 首字母小写</span></span><br><span class="line">Vue.filter(<span class="string">"lower"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> val.charAt(<span class="number">0</span>).toLowerCase() + val.slice(<span class="number">1</span>)</span><br><span class="line">})</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        msg: <span class="string">""</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ msg | upper }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ msg | upper | lower }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>实现效果图</p><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@f5695f36b36d7666a3af40535e893aaa77a4130f/2020/11/02/a9fc3fd7d58f3ecd7fc53e2cecf4f225.png" alt=""></p><blockquote><p>另外过滤器还可以定义在属性上，如下用法</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ msg | upper }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ msg | upper | lower }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:abc</span>=<span class="string">"msg | upper"</span>&gt;</span>测试数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.3.1/butterfly/img/loading9.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/extheor/HexoStaticFile@233dfab15dafb416157db88a4daeaad13aa5eba1/2020/11/02/319b473bc6bbb98bfa20a83461f13618.png" alt=""></p><h2 id="局部过滤器"><a class="markdownIt-Anchor" href="#局部过滤器"></a> 局部过滤器</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filters: {</span><br><span class="line">    <span class="string">"upper"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> val.charAt(<span class="number">0</span>).toUpperCase() + val.slice(<span class="number">1</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ msg | upper }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>同样可以实现相同的效果</p></blockquote><h2 id="带参数的过滤器"><a class="markdownIt-Anchor" href="#带参数的过滤器"></a> 带参数的过滤器</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">"format"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, arg</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="string">"yyyy-MM-dd"</span>){</span><br><span class="line">        <span class="keyword">var</span> result = <span class="string">""</span></span><br><span class="line">        result += value.getFullYear() + <span class="string">"-"</span> + (value.getMonth() + <span class="number">1</span>)  + <span class="string">"-"</span> + value.getDate()</span><br><span class="line">        <span class="comment">// console.log(result);</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: {</span><br><span class="line">        date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ date | format("yyyy-MM-dd") }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>输出结果</p><p>2020-11-2</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@v0.1/Hexo/assets/css/
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://extheor.club/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://extheor.club/tags/Vue/"/>
    
  </entry>
  
</feed>
